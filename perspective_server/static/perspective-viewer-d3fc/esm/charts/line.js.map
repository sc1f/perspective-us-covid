{"version":3,"sources":["../../../src/js/charts/line.js"],"names":["fc","axisFactory","AXIS_TYPES","chartSvgFactory","axisSplitter","seriesColors","lineSeries","splitData","colorLegend","filterData","transposeData","withGridLines","hardLimitZeroPadding","zoomableChart","nearbyTip","lineChart","container","settings","data","color","legend","scale","series","seriesSvgRepeat","orient","paddingStrategy","pad","padUnit","xAxis","excludeType","linear","settingName","valueName","yAxisFactory","splitter","yAxis1","plotSeries","haveSplit","chart","plotArea","yNice","zoomChart","xScale","toolTip","yScale","yAxis2","altData","altAxis","altDataWithScale","transposed_data","datum","call","plugin","type","name","max_cells","max_columns"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\nimport * as fc from \"d3fc\";\r\nimport {axisFactory} from \"../axis/axisFactory\";\r\nimport {AXIS_TYPES} from \"../axis/axisType\";\r\nimport {chartSvgFactory} from \"../axis/chartFactory\";\r\nimport {axisSplitter} from \"../axis/axisSplitter\";\r\nimport {seriesColors} from \"../series/seriesColors\";\r\nimport {lineSeries} from \"../series/lineSeries\";\r\nimport {splitData} from \"../data/splitData\";\r\nimport {colorLegend} from \"../legend/legend\";\r\nimport {filterData} from \"../legend/filter\";\r\nimport {transposeData} from \"../data/transposeData\";\r\nimport withGridLines from \"../gridlines/gridlines\";\r\n\r\nimport {hardLimitZeroPadding} from \"../d3fc/padding/hardLimitZero\";\r\nimport zoomableChart from \"../zoom/zoomableChart\";\r\nimport nearbyTip from \"../tooltip/nearbyTip\";\r\n\r\nfunction lineChart(container, settings) {\r\n    const data = splitData(settings, filterData(settings));\r\n    const color = seriesColors(settings);\r\n\r\n    const legend = colorLegend()\r\n        .settings(settings)\r\n        .scale(color);\r\n\r\n    const series = fc\r\n        .seriesSvgRepeat()\r\n        .series(lineSeries(settings, color))\r\n        .orient(\"horizontal\");\r\n\r\n    const paddingStrategy = hardLimitZeroPadding()\r\n        .pad([0.1, 0.1])\r\n        .padUnit(\"percent\");\r\n\r\n    const xAxis = axisFactory(settings)\r\n        .excludeType(AXIS_TYPES.linear)\r\n        .settingName(\"crossValues\")\r\n        .valueName(\"crossValue\")(data);\r\n\r\n    const yAxisFactory = axisFactory(settings)\r\n        .settingName(\"mainValues\")\r\n        .valueName(\"mainValue\")\r\n        .orient(\"vertical\")\r\n        .paddingStrategy(paddingStrategy);\r\n\r\n    // Check whether we've split some values into a second y-axis\r\n    const splitter = axisSplitter(settings, transposeData(data)).color(color);\r\n\r\n    const yAxis1 = yAxisFactory(splitter.data());\r\n\r\n    // No grid lines if splitting y-axis\r\n    const plotSeries = splitter.haveSplit() ? series : withGridLines(series, settings).orient(\"vertical\");\r\n    const chart = chartSvgFactory(xAxis, yAxis1)\r\n        .axisSplitter(splitter)\r\n        .plotArea(plotSeries);\r\n\r\n    chart.yNice && chart.yNice();\r\n\r\n    const zoomChart = zoomableChart()\r\n        .chart(chart)\r\n        .settings(settings)\r\n        .xScale(xAxis.scale);\r\n\r\n    const toolTip = nearbyTip()\r\n        .settings(settings)\r\n        .xScale(xAxis.scale)\r\n        .yScale(yAxis1.scale)\r\n        .color(color)\r\n        .data(data);\r\n\r\n    if (splitter.haveSplit()) {\r\n        // Create the y-axis data for the alt-axis\r\n        const yAxis2 = yAxisFactory(splitter.altData());\r\n        chart.altAxis(yAxis2);\r\n        // Give the tooltip the information (i.e. 2 datasets with different\r\n        // scales)\r\n        toolTip.data(splitter.data()).altDataWithScale({yScale: yAxis2.scale, data: splitter.altData()});\r\n    }\r\n\r\n    const transposed_data = splitter.data();\r\n\r\n    // render\r\n    container.datum(transposed_data).call(zoomChart);\r\n    container.call(toolTip);\r\n    container.call(legend);\r\n}\r\n\r\nlineChart.plugin = {\r\n    type: \"d3_y_line\",\r\n    name: \"Y Line Chart\",\r\n    max_cells: 4000,\r\n    max_columns: 50\r\n};\r\n\r\nexport default lineChart;\r\n"],"file":"line.js"}