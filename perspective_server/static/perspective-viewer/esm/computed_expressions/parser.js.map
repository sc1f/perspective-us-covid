{"version":3,"sources":["../../../src/js/computed_expressions/parser.js"],"names":["CstParser","vocabulary","Comma","ColumnName","As","LeftParen","RightParen","Sqrt","Pow2","Abs","Invert","Log","Exp","Add","Subtract","Multiply","Divide","Pow","PercentOf","Equals","NotEquals","GreaterThan","LessThan","Length","Is","Lowercase","Uppercase","ConcatComma","ConcatSpace","Bin1000th","Bin1000","Bin100th","Bin100","Bin10th","Bin10","HourOfDay","DayOfWeek","MonthOfYear","SecondBucket","MinuteBucket","HourBucket","DayBucket","WeekBucket","MonthBucket","YearBucket","PerspectiveParserErrorMessage","ComputedExpressionColumnParser","constructor","errorMessageProvider","RULE","SUBRULE","Expression","OR","ALT","OperatorComputedColumn","FunctionComputedColumn","ERR_MSG","LABEL","AT_LEAST_ONE","Operator","SUBRULE2","OPTION","Function","CONSUME","AT_LEAST_ONE_SEP","SEP","DEF","ParentheticalExpression","TerminalColumnName","performSelfAnalysis"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport {CstParser} from \"chevrotain\";\nimport {\n    vocabulary,\n    Comma,\n    ColumnName,\n    As,\n    LeftParen,\n    RightParen,\n    Sqrt,\n    Pow2,\n    Abs,\n    Invert,\n    Log,\n    Exp,\n    Add,\n    Subtract,\n    Multiply,\n    Divide,\n    Pow,\n    PercentOf,\n    Equals,\n    NotEquals,\n    GreaterThan,\n    LessThan,\n    Length,\n    Is,\n    Lowercase,\n    Uppercase,\n    ConcatComma,\n    ConcatSpace,\n    Bin1000th,\n    Bin1000,\n    Bin100th,\n    Bin100,\n    Bin10th,\n    Bin10,\n    HourOfDay,\n    DayOfWeek,\n    MonthOfYear,\n    SecondBucket,\n    MinuteBucket,\n    HourBucket,\n    DayBucket,\n    WeekBucket,\n    MonthBucket,\n    YearBucket\n} from \"./lexer\";\nimport {PerspectiveParserErrorMessage} from \"./error\";\n\nexport class ComputedExpressionColumnParser extends CstParser {\n    constructor() {\n        super(vocabulary, {\n            errorMessageProvider: PerspectiveParserErrorMessage\n        });\n\n        this.RULE(\"SuperExpression\", () => {\n            this.SUBRULE(this.Expression);\n        });\n\n        this.RULE(\"Expression\", () => {\n            this.OR(\n                [\n                    {\n                        ALT: () => {\n                            this.SUBRULE(this.OperatorComputedColumn);\n                        }\n                    },\n                    {\n                        ALT: () => {\n                            this.SUBRULE(this.FunctionComputedColumn);\n                        }\n                    }\n                ],\n                {\n                    ERR_MSG: \"Expected an expression of the form `x + y` or `func(x)`.\"\n                }\n            );\n        });\n\n        this.RULE(\"OperatorComputedColumn\", () => {\n            this.SUBRULE(this.ColumnName, {LABEL: \"left\"});\n            this.AT_LEAST_ONE(() => {\n                this.SUBRULE(this.Operator);\n                this.SUBRULE2(this.ColumnName, {LABEL: \"right\"});\n            });\n            this.OPTION(() => {\n                this.SUBRULE(this.As, {LABEL: \"as\"});\n            });\n        });\n\n        this.RULE(\"FunctionComputedColumn\", () => {\n            this.SUBRULE(this.Function);\n            this.CONSUME(LeftParen);\n            this.AT_LEAST_ONE_SEP({\n                SEP: Comma,\n                DEF: () => {\n                    this.SUBRULE(this.ColumnName);\n                }\n            });\n            this.CONSUME(RightParen);\n            this.OPTION(() => {\n                this.SUBRULE(this.As, {LABEL: \"as\"});\n            });\n        });\n\n        this.RULE(\"ColumnName\", () => {\n            this.OR([{ALT: () => this.SUBRULE(this.ParentheticalExpression)}, {ALT: () => this.CONSUME(ColumnName)}], {\n                ERR_MSG: \"Expected a column name (wrapped in double quotes) or a parenthesis-wrapped expression.\"\n            });\n        });\n\n        this.RULE(\"TerminalColumnName\", () => {\n            this.CONSUME(ColumnName);\n        });\n\n        this.RULE(\"As\", () => {\n            this.CONSUME(As);\n            this.SUBRULE(this.TerminalColumnName);\n        });\n\n        this.RULE(\"Function\", () => {\n            this.OR([\n                {ALT: () => this.CONSUME(Sqrt)},\n                {ALT: () => this.CONSUME(Pow2)},\n                {ALT: () => this.CONSUME(Abs)},\n                {ALT: () => this.CONSUME(Invert)},\n                {ALT: () => this.CONSUME(Log)},\n                {ALT: () => this.CONSUME(Exp)},\n                {ALT: () => this.CONSUME(Bin1000th)},\n                {ALT: () => this.CONSUME(Bin1000)},\n                {ALT: () => this.CONSUME(Bin100th)},\n                {ALT: () => this.CONSUME(Bin100)},\n                {ALT: () => this.CONSUME(Bin10th)},\n                {ALT: () => this.CONSUME(Bin10)},\n                {ALT: () => this.CONSUME(Length)},\n                {ALT: () => this.CONSUME(Uppercase)},\n                {ALT: () => this.CONSUME(Lowercase)},\n                {ALT: () => this.CONSUME(ConcatComma)},\n                {ALT: () => this.CONSUME(ConcatSpace)},\n                {ALT: () => this.CONSUME(HourOfDay)},\n                {ALT: () => this.CONSUME(DayOfWeek)},\n                {ALT: () => this.CONSUME(MonthOfYear)},\n                {ALT: () => this.CONSUME(SecondBucket)},\n                {ALT: () => this.CONSUME(MinuteBucket)},\n                {ALT: () => this.CONSUME(HourBucket)},\n                {ALT: () => this.CONSUME(DayBucket)},\n                {ALT: () => this.CONSUME(WeekBucket)},\n                {ALT: () => this.CONSUME(MonthBucket)},\n                {ALT: () => this.CONSUME(YearBucket)}\n            ]);\n        });\n\n        this.RULE(\"Operator\", () => {\n            this.OR([\n                {ALT: () => this.CONSUME(Add)},\n                {ALT: () => this.CONSUME(Subtract)},\n                {ALT: () => this.CONSUME(Multiply)},\n                {ALT: () => this.CONSUME(Divide)},\n                {ALT: () => this.CONSUME(Pow)},\n                {ALT: () => this.CONSUME(PercentOf)},\n                {ALT: () => this.CONSUME(Equals)},\n                {ALT: () => this.CONSUME(NotEquals)},\n                {ALT: () => this.CONSUME(GreaterThan)},\n                {ALT: () => this.CONSUME(LessThan)},\n                {ALT: () => this.CONSUME(Is)}\n            ]);\n        });\n\n        /**\n         * The rule for parenthetical expressions, which consume parentheses\n         * and resolve to this.Expression.\n         */\n        this.RULE(\"ParentheticalExpression\", () => {\n            this.CONSUME(LeftParen);\n            this.SUBRULE(this.Expression);\n            this.CONSUME(RightParen);\n        });\n\n        this.performSelfAnalysis();\n    }\n}\n"],"file":"parser.js"}