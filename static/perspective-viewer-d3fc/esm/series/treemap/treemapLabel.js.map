{"version":3,"sources":["../../../../src/js/series/treemap/treemapLabel.js"],"names":["select","isElementOverlapping","isElementOverflowing","minTextSize","labelMapExists","d","target","textAttributes","toggleLabels","nodes","treemapLevel","crossValues","selectAll","style","attr","textLevelHelper","visibleNodes","selectVisibleNodes","centerLabels","preventTextCollisions","restoreLabels","each","i","label","dx","dy","class","textCollisionFuzzFactorPx","textAdjustPx","rect","element","getBoundingClientRect","topNodes","filter","_","textVisability","high","push","low","lowerNode","topNode","forEach","Number","lockTextOpacity","textOpacity","unlockTextOpacity","top","mid","lower","zero","adjustLabelsThatOverflow","shrinkOrHideText","centerText","nodeSelect","width","height","parent","parentNode","childNodes","textRect","rectRect","needsToShrinkOrHide","direction","fontSize","parseInt","x","every","crossValue","split","includes","depth"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {select} from \"d3\";\nimport {isElementOverlapping, isElementOverflowing} from \"../../utils/utils\";\n\nconst minTextSize = 7;\n\nexport const labelMapExists = d => (d.target && d.target.textAttributes ? true : false);\n\nexport const toggleLabels = (nodes, treemapLevel, crossValues) => {\n    nodes\n        .selectAll(\"text\")\n        .style(\"font-size\", null)\n        .attr(\"class\", d => textLevelHelper(d, treemapLevel, crossValues));\n\n    const visibleNodes = selectVisibleNodes(nodes);\n    centerLabels(visibleNodes);\n    preventTextCollisions(visibleNodes);\n};\n\nexport const restoreLabels = nodes => {\n    nodes.each((d, i, nodes) => {\n        const label = select(nodes[i]).selectAll(\"text\");\n        label\n            .attr(\"dx\", d.target.textAttributes.dx)\n            .attr(\"dy\", d.target.textAttributes.dy)\n            .attr(\"class\", d.target.textAttributes.class)\n            .style(\"font-size\", d.target.textAttributes[\"font-size\"]);\n    });\n};\n\nexport const preventTextCollisions = nodes => {\n    const textCollisionFuzzFactorPx = -2;\n    const textAdjustPx = 19; // This should remain the same as the css value for .top => font-size in the chart.less\n    const rect = element => element.getBoundingClientRect();\n\n    const topNodes = [];\n    nodes\n        .selectAll(\"text\")\n        .filter((_, i, nodes) => select(nodes[i]).attr(\"class\") === textVisability.high)\n        .each((_, i, nodes) => topNodes.push(nodes[i]));\n\n    nodes\n        .selectAll(\"text\")\n        .filter((_, i, nodes) => select(nodes[i]).attr(\"class\") === textVisability.low)\n        .each((_, i, nodes) => {\n            const lowerNode = nodes[i];\n            topNodes\n                .filter(topNode => isElementOverlapping(\"x\", rect(topNode), rect(lowerNode)) && isElementOverlapping(\"y\", rect(topNode), rect(lowerNode), textCollisionFuzzFactorPx))\n                .forEach(() => select(lowerNode).attr(\"dy\", Number(select(lowerNode).attr(\"dy\")) + textAdjustPx));\n        });\n};\n\nexport const lockTextOpacity = d => select(d).style(\"opacity\", textOpacity[select(d).attr(\"class\")]);\n\nexport const unlockTextOpacity = d => select(d).style(\"opacity\", null);\n\nexport const textOpacity = {top: 1, mid: 0.7, lower: 0};\n\nexport const selectVisibleNodes = nodes =>\n    nodes.filter(\n        (_, i, nodes) =>\n            select(nodes[i])\n                .selectAll(\"text\")\n                .attr(\"class\") !== textVisability.zero\n    );\n\nexport const adjustLabelsThatOverflow = nodes => nodes.selectAll(\"text\").each((_, i, nodes) => shrinkOrHideText(nodes[i]));\n\nconst centerLabels = nodes => nodes.selectAll(\"text\").each((_, i, nodes) => centerText(nodes[i]));\n\nconst centerText = d => {\n    const nodeSelect = select(d);\n    const rect = d.getBoundingClientRect();\n    nodeSelect.attr(\"dx\", 0 - rect.width / 2).attr(\"dy\", 0 + rect.height / 4);\n};\n\nconst shrinkOrHideText = d => {\n    const parent = d.parentNode;\n    const rect = parent.childNodes[0];\n\n    const textRect = d.getBoundingClientRect();\n    const rectRect = rect.getBoundingClientRect();\n\n    if (!needsToShrinkOrHide(d, rectRect, textRect, \"left\") && !needsToShrinkOrHide(d, rectRect, textRect, \"bottom\")) {\n        select(d).attr(\"class\", select(d).attr(\"class\"));\n    }\n};\n\nconst needsToShrinkOrHide = (d, rectRect, textRect, direction) => {\n    if (isElementOverflowing(rectRect, textRect, direction)) {\n        const fontSize = parseInt(select(d).style(\"font-size\"));\n        if (fontSize > minTextSize) {\n            select(d).style(\"font-size\", `${fontSize - 1}px`);\n            centerText(d);\n            shrinkOrHideText(d);\n        } else {\n            select(d).style(\"font-size\", null);\n            select(d).attr(\"class\", textVisability.zero);\n        }\n        return true;\n    }\n    return false;\n};\n\nconst textLevelHelper = (d, treemapLevel, crossValues) => {\n    if (!crossValues.filter(x => x !== \"\").every(x => d.crossValue.split(\"|\").includes(x))) return textVisability.zero;\n    switch (d.depth) {\n        case treemapLevel + 1:\n            return textVisability.high;\n        case treemapLevel + 2:\n            return textVisability.low;\n        default:\n            return textVisability.zero;\n    }\n};\n\nconst textVisability = {high: \"top\", low: \"mid\", zero: \"lower\"};\n"],"file":"treemapLabel.js"}