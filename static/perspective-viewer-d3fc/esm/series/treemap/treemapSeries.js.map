{"version":3,"sources":["../../../../src/js/series/treemap/treemapSeries.js"],"names":["toggleLabels","adjustLabelsThatOverflow","selectVisibleNodes","treemapLayout","changeLevel","returnToLevel","parentControls","calculateRootLevelMap","saveLabelMap","nodeLevel","leaf","branch","root","calcWidth","d","x1","x0","calcHeight","y1","y0","isLeafNode","maxDepth","depth","nodeLevelHelper","treemapSeries","settings","data","color","treemapDiv","parentCtrls","_treemapSeries","treemapSvg","height","treemapLevel","treemapRoute","treemap","node","getBoundingClientRect","width","nodes","selectAll","descendants","nodesEnter","enter","append","nodesMerge","merge","sort","a","b","rects","select","attr","style","labels","filter","value","text","name","rootNode","crossValue","datum","length","push","children","on","args","container"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {toggleLabels, adjustLabelsThatOverflow, selectVisibleNodes} from \"./treemapLabel\";\nimport treemapLayout from \"./treemapLayout\";\nimport {changeLevel, returnToLevel} from \"./treemapTransitions\";\nimport {parentControls} from \"./treemapControls\";\nimport {calculateRootLevelMap, saveLabelMap} from \"./treemapLevelCalculation\";\n\nexport const nodeLevel = {leaf: \"leafnode\", branch: \"branchnode\", root: \"rootnode\"};\nexport const calcWidth = d => d.x1 - d.x0;\nexport const calcHeight = d => d.y1 - d.y0;\nconst isLeafNode = (maxDepth, d) => d.depth === maxDepth;\nconst nodeLevelHelper = (maxDepth, d) => (d.depth === 0 ? nodeLevel.root : isLeafNode(maxDepth, d) ? nodeLevel.leaf : nodeLevel.branch);\n\nexport function treemapSeries() {\n    let settings = null;\n    let data = null;\n    let color = null;\n    let treemapDiv = null;\n    let parentCtrls = null;\n\n    const _treemapSeries = treemapSvg => {\n        parentCtrls = parentControls(treemapDiv);\n        parentCtrls();\n\n        const maxDepth = data.height;\n        if (!settings.treemapLevel) settings.treemapLevel = 0;\n        if (!settings.treemapRoute) settings.treemapRoute = [];\n        const treemap = treemapLayout(treemapDiv.node().getBoundingClientRect().width, treemapDiv.node().getBoundingClientRect().height);\n        treemap(data);\n\n        const nodes = treemapSvg.selectAll(\"g\").data(data.descendants());\n        const nodesEnter = nodes.enter().append(\"g\");\n\n        nodesEnter.append(\"rect\");\n        nodesEnter.append(\"text\");\n\n        // Draw child nodes first\n        const nodesMerge = nodesEnter.merge(nodes).sort((a, b) => b.depth - a.depth);\n\n        const rects = nodesMerge\n            .select(\"rect\")\n            .attr(\"class\", d => `treerect ${nodeLevelHelper(maxDepth, d)}`)\n            .style(\"x\", d => d.x0)\n            .style(\"y\", d => d.y0)\n            .style(\"width\", d => calcWidth(d))\n            .style(\"height\", d => calcHeight(d));\n        color && rects.style(\"fill\", d => color(d.data.color));\n\n        const labels = nodesMerge\n            .filter(d => d.value !== 0)\n            .select(\"text\")\n            .attr(\"x\", d => d.x0 + calcWidth(d) / 2)\n            .attr(\"y\", d => d.y0 + calcHeight(d) / 2)\n            .text(d => d.data.name);\n\n        const rootNode = rects.filter(d => d.crossValue === \"\").datum();\n        calculateRootLevelMap(nodesMerge, rootNode);\n\n        toggleLabels(nodesMerge, 0, []);\n        adjustLabelsThatOverflow(selectVisibleNodes(nodesMerge));\n        saveLabelMap(nodesMerge, 0);\n\n        if (settings.treemapRoute.length === 0) settings.treemapRoute.push(rootNode.crossValue);\n        rects.filter(d => d.children).on(\"click\", d => changeLevel(d, rects, nodesMerge, labels, settings, treemapDiv, treemapSvg, rootNode, parentCtrls));\n\n        returnToLevel(rects, nodesMerge, labels, settings, treemapDiv, treemapSvg, rootNode, parentCtrls);\n    };\n\n    _treemapSeries.settings = (...args) => {\n        if (!args.length) {\n            return settings;\n        }\n        settings = args[0];\n        return _treemapSeries;\n    };\n\n    _treemapSeries.data = (...args) => {\n        if (!args.length) {\n            return data;\n        }\n        data = args[0];\n        return _treemapSeries;\n    };\n\n    _treemapSeries.color = (...args) => {\n        if (!args.length) {\n            return color;\n        }\n        color = args[0];\n        return _treemapSeries;\n    };\n\n    _treemapSeries.container = (...args) => {\n        if (!args.length) {\n            return treemapDiv;\n        }\n        treemapDiv = args[0];\n        return _treemapSeries;\n    };\n\n    return _treemapSeries;\n}\n"],"file":"treemapSeries.js"}