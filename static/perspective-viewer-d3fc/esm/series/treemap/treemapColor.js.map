{"version":3,"sources":["../../../../src/js/series/treemap/treemapColor.js"],"names":["seriesColorRange","treeColor","settings","data","realValues","length","colors","filter","x","height","map","getColors","reduce","a","b","concat","min","Math","max","nodes","children","forEach","child","push","color"],"mappings":";;AAAA;;;;;;;;AASA,SAAQA,gBAAR,QAA+B,gBAA/B;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmC;AACtC,MAAID,QAAQ,CAACE,UAAT,CAAoBC,MAApB,GAA6B,CAA7B,IAAkCH,QAAQ,CAACE,UAAT,CAAoB,CAApB,MAA2B,IAAjE,EAAuE;AACvE,QAAME,MAAM,GAAGH,IAAI,CACdI,MADU,CACHC,CAAC,IAAIA,CAAC,CAACC,MAAF,GAAW,CADb,EAEVC,GAFU,CAENF,CAAC,IAAIG,SAAS,CAACH,CAAD,CAFR,EAGVI,MAHU,CAGH,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAHP,CAAf;AAIA,MAAIE,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGV,MAAZ,CAAV;AACA,MAAIY,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS,GAAGZ,MAAZ,CAAV;AACA,SAAON,gBAAgB,CAACE,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB,CAACc,GAAD,EAAME,GAAN,CAAvB,CAAvB;AACH,C,CAED;;AACA,SAASP,SAAT,CAAmBQ,KAAnB,EAA0Bb,MAAM,GAAG,EAAnC,EAAuC;AACnCa,EAAAA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAef,MAAf,GAAwB,CAA1C,GAA8Cc,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,KAAK,IAAIhB,MAAM,CAACS,MAAP,CAAcJ,SAAS,CAACW,KAAD,EAAQhB,MAAR,CAAvB,CAAhC,CAA9C,GAAyHA,MAAM,CAACiB,IAAP,CAAYJ,KAAK,CAAChB,IAAN,CAAWqB,KAAvB,CAAzH;AACA,SAAOlB,MAAP;AACH","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {seriesColorRange} from \"../seriesRange\";\n\nexport function treeColor(settings, data) {\n    if (settings.realValues.length < 1 || settings.realValues[1] === null) return;\n    const colors = data\n        .filter(x => x.height > 0)\n        .map(x => getColors(x))\n        .reduce((a, b) => a.concat(b));\n    let min = Math.min(...colors);\n    let max = Math.max(...colors);\n    return seriesColorRange(settings, null, null, [min, max]);\n}\n\n// only get the colors from the bottom level (e.g. nodes with no children)\nfunction getColors(nodes, colors = []) {\n    nodes.children && nodes.children.length > 0 ? nodes.children.forEach(child => colors.concat(getColors(child, colors))) : colors.push(nodes.data.color);\n    return colors;\n}\n"],"file":"treemapColor.js"}