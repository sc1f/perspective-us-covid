{"version":3,"sources":["../../../../src/js/series/treemap/treemapLevelCalculation.js"],"names":["calcWidth","calcHeight","hierarchy","select","treemapLayout","textOpacity","includesAllCrossValues","d","crossValues","every","val","crossValue","split","includes","calculateSubTreeMap","nodesMerge","treemapLevel","rootNode","treemapDiv","approximateAttributesForAllNodes","mapLevel","levelRoot","recalculateVisibleSubTreeCoordinates","node","getBoundingClientRect","width","height","calculateTextOpacities","calculateRootLevelMap","each","x0","x1","y0","y1","visible","opacity","saveLabelMap","nodes","i","label","selectAll","textAttributes","dx","attr","dy","class","style","oldDimensions","x","y","newDimensions","dimensionMultiplier","data","name","subTreeRoot","treeRootWidth","treeRootHeight","treemapBlueprinter","treemapBlueprint","sum","size","dummiedDescendants","descendants","forEach","_","text","datum","textVis","textLockedAt"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {calcWidth, calcHeight} from \"./treemapSeries\";\nimport {hierarchy, select} from \"d3\";\nimport treemapLayout from \"./treemapLayout\";\nimport {textOpacity} from \"./treemapLabel\";\n\nconst includesAllCrossValues = (d, crossValues) => crossValues.every(val => d.crossValue.split(\"|\").includes(val));\n\nexport function calculateSubTreeMap(d, crossValues, nodesMerge, treemapLevel, rootNode, treemapDiv) {\n    // We can approximate coordinates for most of the tree which will be shunted\n    // beyond the viewable area. This approach alone results in excessive\n    // margins as one goes deeper into the treemap.\n    approximateAttributesForAllNodes(d, crossValues, nodesMerge, treemapLevel, rootNode);\n    d.mapLevel[treemapLevel].levelRoot = true;\n    // Use the pre-existing d3 mechanism to calculate the subtree for the\n    // viewable area.\n    recalculateVisibleSubTreeCoordinates(d, treemapDiv.node().getBoundingClientRect().width, treemapDiv.node().getBoundingClientRect().height, treemapLevel);\n\n    calculateTextOpacities(nodesMerge, treemapLevel);\n}\n\nexport function calculateRootLevelMap(nodesMerge, rootNode) {\n    nodesMerge.each(d => {\n        d.mapLevel = [];\n        d.mapLevel[0] = {\n            x0: d.x0,\n            x1: calcWidth(d) + d.x0,\n            y0: d.y0,\n            y1: calcHeight(d) + d.y0,\n            visible: true,\n            opacity: 1\n        };\n    });\n    rootNode.mapLevel[0].levelRoot = true;\n    calculateTextOpacities(nodesMerge, 0);\n}\n\nexport const saveLabelMap = (nodes, treemapLevel) => {\n    nodes.each((d, i, nodes) => {\n        const label = select(nodes[i]).selectAll(\"text\");\n        d.mapLevel[treemapLevel].textAttributes = {\n            dx: label.attr(\"dx\"),\n            dy: label.attr(\"dy\"),\n            class: label.attr(\"class\"),\n            \"font-size\": label.style(\"font-size\")\n        };\n    });\n};\n\nfunction approximateAttributesForAllNodes(d, crossValues, nodesMerge, treemapLevel, rootNode) {\n    const oldDimensions = {x: d.x0, y: d.y0, width: d.x1 - d.x0, height: d.y1 - d.y0};\n    const newDimensions = {width: rootNode.x1 - rootNode.x0, height: rootNode.y1 - rootNode.y0};\n    const dimensionMultiplier = {width: newDimensions.width / oldDimensions.width, height: newDimensions.height / oldDimensions.height};\n\n    nodesMerge.each(d => {\n        const x0 = (d.x0 - oldDimensions.x) * dimensionMultiplier.width;\n        const y0 = (d.y0 - oldDimensions.y) * dimensionMultiplier.height;\n        const width = calcWidth(d) * dimensionMultiplier.width;\n        const height = calcHeight(d) * dimensionMultiplier.height;\n        const visible = includesAllCrossValues(d, crossValues) && d.data.name != crossValues[treemapLevel - 1];\n\n        d.mapLevel[treemapLevel] = {\n            x0,\n            x1: width + x0,\n            y0,\n            y1: height + y0,\n            visible,\n            opacity: visible ? 1 : 0\n        };\n    });\n    d.mapLevel[treemapLevel].levelRoot = true;\n}\n\nfunction recalculateVisibleSubTreeCoordinates(subTreeRoot, treeRootWidth, treeRootHeight, treemapLevel) {\n    const treemapBlueprinter = treemapLayout(treeRootWidth, treeRootHeight);\n    const treemapBlueprint = treemapBlueprinter(hierarchy(subTreeRoot.data).sum(d => d.size));\n\n    const dummiedDescendants = treemapBlueprint.descendants();\n    const descendants = subTreeRoot.descendants();\n\n    dummiedDescendants.forEach((_, i) => {\n        descendants[i].mapLevel[treemapLevel].x0 = dummiedDescendants[i].x0;\n        descendants[i].mapLevel[treemapLevel].x1 = dummiedDescendants[i].x1;\n        descendants[i].mapLevel[treemapLevel].y0 = dummiedDescendants[i].y0;\n        descendants[i].mapLevel[treemapLevel].y1 = dummiedDescendants[i].y1;\n    });\n}\n\nfunction calculateTextOpacities(nodesMerge, treemapLevel) {\n    nodesMerge.selectAll(\"text\").each((_, i, nodes) => {\n        const text = select(nodes[i]);\n        const d = select(nodes[i]).datum();\n        const textVis = text.attr(\"class\");\n        d.mapLevel[treemapLevel].textLockedAt = {opacity: textOpacity[textVis]};\n    });\n}\n"],"file":"treemapLevelCalculation.js"}