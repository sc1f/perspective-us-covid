{"version":3,"sources":["../../../src/js/series/seriesRange.js"],"names":["d3","domain","seriesLinearRange","settings","data","valueName","customExtent","scaleLinear","getExtent","seriesColorRange","extent","gradient","colorStyles","full","positive","negative","maxVal","Math","max","interpolator","multiInterpolator","scaleSequential","pad","gradientPairs","interpolators","slice","map","p","i","interpolate","value","index","findIndex","length","value1","value2"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\nimport * as d3 from \"d3\";\r\nimport {domain} from \"../axis/linearAxis\";\r\n\r\nexport function seriesLinearRange(settings, data, valueName, customExtent) {\r\n    return d3.scaleLinear().domain(getExtent(data, valueName, customExtent));\r\n}\r\n\r\nexport function seriesColorRange(settings, data, valueName, customExtent) {\r\n    let extent = getExtent(data, valueName, customExtent);\r\n    let gradient = settings.colorStyles.gradient.full;\r\n\r\n    if (extent[0] >= 0) {\r\n        gradient = settings.colorStyles.gradient.positive;\r\n    } else if (extent[1] <= 0) {\r\n        gradient = settings.colorStyles.gradient.negative;\r\n    } else {\r\n        const maxVal = Math.max(-extent[0], extent[1]);\r\n        extent = [-maxVal, maxVal];\r\n    }\r\n\r\n    const interpolator = multiInterpolator(gradient);\r\n    return d3.scaleSequential(interpolator).domain(extent);\r\n}\r\n\r\nconst getExtent = (data, valueName, customExtent) => {\r\n    return (\r\n        customExtent ||\r\n        domain()\r\n            .valueName(valueName)\r\n            .pad([0, 0])(data)\r\n    );\r\n};\r\n\r\nconst multiInterpolator = gradientPairs => {\r\n    // A new interpolator that calls through to a set of\r\n    // interpolators between each value/color pair\r\n    const interpolators = gradientPairs.slice(1).map((p, i) => d3.interpolate(gradientPairs[i][1], p[1]));\r\n    return value => {\r\n        const index = gradientPairs.findIndex((p, i) => i < gradientPairs.length - 1 && value <= gradientPairs[i + 1][0] && value > p[0]);\r\n        if (index === -1) {\r\n            if (value <= gradientPairs[0][0]) {\r\n                return gradientPairs[0][1];\r\n            }\r\n            return gradientPairs[gradientPairs.length - 1][1];\r\n        }\r\n\r\n        const interpolator = interpolators[index];\r\n        const [value1] = gradientPairs[index];\r\n        const [value2] = gradientPairs[index + 1];\r\n\r\n        return interpolator((value - value1) / (value2 - value1));\r\n    };\r\n};\r\n"],"file":"seriesRange.js"}