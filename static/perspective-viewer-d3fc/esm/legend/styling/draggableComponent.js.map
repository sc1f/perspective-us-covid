{"version":3,"sources":["../../../../src/js/legend/styling/draggableComponent.js"],"names":["d3","getChartContainer","enforceContainerBoundaries","margin","resizeForDraggingEvent","draggableComponent","pinned","settings","draggable","element","node","style","cursor","legend","left","top","drag","on","offsets","event","dx","dy","offsetLeft","x","offsetTop","y","position","isNodeInTopRight","pinNodeToTopRight","unpinNodeFromTopRight","call","args","length","select","window","nodeRect","getBoundingClientRect","containerRect","fuzz","right"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as d3 from \"d3\";\nimport {getChartContainer} from \"../../plugin/root\";\nimport {enforceContainerBoundaries, margin} from \"./enforceContainerBoundaries\";\n\nconst resizeForDraggingEvent = \"resize.for-dragging\";\n\nexport function draggableComponent() {\n    let pinned = true;\n    let settings = null;\n\n    const draggable = element => {\n        const node = element.node();\n        node.style.cursor = \"move\";\n        if (settings.legend) {\n            node.style.left = settings.legend.left;\n            node.style.top = settings.legend.top;\n        }\n\n        const drag = d3.drag().on(\"drag\", function() {\n            const offsets = enforceContainerBoundaries(this, d3.event.dx, d3.event.dy);\n            this.style.left = `${this.offsetLeft + offsets.x}px`;\n            this.style.top = `${this.offsetTop + offsets.y}px`;\n            const position = {\n                left: this.style.left,\n                top: this.style.top\n            };\n            settings.legend = {...settings.legend, ...position};\n\n            if (isNodeInTopRight(node)) {\n                pinned = pinNodeToTopRight(node);\n                return;\n            }\n\n            pinned = unpinNodeFromTopRight(node, pinned);\n        });\n\n        element.call(drag);\n    };\n\n    draggable.settings = (...args) => {\n        if (!args.length) {\n            return settings;\n        }\n        settings = args[0];\n        return draggable;\n    };\n\n    return draggable;\n}\n\nfunction unpinNodeFromTopRight(node, pinned) {\n    if (pinned !== false) {\n        // Default behaviour for the legend is to remain pinned to the top right\n        // hand corner with a specific margin. Once the legend has moved we\n        // cannot continue to use that css based approach.\n        d3.select(window).on(resizeForDraggingEvent, function() {\n            const offsets = enforceContainerBoundaries(node, 0, 0);\n            node.style.left = `${node.offsetLeft + offsets.x}px`;\n            node.style.top = `${node.offsetTop + offsets.y}px`;\n        });\n    }\n    return false;\n}\n\nfunction pinNodeToTopRight(node) {\n    d3.select(window).on(resizeForDraggingEvent, null);\n    node.style.left = \"auto\";\n    return true;\n}\n\nfunction isNodeInTopRight(node) {\n    const nodeRect = node.getBoundingClientRect();\n    const containerRect = d3\n        .select(getChartContainer(node))\n        .node()\n        .getBoundingClientRect();\n\n    const fuzz = 5;\n\n    return nodeRect.right + margin + fuzz >= containerRect.right && nodeRect.top - margin - fuzz <= containerRect.top;\n}\n"],"file":"draggableComponent.js"}