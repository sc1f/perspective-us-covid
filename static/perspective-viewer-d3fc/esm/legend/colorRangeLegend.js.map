{"version":3,"sources":["../../../src/js/legend/colorRangeLegend.js"],"names":["d3","fc","getOrCreateElement","valueformatter","colorRangeLegend","scale","legend","container","legendSelection","append","attr","style","width","height","node","getBoundingClientRect","xScale","scaleBand","domain","range","copy","nice","paddedDomain","extentLinear","pad","padUnit","min","max","expandedDomain","yScale","scaleLinear","svgBar","autoBandwidth","seriesSvgBar","crossValue","baseValue","_","i","mainValue","d","decorate","selection","selectAll","middle","Math","round","tickValues","axisLabel","axisRight","tickSizeOuter","tickFormat","legendSvg","legendBar","datum","call","barWidth","abs","getBBox","x","select","args","length"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport * as d3 from \"d3\";\nimport * as fc from \"d3fc\";\nimport {getOrCreateElement} from \"../utils/utils\";\nimport valueformatter from \"../axis/valueFormatter\";\n\nexport function colorRangeLegend() {\n    let scale = null;\n\n    function legend(container) {\n        const legendSelection = getOrCreateElement(container, \"div.legend-container\", () =>\n            container\n                .append(\"div\")\n                .attr(\"class\", \"legend-container legend-color\")\n                .style(\"z-index\", \"2\")\n        );\n        const {width, height} = legendSelection.node().getBoundingClientRect();\n\n        const xScale = d3\n            .scaleBand()\n            .domain([0, 1])\n            .range([0, width]);\n\n        const domain = scale\n            .copy()\n            .nice()\n            .domain();\n        const paddedDomain = fc\n            .extentLinear()\n            .pad([0.1, 0.1])\n            .padUnit(\"percent\")(domain);\n        const [min, max] = paddedDomain;\n        const expandedDomain = d3.range(min, max, (max - min) / height);\n\n        const yScale = d3\n            .scaleLinear()\n            .domain(paddedDomain)\n            .range([height, 0]);\n\n        const svgBar = fc\n            .autoBandwidth(fc.seriesSvgBar())\n            .xScale(xScale)\n            .yScale(yScale)\n            .crossValue(0)\n            .baseValue((_, i) => (i > 0 ? expandedDomain[i - 1] : 0))\n            .mainValue(d => d)\n            .decorate(selection => {\n                selection.selectAll(\"path\").style(\"fill\", d => scale(d));\n            });\n\n        const middle = domain[0] < 0 && domain[1] > 0 ? 0 : Math.round((domain[1] + domain[0]) / 2);\n        const tickValues = [...domain, middle];\n\n        const axisLabel = fc\n            .axisRight(yScale)\n            .tickValues(tickValues)\n            .tickSizeOuter(0)\n            .tickFormat(d => valueformatter(d));\n\n        const legendSvg = getOrCreateElement(legendSelection, \"svg\", () => legendSelection.append(\"svg\"))\n            .style(\"width\", width)\n            .style(\"height\", height);\n        const legendBar = getOrCreateElement(legendSvg, \"g\", () => legendSvg.append(\"g\"))\n            .datum(expandedDomain)\n            .call(svgBar);\n\n        const barWidth = Math.abs(legendBar.node().getBBox().x);\n        getOrCreateElement(legendSvg, \"#legend-axis\", () => legendSvg.append(\"g\").attr(\"id\", \"legend-axis\"))\n            .attr(\"transform\", `translate(${barWidth})`)\n            .datum(expandedDomain)\n            .call(axisLabel)\n            .select(\".domain\")\n            .attr(\"visibility\", \"hidden\");\n    }\n\n    legend.scale = (...args) => {\n        if (!args.length) {\n            return scale;\n        }\n        scale = args[0];\n        return legend;\n    };\n\n    return legend;\n}\n"],"file":"colorRangeLegend.js"}