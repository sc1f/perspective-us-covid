{"version":3,"sources":["../../../src/js/data/groupData.js"],"names":["labelFunction","splitIntoMultiSeries","groupData","settings","data","stack","groupedSeries","map","groupPointDataByMainValue","mainValues","length","flattenedSeries","reduce","a","b","concat","groupAndStackData","seriesDataFn","labelfn","mainValue","baseValue","col","name","series","i","crossValue","key","__KEY__","row","seriesFn"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport {labelFunction} from \"../axis/axisLabel\";\nimport {splitIntoMultiSeries} from \"./splitIntoMultiSeries\";\n\nexport function groupData(settings, data) {\n    const stack = {stack: false};\n    const groupedSeries = splitIntoMultiSeries(settings, data, stack).map(data => groupPointDataByMainValue(settings, data, stack));\n\n    if (settings.mainValues.length > 1) {\n        const flattenedSeries = groupedSeries.reduce((a, b) => a.concat(b));\n        return flattenedSeries;\n    }\n\n    return groupedSeries;\n}\n\nexport function groupAndStackData(settings, data) {\n    const stack = {stack: true};\n    return splitIntoMultiSeries(settings, data, stack).map(data => groupPointDataByMainValue(settings, data, stack));\n}\n\nfunction seriesDataFn(settings, data, {stack = false}) {\n    const labelfn = labelFunction(settings);\n\n    return mainValue => {\n        const baseValue = col => (stack ? col[`__BASE_VALUE__${mainValue.name}`] || 0 : 0);\n        const series = data.map((col, i) => ({\n            crossValue: labelfn(col, i),\n            mainValue: !!col[mainValue.name] ? col[mainValue.name] : null,\n            baseValue: baseValue(col),\n            key: col.__KEY__ ? `${col.__KEY__}|${mainValue.name}` : mainValue.name,\n            row: col.row || col\n        }));\n        series.key = series[0].key;\n        return series;\n    };\n}\n\nfunction groupPointDataByMainValue(settings, data, {stack = false}) {\n    // Split data into a group for each aggregate (mainValue)\n    const seriesFn = seriesDataFn(settings, data, {stack});\n\n    if (settings.mainValues.length > 1) {\n        return settings.mainValues.map(seriesFn);\n    } else {\n        return seriesFn(settings.mainValues[0]);\n    }\n}\n"],"file":"groupData.js"}