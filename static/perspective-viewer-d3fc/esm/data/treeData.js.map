{"version":3,"sources":["../../../src/js/data/treeData.js"],"names":["d3","treeData","settings","sets","real_aggs","realValues","map","x","mainValues","find","y","name","data","forEach","d","groups","__ROW_PATH__","splits","getSplitNames","split","currentLevel","group","i","element","e","children","push","length","colorValue","getDataValue","color","tooltip","slice","crossValues","size","Object","entries","set","tree","root","hierarchy","sum","chartData","partition","Math","PI","height","each","current","value","concat","filter","crossValue","ancestors","reverse","cross","join","key","extents","getExtents","aggregate","min","max","keys","splitValue","includes"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as d3 from \"d3\";\n\nexport function treeData(settings) {\n    const sets = {};\n    const real_aggs = settings.realValues.map(x => (x === null ? null : settings.mainValues.find(y => y.name === x)));\n    settings.data.forEach(d => {\n        const groups = d.__ROW_PATH__;\n        const splits = getSplitNames(d);\n        splits.forEach(split => {\n            let currentLevel;\n            if (!sets[split]) {\n                sets[split] = [];\n            }\n            currentLevel = sets[split];\n            groups.forEach((group, i) => {\n                let element = currentLevel.find(e => e.name === group);\n                if (!element) {\n                    element = {name: group, children: []};\n                    currentLevel.push(element);\n                }\n                if (settings.realValues.length > 1 && settings.realValues[1] !== null) {\n                    const colorValue = getDataValue(d, settings.mainValues[1], split);\n                    element.color = element.color ? element.color + colorValue : colorValue;\n                }\n                if (settings.realValues.length > 2 && settings.realValues[2] !== null) {\n                    element.tooltip = [];\n                    for (let i = 2; i < settings.realValues.length; ++i) {\n                        element.tooltip.push(getDataValue(d, real_aggs[i], split));\n                    }\n                }\n                if (i === groups.length - 1) {\n                    element.name = groups.slice(-1)[0];\n                    if (groups.length === settings.crossValues.length) {\n                        const size = getDataValue(d, settings.mainValues[0], split);\n                        element.size = size > 0 ? size : 0;\n                    }\n                }\n                currentLevel = element.children;\n            });\n        });\n    });\n\n    const data = Object.entries(sets).map(set => {\n        const tree = {name: \"root\", children: set[1]};\n        const root = d3.hierarchy(tree).sum(d => d.size);\n        const chartData = d3.partition().size([2 * Math.PI, root.height + 1])(root);\n        chartData.each(d => {\n            d.current = d;\n            d.mainValues =\n                settings.realValues.length === 1 || (settings.realValues[1] === null && settings.realValues[2] === null)\n                    ? d.value\n                    : [d.value, d.data.color].concat(d.data.tooltip || []).filter(x => x !== null);\n            d.crossValue = d\n                .ancestors()\n                .slice(0, -1)\n                .reverse()\n                .map(cross => cross.data.name)\n                .join(\"|\");\n            d.key = set[0];\n        });\n\n        return {split: set[0], data: chartData, extents: getExtents(settings, set)};\n    });\n\n    return data;\n}\n\nexport const getDataValue = (d, aggregate, split) => (split.length ? d[`${split}|${aggregate.name}`] : d[aggregate.name]);\n\nfunction getExtents(settings, [split, data]) {\n    if (settings.realValues.length > 1 && settings.realValues[1] !== null) {\n        const min = Math.min(...settings.data.map(d => getDataValue(d, settings.mainValues[1], split)));\n        const max = Math.max(...data.map(d => d.color));\n        return [min, max];\n    }\n}\n\nfunction getSplitNames(d) {\n    const splits = [];\n    Object.keys(d).forEach(key => {\n        if (key !== \"__ROW_PATH__\") {\n            const splitValue = key\n                .split(\"|\")\n                .slice(0, -1)\n                .join(\"|\");\n            if (!splits.includes(splitValue)) {\n                splits.push(splitValue);\n            }\n        }\n    });\n    return splits;\n}\n"],"file":"treeData.js"}