{"version":3,"sources":["../../../src/js/axis/axisSplitter.js"],"names":["splitterLabels","axisSplitter","settings","sourceData","splitFn","dataSplitFunction","color","data","altData","splitMainValues","altValue","name","split","includes","length","haveSplit","some","m","key","splitter","selection","labelsInfo","map","v","i","index","mainLabels","filter","altLabels","labeller","select","call","labels","alt","args","isIncludedFn","d","dataBlankFunction","series","Object","assign","mainValue","groupedBlankFunction","group"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\nimport {splitterLabels} from \"./splitterLabels\";\r\n\r\nexport const axisSplitter = (settings, sourceData, splitFn = dataSplitFunction) => {\r\n    let color;\r\n    let data;\r\n    let altData;\r\n\r\n    // splitMainValues is an array of main-value names to put into the alt-axis\r\n    const splitMainValues = settings.splitMainValues || [];\r\n    const altValue = name => {\r\n        const split = name.split(\"|\");\r\n        return splitMainValues.includes(split[split.length - 1]);\r\n    };\r\n\r\n    const haveSplit = settings[\"mainValues\"].some(m => altValue(m.name));\r\n\r\n    // Split the data into main and alt displays\r\n    data = haveSplit ? splitFn(sourceData, key => !altValue(key)) : sourceData;\r\n    altData = haveSplit ? splitFn(sourceData, altValue) : null;\r\n\r\n    // Renderer to show the special controls for moving between axes\r\n    const splitter = selection => {\r\n        if (settings[\"mainValues\"].length === 1) return;\r\n\r\n        const labelsInfo = settings[\"mainValues\"].map((v, i) => ({\r\n            index: i,\r\n            name: v.name\r\n        }));\r\n        const mainLabels = labelsInfo.filter(v => !altValue(v.name));\r\n        const altLabels = labelsInfo.filter(v => altValue(v.name));\r\n\r\n        const labeller = () => splitterLabels(settings).color(color);\r\n\r\n        selection.select(\".y-label-container>.y-label\").call(labeller().labels(mainLabels));\r\n        selection.select(\".y2-label-container>.y-label\").call(\r\n            labeller()\r\n                .labels(altLabels)\r\n                .alt(true)\r\n        );\r\n    };\r\n\r\n    splitter.color = (...args) => {\r\n        if (!args.length) {\r\n            return color;\r\n        }\r\n        color = args[0];\r\n        return splitter;\r\n    };\r\n\r\n    splitter.haveSplit = () => haveSplit;\r\n\r\n    splitter.data = (...args) => {\r\n        if (!args.length) {\r\n            return data;\r\n        }\r\n        data = args[0];\r\n        return splitter;\r\n    };\r\n    splitter.altData = (...args) => {\r\n        if (!args.length) {\r\n            return altData;\r\n        }\r\n        altData = args[0];\r\n        return splitter;\r\n    };\r\n\r\n    return splitter;\r\n};\r\n\r\nexport const dataSplitFunction = (sourceData, isIncludedFn) => {\r\n    return sourceData.map(d => d.filter(v => isIncludedFn(v.key)));\r\n};\r\n\r\nexport const dataBlankFunction = (sourceData, isIncludedFn) => {\r\n    return sourceData.map(series => {\r\n        if (!isIncludedFn(series.key)) {\r\n            // Blank this data\r\n            return series.map(v => Object.assign({}, v, {mainValue: null}));\r\n        }\r\n        return series;\r\n    });\r\n};\r\n\r\nexport const groupedBlankFunction = (sourceData, isIncludedFn) => {\r\n    return sourceData.map(group => dataBlankFunction(group, isIncludedFn));\r\n};\r\n"],"file":"axisSplitter.js"}