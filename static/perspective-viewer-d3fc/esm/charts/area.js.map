{"version":3,"sources":["../../../src/js/charts/area.js"],"names":["fc","axisFactory","chartSvgFactory","axisSplitter","AXIS_TYPES","areaSeries","seriesColors","splitAndBaseData","colorLegend","filterData","withGridLines","hardLimitZeroPadding","zoomableChart","nearbyTip","areaChart","container","settings","data","color","legend","scale","series","seriesSvgRepeat","orient","xAxis","excludeType","linear","settingName","valueName","yAxisFactory","ordinal","include","paddingStrategy","splitter","yAxis1","plotSeries","haveSplit","chart","plotArea","yNice","zoomChart","xScale","toolTip","yScale","yAxis2","altData","altAxis","altDataWithScale","datum","call","plugin","type","name","max_cells","max_columns"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\nimport * as fc from \"d3fc\";\r\nimport {axisFactory} from \"../axis/axisFactory\";\r\nimport {chartSvgFactory} from \"../axis/chartFactory\";\r\nimport {axisSplitter} from \"../axis/axisSplitter\";\r\nimport {AXIS_TYPES} from \"../axis/axisType\";\r\nimport {areaSeries} from \"../series/areaSeries\";\r\nimport {seriesColors} from \"../series/seriesColors\";\r\nimport {splitAndBaseData} from \"../data/splitAndBaseData\";\r\nimport {colorLegend} from \"../legend/legend\";\r\nimport {filterData} from \"../legend/filter\";\r\nimport withGridLines from \"../gridlines/gridlines\";\r\n\r\nimport {hardLimitZeroPadding} from \"../d3fc/padding/hardLimitZero\";\r\nimport zoomableChart from \"../zoom/zoomableChart\";\r\nimport nearbyTip from \"../tooltip/nearbyTip\";\r\n\r\nfunction areaChart(container, settings) {\r\n    const data = splitAndBaseData(settings, filterData(settings));\r\n\r\n    const color = seriesColors(settings);\r\n    const legend = colorLegend()\r\n        .settings(settings)\r\n        .scale(color);\r\n\r\n    const series = fc.seriesSvgRepeat().series(areaSeries(settings, color).orient(\"vertical\"));\r\n\r\n    const xAxis = axisFactory(settings)\r\n        .excludeType(AXIS_TYPES.linear)\r\n        .settingName(\"crossValues\")\r\n        .valueName(\"crossValue\")(data);\r\n    const yAxisFactory = axisFactory(settings)\r\n        .settingName(\"mainValues\")\r\n        .valueName(\"mainValue\")\r\n        .excludeType(AXIS_TYPES.ordinal)\r\n        .orient(\"vertical\")\r\n        .include([0])\r\n        .paddingStrategy(hardLimitZeroPadding());\r\n\r\n    // Check whether we've split some values into a second y-axis\r\n    const splitter = axisSplitter(settings, data).color(color);\r\n\r\n    const yAxis1 = yAxisFactory(splitter.data());\r\n\r\n    // No grid lines if splitting y-axis\r\n    const plotSeries = splitter.haveSplit() ? series : withGridLines(series, settings).orient(\"vertical\");\r\n\r\n    const chart = chartSvgFactory(xAxis, yAxis1)\r\n        .axisSplitter(splitter)\r\n        .plotArea(plotSeries);\r\n\r\n    chart.yNice && chart.yNice();\r\n\r\n    const zoomChart = zoomableChart()\r\n        .chart(chart)\r\n        .settings(settings)\r\n        .xScale(xAxis.scale);\r\n\r\n    const toolTip = nearbyTip()\r\n        .settings(settings)\r\n        .xScale(xAxis.scale)\r\n        .yScale(yAxis1.scale)\r\n        .color(color)\r\n        .data(data);\r\n\r\n    if (splitter.haveSplit()) {\r\n        // Create the y-axis data for the alt-axis\r\n        const yAxis2 = yAxisFactory(splitter.altData());\r\n        chart.altAxis(yAxis2);\r\n        // Give the tooltip the information (i.e. 2 datasets with different\r\n        // scales)\r\n        toolTip.data(splitter.data()).altDataWithScale({yScale: yAxis2.scale, data: splitter.altData()});\r\n    }\r\n\r\n    // render\r\n    container.datum(splitter.data()).call(zoomChart);\r\n    container.call(toolTip);\r\n    container.call(legend);\r\n}\r\nareaChart.plugin = {\r\n    type: \"d3_y_area\",\r\n    name: \"Y Area Chart\",\r\n    max_cells: 4000,\r\n    max_columns: 50\r\n};\r\n\r\nexport default areaChart;\r\n"],"file":"area.js"}