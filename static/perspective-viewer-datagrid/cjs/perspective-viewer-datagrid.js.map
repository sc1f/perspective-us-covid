{"version":3,"sources":["webpack:///packages/perspective-viewer-datagrid/webpack/universalModuleDefinition","webpack:///packages/perspective-viewer-datagrid/webpack/bootstrap","webpack:///packages/perspective-viewer-datagrid/external \"core-js/modules/web.dom-collections.iterator\"","webpack:///packages/perspective-viewer-datagrid/external \"lodash/isEqual\"","webpack:///packages/perspective-viewer-datagrid/external \"@finos/perspective-viewer/dist/esm/utils.js\"","webpack:///packages/perspective-viewer-datagrid/dist/less/material.less","webpack:///packages/perspective-viewer-datagrid/external \"@finos/perspective/dist/esm/config\"","webpack:///packages/perspective-viewer-datagrid/external \"core-js/modules/es.array.unscopables.flat\"","webpack:///node_modules/css-loader/lib/css-base.js","webpack:///packages/perspective-viewer-datagrid/dist/less/container.less","webpack:///src/js/constants.js","webpack:///src/js/utils.js","webpack:///src/js/tree_row_header.js","webpack:///src/js/view_model.js","webpack:///src/js/thead.js","webpack:///src/js/tbody.js","webpack:///src/js/table.js","webpack:///src/js/scroll_panel.js","webpack:///src/js/events.js","webpack:///src/js/index.js","webpack:///src/js/datagrid.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","push","useSourceMap","list","toString","this","map","item","content","cssMapping","btoa","sourceMapping","sourceMap","unescape","encodeURIComponent","JSON","stringify","sourceURLs","sources","source","sourceRoot","concat","join","cssWithMappingToString","mediaQuery","alreadyImportedModules","length","id","VIEWER_MAP","WeakMap","METADATA_MAP","DEBUG","ICON_MAP","asc","desc","LOG","log_fps","avg","reduce","x","y","rfps","vfps","nframes","console","log","toFixed","memoize","_target","_property","descriptor","cache","Map","func","arg","has","res","set","column_path_2_type","schema","column","parts","split","html","strings","args","str","flat","filter","a","_tree_header_classes","type","is_leaf","cls","_format_class","header_classes","tree_header","td","path","types","is_open","tree_levels","tree_button","_tree_header_levels","header_text","_format_text","classList","add","innerHTML","ViewModel","constructor","column_sizes","container","table","_column_sizes","_container","cells","rows","num_rows","_set_metadata","metadata","_get_or_create_metadata","config","get_type_config","real_type","format_function","float","Intl","NumberFormat","integer","datetime","DateTimeFormat","date","format","_format","Array","isArray","fmt","textContent","_get_cell","tag","row_container","cidx","tr","document","createElement","appendChild","_get_row","ridx","_clean_columns","idx","children","removeChild","slice","_clean_rows","DatagridHeaderViewModel","_draw_group_th","offset_cache","sort_dir","th","className","removeAttribute","style","minWidth","sort_txt","icon","_redraw_previous","_draw_group","column_name","column_path","column_type","is_column_header","_draw_th","size_key","auto_width","auto","override_width","override","toggle","maxWidth","remove","get_column_header","draw","alias","header_levels","column_pivots","is_new_group","_offset_cache","_group_header_cache","setAttribute","vcidx","sort","group_meta","clean","DatagridBodyViewModel","_draw_td","val","selected_id","depth","ridx_offset","cidx_offset","is_selected","isEqual","is_sub_selected","formatter","row_path","container_height","column_state","view_state","column_data","id_column","row_height","next","obj","offsetHeight","DatagridTableViewModel","table_clip","element","thead","tbody","header","body","fragment","createDocumentFragment","num_columns","Math","max","autosize_cells","last_cells","cell","shift","offsetWidth","indices","is_override","container_size","view_cache","preserve_width","viewport","width","container_width","height","view","column_paths","table_schema","visible_columns","start_col","columns_data","to_columns","start_row","row_pivots","viewport_width","cont_body","cont_head","missing_cidx","end_col","new_col","undefined","DatagridVirtualTableViewModel","super","create_shadow_dom","attachShadow","slot","shadowRoot","CONTAINER_STYLE","MATERIAL_STYLE","_virtual_scrolling_disabled","stick_container","scroll_container","virtual_panel","table_staging","_sticky_container","_table_clip","_table_staging","_scroll_container","_virtual_panel","_calculate_viewport","nrows","reset_scroll_position","_view_cache","end_row","_calculate_row_range","_calculate_column_range","_nrows","_container_size","total_scroll_height","percent_scroll","scrollTop","virtual_panel_row_height","floor","relative_nrows","scroll_rows","round","total_scroll_width","percent_left","scrollLeft","max_scroll_column","_max_scroll_column","table_model","psp_offset","min","_validate_viewport","invalid_column","_start_col","invalid_row","_start_row","_end_row","_end_col","_needs_swap","_invalid_schema","_swap_in","parentElement","replaceChild","cloneNode","_render_element","dispatchEvent","CustomEvent","bubbles","detail","_swap_out","_update_virtual_panel_width","invalid_schema","virtual_width","panel_width","_update_virtual_panel_height","virtual_panel_px_size","infer_options","assign","old_config","options","__debug_start_time__","performance","now","invalid_viewport","reset_scroll","Infinity","swap_args","_selected_id","throttlePromise","DatagridViewEventModel","register_listeners","addEventListener","_on_scroll","passive","_on_mousewheel","_on_click","_on_dblclick","event","stopPropagation","returnValue","preventDefault","deltaY","deltaX","target","tagName","contains","is_resize","Promise","setTimeout","row","button","is_button","_on_toggle","_on_resize_column","_on_sort","_on_select","start","pageX","move","_on_resize_column_move","up","async","removeEventListener","diff","hasAttribute","is_deselect","filters","row_idx","col_idx","to_json","row_pivots_values","__ROW_PATH__","row_filters","pivot","index","pivot_value","column_index","keys","result","column_filters","column_pivot_values","column_names","getCellConfig","composed","selected","shiftKey","set_depth","collapse","expand","current_idx","findIndex","new_sort","_increment_sort","altKey","DatagridPlugin","div","datagrid","e","set_element","isConnected","clear","get_or_create_datagrid","set_view","_datavis","reset_size","customElements","get_meta","get_tds","get_ths","reset_viewport","get_config","registerPlugin","setInterval","head","_register_global_styles"],"mappings":"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","file":"perspective-viewer-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"core-js/modules/web.dom-collections.iterator\"), require(\"lodash/isEqual\"), require(\"@finos/perspective-viewer/dist/esm/utils.js\"), require(\"@finos/perspective/dist/esm/config\"), require(\"core-js/modules/es.array.unscopables.flat\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"core-js/modules/web.dom-collections.iterator\", \"lodash/isEqual\", \"@finos/perspective-viewer/dist/esm/utils.js\", \"@finos/perspective/dist/esm/config\", \"core-js/modules/es.array.unscopables.flat\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"perspective-viewer-datagrid\"] = factory(require(\"core-js/modules/web.dom-collections.iterator\"), require(\"lodash/isEqual\"), require(\"@finos/perspective-viewer/dist/esm/utils.js\"), require(\"@finos/perspective/dist/esm/config\"), require(\"core-js/modules/es.array.unscopables.flat\"));\n\telse\n\t\troot[\"perspective-viewer-datagrid\"] = factory(root[\"core-js/modules/web.dom-collections.iterator\"], root[\"lodash/isEqual\"], root[\"@finos/perspective-viewer/dist/esm/utils.js\"], root[\"@finos/perspective/dist/esm/config\"], root[\"core-js/modules/es.array.unscopables.flat\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__4__, __WEBPACK_EXTERNAL_MODULE__5__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"perspective-viewer>div{position:absolute;overflow:hidden;top:12px;left:12px;right:12px;bottom:12px}:host th,perspective-viewer th{text-align:center;position:relative}:host thead tr:not(:last-child) th,perspective-viewer thead tr:not(:last-child) th{overflow:hidden;max-width:0}:host tbody .pd-float,:host thead tr:last-child .pd-float,perspective-viewer tbody .pd-float,perspective-viewer thead tr:last-child .pd-float{text-align:right}:host tbody .pd-integer,:host thead .pd-integer,perspective-viewer tbody .pd-integer,perspective-viewer thead .pd-integer{text-align:right}:host .pd-positive,perspective-viewer .pd-positive{color:#1078d1}:host .pd-negative,perspective-viewer .pd-negative{color:#de3838}:host span.pd-tree-container,perspective-viewer span.pd-tree-container{display:flex;align-items:center;height:100%}:host tbody .pd-date,:host tbody .pd-datetime,:host tbody .pd-string,:host thead .pd-date,:host thead .pd-datetime,:host thead .pd-string,perspective-viewer tbody .pd-date,perspective-viewer tbody .pd-datetime,perspective-viewer tbody .pd-string,perspective-viewer thead .pd-date,perspective-viewer thead .pd-datetime,perspective-viewer thead .pd-string{text-align:left}:host tr td.pd-group-header,:host tr th,perspective-viewer tr td.pd-group-header,perspective-viewer tr th{border-right:1px solid #ddd}:host tr th:last-child,:host tr:last-child th:not(.pd-group-header),perspective-viewer tr th:last-child,perspective-viewer tr:last-child th:not(.pd-group-header){border-right:none}:host tr:last-child th,perspective-viewer tr:last-child th{border-bottom:1px solid #ddd}:host tr td span.pd-tree-group,perspective-viewer tr td span.pd-tree-group{margin-left:5px;margin-right:15px;border-left:1px solid #eee;height:100%}:host td,:host th,perspective-viewer td,perspective-viewer th{white-space:nowrap;font-size:12px;height:19px;padding:0 5px}:host tbody,perspective-viewer tbody{transition:opacity .2s ease-in}:host tbody:hover tr:hover td,perspective-viewer tbody:hover tr:hover td{background:#eee;opacity:1}:host table tr:hover,perspective-viewer table tr:hover{color:#333}:host tr,perspective-viewer tr{transition:background-color .2s ease-in,color .2s ease-in}:host table *,perspective-viewer table *{box-sizing:border-box}:host table,perspective-viewer table{position:absolute;overflow:hidden;color:#666}:host span.pd-row-header-icon,perspective-viewer span.pd-row-header-icon{color:#aaa;padding-right:4px;font-family:\\\"Material Icons\\\"}:host span.pd-column-header-icon,perspective-viewer span.pd-column-header-icon{font-size:10px;padding-left:3px;display:inline-block;width:10px;font-family:\\\"Material Icons\\\"}:host span.pd-row-header-icon:hover,perspective-viewer span.pd-row-header-icon:hover{color:#1a7da1;text-shadow:0 0 3px #1a7da1}:host .pd-selected td,perspective-viewer .pd-selected td{background-color:#eee}:host .pd-cell-clip,perspective-viewer .pd-cell-clip{overflow:hidden;text-overflow:ellipsis}:host td span.pd-group-name,:host th span.pd-group-name,perspective-viewer td span.pd-group-name,perspective-viewer th span.pd-group-name{margin-right:-5px;padding-right:5px;padding-left:8px;flex:1;height:100%}:host td span.pd-group-leaf,perspective-viewer td span.pd-group-leaf{margin-left:12px;height:100%}:host .pd-column-resize,perspective-viewer .pd-column-resize{height:100%;width:10px;position:absolute;top:0;right:0;cursor:col-resize}\", \"\"]);\n\n// exports\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"div.pd-scroll-container{position:absolute;top:0;left:0;right:0;bottom:0;overflow:auto;-webkit-overflow-scrolling:auto}div.pd-virtual-panel{position:absolute;top:0;left:0;right:0;pointer-events:none}div.pd-scroll-table-clip{position:sticky;position:-webkit-sticky;top:0;left:0;overflow:hidden;width:100%;height:100%}div.pd-tree-container{display:flex;align-items:center;height:100%}slot{position:absolute;overflow:hidden}\", \"\"]);\n\n// exports\n","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n// Singleton `WeakMap`s to store metadata for td/th elements, as well as the\n// datagrids themselves for each `<perspective-viewer>`\nexport const VIEWER_MAP = new WeakMap();\nexport const METADATA_MAP = new WeakMap();\n\n// Output runtime debug info like FPS.\nexport const DEBUG = false;\n\n// Double buffer when the viewport scrolls columns, rows or when the\n// view is recreated.  Reduces render draw-in on some browsers, at the\n// expense of performance.\nexport const DOUBLE_BUFFER_COLUMN = false;\nexport const DOUBLE_BUFFER_ROW = false;\nexport const DOUBLE_BUFFER_RECREATE = true;\n\n// The largest size virtual <div> in (px) that Chrome can support without\n// glitching.\nexport const BROWSER_MAX_HEIGHT = 10000000;\n\n// Sort icons to use for Material UI.\n// TODO this should be CSS.\nexport const ICON_MAP = {\n    asc: \"arrow_upward\",\n    desc: \"arrow_downward\",\n    \"asc abs\": \"\\u21E7\",\n    \"desc abs\": \"\\u21E9\",\n    \"col asc\": \"arrow_back\",\n    \"col desc\": \"arrow_forward\",\n    \"col asc abs\": \"\\u21E8\",\n    \"col desc abs\": \"\\u21E6\"\n};\n","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {DEBUG} from \"./constants\";\n\n/******************************************************************************\n *\n * Events\n *\n */\n\nexport async function getCellConfig({view, config}, row_idx, col_idx) {\n    const row_pivots = config.row_pivots;\n    const column_pivots = config.column_pivots;\n    const start_row = row_idx >= 0 ? row_idx : 0;\n    const end_row = start_row + 1;\n    const r = await view.to_json({start_row, end_row});\n    const row_paths = r.map(x => x.__ROW_PATH__);\n    const row_pivots_values = row_paths[0] || [];\n    const row_filters = row_pivots\n        .map((pivot, index) => {\n            const pivot_value = row_pivots_values[index];\n            return pivot_value ? [pivot, \"==\", pivot_value] : undefined;\n        })\n        .filter(x => x);\n    const column_index = row_pivots.length > 0 ? col_idx + 1 : col_idx;\n    const column_paths = Object.keys(r[0])[column_index];\n    const result = {row: r[0]};\n    let column_filters = [];\n    if (column_paths) {\n        const column_pivot_values = column_paths.split(\"|\");\n        result.column_names = [column_pivot_values[column_pivot_values.length - 1]];\n        column_filters = column_pivots\n            .map((pivot, index) => {\n                const pivot_value = column_pivot_values[index];\n                return pivot_value ? [pivot, \"==\", pivot_value] : undefined;\n            })\n            .filter(x => x)\n            .filter(([, , value]) => value !== \"__ROW_PATH__\");\n    }\n\n    const filters = config.filter.concat(row_filters).concat(column_filters);\n    result.config = {filters};\n    return result;\n}\n\n/******************************************************************************\n *\n * Profling\n *\n */\n\nlet LOG = [];\n\nfunction log_fps() {\n    const avg = LOG.reduce((x, y) => x + y, 0) / LOG.length;\n    const rfps = LOG.length / 5;\n    const vfps = 1000 / avg;\n    const nframes = LOG.length;\n    console.log(`${avg.toFixed(2)} ms/frame   ${rfps} rfps   ${vfps.toFixed(2)} vfps   (${nframes} frames in 5s)`);\n    LOG = [];\n}\n\nexport function log_perf(x) {\n    LOG.push(x);\n}\n\nexport function _start_profiling_loop() {\n    if (DEBUG) {\n        setInterval(log_fps, 5000);\n    }\n}\n\n/******************************************************************************\n *\n * Utils\n *\n */\n\n/**\n * A class method decorate for memoizing method results.  Only works on one\n * arg.\n */\nexport function memoize(_target, _property, descriptor) {\n    const cache = new Map();\n    const func = descriptor.value;\n    descriptor.value = new_func;\n    return descriptor;\n    function new_func(arg) {\n        if (cache.has(arg)) {\n            return cache.get(arg);\n        } else {\n            const res = func.call(this, arg);\n            cache.set(arg, res);\n            return res;\n        }\n    }\n}\n\nexport function column_path_2_type(schema, column) {\n    let parts = column.split(\"|\");\n    return schema[parts[parts.length - 1]];\n}\n\n/**\n * Identical to a non-tagger template literal, this is only used to indicate to\n * babel that this string should be HTML-minified on production builds.\n */\nexport const html = (strings, ...args) =>\n    strings\n        .map((str, i) => [str, args[i]])\n        .flat()\n        .filter(a => !!a)\n        .join(\"\");\n","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {html} from \"./utils\";\n\nfunction _tree_header_classes(name, type, is_leaf) {\n    const cls = this._format_class(type)(name);\n    const header_classes = [\"pd-group-name\"];\n    if (is_leaf) {\n        header_classes.push(\"pd-group-leaf\");\n    }\n\n    if (cls) {\n        header_classes.push(cls);\n    }\n\n    return header_classes.join(\" \");\n}\n\nfunction _tree_header_levels(path, is_open, is_leaf) {\n    const tree_levels = path.map(() => `<span class=\"pd-tree-group\"></span>`);\n    if (!is_leaf) {\n        const group_icon = is_open ? \"remove\" : \"add\";\n        const tree_button = `<span class=\"pd-row-header-icon\">${group_icon}</span>`;\n        tree_levels.push(tree_button);\n    }\n\n    return tree_levels.join(\"\");\n}\n\nexport function tree_header(td, path, types, is_leaf, is_open) {\n    const type = types[path.length - 1];\n    const name = path.length === 0 ? \"TOTAL\" : path[path.length - 1];\n    const header_classes = _tree_header_classes.call(this, name, type, is_leaf);\n    const tree_levels = _tree_header_levels(path, is_open, is_leaf);\n    const header_text = this._format_text(type)(name);\n\n    td.classList.add(\"pd-group-header\");\n    td.innerHTML = html`\n        <span class=\"pd-tree-container\">\n            ${tree_levels}\n            <span class=\"${header_classes}\">${header_text}</span>\n        </span>\n    `;\n}\n","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {get_type_config} from \"@finos/perspective/dist/esm/config\";\nimport {METADATA_MAP} from \"./constants\";\nimport {memoize} from \"./utils\";\nimport {tree_header} from \"./tree_row_header\";\n\n/******************************************************************************\n *\n * View Model\n *\n */\n\nexport class ViewModel {\n    constructor(column_sizes, container, table) {\n        this._column_sizes = column_sizes;\n        this._container = container;\n        this.table = table;\n        this.cells = [];\n        this.rows = [];\n    }\n\n    num_rows() {\n        return this.cells.length;\n    }\n\n    _set_metadata(td, metadata) {\n        METADATA_MAP.set(td, metadata);\n    }\n\n    _get_or_create_metadata(td) {\n        if (METADATA_MAP.has(td)) {\n            return METADATA_MAP.get(td);\n        } else {\n            const metadata = {};\n            METADATA_MAP.set(td, metadata);\n            return metadata;\n        }\n    }\n\n    @memoize\n    _format_text(type) {\n        const config = get_type_config(type);\n        const real_type = config.type || type;\n        const format_function = {\n            float: Intl.NumberFormat,\n            integer: Intl.NumberFormat,\n            datetime: Intl.DateTimeFormat,\n            date: Intl.DateTimeFormat\n        }[real_type];\n        if (format_function) {\n            const func = new format_function(\"en-us\", config.format);\n            return path => func.format(path);\n        } else {\n            return path => path;\n        }\n    }\n\n    @memoize\n    _format_class(type) {\n        const config = get_type_config(type);\n        const real_type = config.type || type;\n        if (real_type === \"integer\" || real_type === \"float\") {\n            return path => {\n                if (path > 0) {\n                    return \"pd-positive\";\n                } else if (path < 0) {\n                    return \"pd-negative\";\n                }\n            };\n        } else {\n            return () => \"\";\n        }\n    }\n\n    @memoize\n    _format(type) {\n        if (Array.isArray(type)) {\n            return {format: tree_header.bind(this)};\n        }\n        const fmt = this._format_text(type);\n        const cls = this._format_class(type);\n        return {\n            format(td, path) {\n                td.textContent = fmt(path);\n                const c = cls(path);\n                if (c) {\n                    td.classList.add(c);\n                }\n            }\n        };\n    }\n\n    _get_cell(tag = \"td\", row_container, cidx, tr) {\n        let td = row_container[cidx];\n        if (!td) {\n            td = row_container[cidx] = document.createElement(tag);\n            tr.appendChild(td);\n        }\n        return td;\n    }\n\n    _get_row(ridx) {\n        let tr = this.rows[ridx];\n        if (!tr) {\n            tr = this.rows[ridx] = document.createElement(\"tr\");\n            this.table.appendChild(tr);\n        }\n\n        let row_container = this.cells[ridx];\n        if (!row_container) {\n            row_container = this.cells[ridx] = [];\n        }\n\n        return {tr, row_container};\n    }\n\n    _clean_columns(cidx) {\n        for (let i = 0; i < this.rows.length; i++) {\n            const tr = this.rows[i];\n            const row_container = this.cells[i];\n            let idx = cidx[i] || cidx;\n            while (tr.children[idx]) {\n                tr.removeChild(tr.children[idx]);\n            }\n            this.cells[i] = row_container.slice(0, idx);\n        }\n    }\n\n    _clean_rows(ridx) {\n        while (this.table.children[ridx]) {\n            this.table.removeChild(this.table.children[ridx]);\n        }\n        this.rows = this.rows.slice(0, ridx);\n        this.cells = this.cells.slice(0, ridx);\n    }\n}\n","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {ViewModel} from \"./view_model\";\nimport {ICON_MAP} from \"./constants\";\nimport {html} from \"./utils.js\";\n\n/**\n * <thead> view model.  This model accumulates state in the form of\n * column_sizes, which leverages <tables> autosize behavior across\n * virtual pages.\n *\n * @class DatagridHeaderViewModel\n */\nexport class DatagridHeaderViewModel extends ViewModel {\n    _draw_group_th(offset_cache, d, column, sort_dir) {\n        const {tr, row_container} = this._get_row(d);\n        const th = this._get_cell(\"th\", row_container, offset_cache[d], tr);\n        offset_cache[d] += 1;\n        th.className = \"\";\n        th.removeAttribute(\"colspan\");\n        th.style.minWidth = \"0\";\n        if (sort_dir?.length === 0) {\n            th.innerHTML = html`\n                <span>${column}</span>\n                <span class=\"pd-column-resize\"></span>\n            `;\n        } else {\n            const sort_txt = sort_dir\n                ?.map(x => {\n                    const icon = ICON_MAP[x];\n                    return html`\n                        <span class=\"pd-column-header-icon\">${icon}</span>\n                    `;\n                })\n                .join(\"\");\n            th.innerHTML = html`\n                <span>${column}</span>\n                ${sort_txt}\n                <span class=\"pd-column-resize\"></span>\n            `;\n        }\n\n        return th;\n    }\n\n    _redraw_previous(offset_cache, d) {\n        const {tr, row_container} = this._get_row(d);\n        const cidx = offset_cache[d] - 1;\n        if (cidx < 0) {\n            return;\n        }\n        const th = this._get_cell(\"th\", row_container, cidx, tr);\n        if (!th) return;\n        th.classList.add(\"pd-group-header\");\n        return th;\n    }\n\n    _draw_group(column, column_name, type, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_path = column;\n        metadata.column_name = column_name;\n        metadata.column_type = type;\n        metadata.is_column_header = false;\n        th.className = \"\";\n        return metadata;\n    }\n\n    _draw_th(column, column_name, type, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_path = column;\n        metadata.column_name = column_name;\n        metadata.column_type = type;\n        metadata.is_column_header = true;\n        metadata.size_key = `${column}|${type}`;\n        const auto_width = this._column_sizes.auto[metadata.size_key];\n        const override_width = this._column_sizes.override[metadata.size_key];\n        th.classList.add(`pd-${type}`);\n        if (override_width) {\n            th.classList.toggle(\"pd-cell-clip\", auto_width > override_width);\n            th.style.minWidth = override_width + \"px\";\n            th.style.maxWidth = override_width + \"px\";\n        } else if (auto_width) {\n            th.classList.remove(\"pd-cell-clip\");\n            th.style.maxWidth = \"\";\n            th.style.minWidth = auto_width + \"px\";\n        }\n        return metadata;\n    }\n\n    get_column_header(cidx) {\n        const {tr, row_container} = this._get_row(this.rows.length - 1);\n        return this._get_cell(\"th\", row_container, cidx, tr);\n    }\n\n    _group_header_cache = [];\n    _offset_cache = [];\n\n    draw(config, alias, column_path, type, cidx) {\n        const header_levels = config.column_pivots.length + 1;\n        let parts = column_path.split?.(\"|\");\n        let th,\n            column_name,\n            is_new_group = false;\n        for (let d = 0; d < header_levels; d++) {\n            column_name = parts[d] ? parts[d] : \"\";\n            this._offset_cache[d] = this._offset_cache[d] || 0;\n            if (d < header_levels - 1) {\n                if (this._group_header_cache?.[d]?.[0]?.column_name === column_name) {\n                    th = this._group_header_cache[d][1];\n                    this._group_header_cache[d][2] += 1;\n                    th.setAttribute(\"colspan\", this._group_header_cache[d][2]);\n                } else {\n                    th = this._draw_group_th(this._offset_cache, d, column_name, []);\n                    const metadata = this._draw_group(column_path, column_name, type, th);\n                    this._group_header_cache[d] = [metadata, th, 1];\n                    is_new_group = true;\n                }\n            } else {\n                if (is_new_group) {\n                    this._redraw_previous(this._offset_cache, d);\n                }\n                const vcidx = this._offset_cache[d];\n                const sort_dir = config.sort?.filter(x => x[0] === column_name).map(x => x[1]);\n                th = this._draw_group_th(this._offset_cache, d, column_name, sort_dir);\n\n                // Update the group header's metadata such that each group\n                // header has the same metadata coordinates of its rightmost column.\n                const metadata = this._draw_th(alias || column_path, column_name, type, th);\n                metadata.vcidx = vcidx;\n                metadata.cidx = cidx;\n                for (const [group_meta] of this._group_header_cache) {\n                    group_meta.cidx = cidx;\n                    group_meta.vcidx = vcidx;\n                    group_meta.size_key = metadata.size_key;\n                }\n            }\n        }\n\n        if (header_levels === 1 && Array.isArray(type)) {\n            th.classList.add(\"pd-group-header\");\n        }\n        const metadata = this._get_or_create_metadata(th);\n        this._clean_rows(this._offset_cache.length);\n        return {th, metadata};\n    }\n\n    clean() {\n        this._clean_columns(this._offset_cache);\n        this._offset_cache = [];\n        this._group_header_cache = [];\n    }\n}\n","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport isEqual from \"lodash/isEqual\";\r\nimport {ViewModel} from \"./view_model\";\r\n\r\n/**\r\n * <tbody> view model.\r\n *\r\n * @class DatagridBodyViewModel\r\n */\r\nexport class DatagridBodyViewModel extends ViewModel {\r\n    _draw_td(ridx, val, id, is_open, {cidx, column_name, type}, {selected_id, depth, ridx_offset, cidx_offset}) {\r\n        const {tr, row_container} = this._get_row(ridx);\r\n        if (selected_id !== false) {\r\n            const is_selected = isEqual(id, selected_id);\r\n            const is_sub_selected = !is_selected && isEqual(id?.slice(0, selected_id?.length), selected_id);\r\n            tr.classList.toggle(\"pd-selected\", !!id && is_selected);\r\n            tr.classList.toggle(\"pd-sub-selected\", !!id && is_sub_selected);\r\n        }\r\n        const td = this._get_cell(\"td\", row_container, cidx, tr);\r\n        const metadata = this._get_or_create_metadata(td);\r\n        metadata.id = id;\r\n        metadata.cidx = cidx + cidx_offset;\r\n        metadata.type = type;\r\n        metadata.column = column_name;\r\n        metadata.size_key = `${column_name}|${type}`;\r\n        metadata.ridx = ridx + ridx_offset;\r\n        td.className = `pd-${type}`;\r\n        const override_width = this._column_sizes.override[metadata.size_key];\r\n        if (override_width) {\r\n            const auto_width = this._column_sizes.auto[metadata.size_key];\r\n            td.classList.toggle(\"pd-cell-clip\", auto_width > override_width);\r\n            td.style.minWidth = override_width + \"px\";\r\n            td.style.maxWidth = override_width + \"px\";\r\n        } else {\r\n            td.classList.remove(\"pd-cell-clip\");\r\n            td.style.minWidth = \"\";\r\n            td.style.maxWidth = \"\";\r\n        }\r\n        const formatter = this._format(type);\r\n        if (val === undefined || val === null) {\r\n            td.textContent = \"-\";\r\n            metadata.value = null;\r\n            metadata.row_path = null;\r\n        } else if (formatter) {\r\n            formatter.format(td, val, type, val.length === depth, is_open);\r\n            metadata.value = Array.isArray(val) ? val[val.length - 1] : val;\r\n            metadata.row_path = val;\r\n            metadata.is_open = is_open;\r\n        } else {\r\n            td.textContent = val;\r\n            metadata.value = val;\r\n        }\r\n\r\n        return {td, metadata};\r\n    }\r\n\r\n    draw(container_height, column_state, view_state) {\r\n        const {cidx, column_data, id_column} = column_state;\r\n        let {row_height} = view_state;\r\n        let ridx = 0;\r\n        let td, metadata;\r\n        for (const val of column_data) {\r\n            const next = column_data[ridx + 1];\r\n            const id = id_column?.[ridx];\r\n            const obj = this._draw_td(ridx++, val, id, next?.length > val?.length, column_state, view_state);\r\n            td = obj.td;\r\n            metadata = obj.metadata;\r\n            row_height = row_height || td.offsetHeight;\r\n            if (ridx * row_height > container_height) {\r\n                break;\r\n            }\r\n        }\r\n        this._clean_rows(ridx);\r\n        return {td, cidx, ridx, metadata, row_height};\r\n    }\r\n\r\n    clean({ridx, cidx}) {\r\n        this._clean_rows(ridx);\r\n        this._clean_columns(cidx);\r\n    }\r\n}\r\n","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {DatagridHeaderViewModel} from \"./thead\";\r\nimport {DatagridBodyViewModel} from \"./tbody\";\r\nimport {column_path_2_type, html} from \"./utils\";\r\n\r\n/**\r\n * <table> view model.  In order to handle unknown column width when `draw()`\r\n * is called, this model will iteratively fetch more data to fill in columns\r\n * until the page is complete, and makes some column viewport estimations\r\n * when this information is not availble.\r\n *\r\n * @class DatagridTableViewModel\r\n */\r\nexport class DatagridTableViewModel {\r\n    constructor(table_clip, column_sizes, element) {\r\n        element.innerHTML = html`\r\n            <table cellspacing=\"0\">\r\n                <thead></thead>\r\n                <tbody></tbody>\r\n            </table>\r\n        `;\r\n        const [table] = element.children;\r\n        const [thead, tbody] = table.children;\r\n        this.table = table;\r\n        this._column_sizes = column_sizes;\r\n        this.header = new DatagridHeaderViewModel(column_sizes, table_clip, thead);\r\n        this.body = new DatagridBodyViewModel(column_sizes, table_clip, tbody);\r\n        this.fragment = document.createDocumentFragment();\r\n    }\r\n\r\n    num_columns() {\r\n        return this.header._get_row(Math.max(0, this.header.rows?.length - 1 || 0)).row_container.length;\r\n    }\r\n\r\n    /**\r\n     * Calculate amendments to auto size from this render pass.\r\n     *\r\n     * @param {*} last_cells\r\n     * @param {*} {columns, column_pivots}\r\n     * @memberof DatagridTableViewModel\r\n     */\r\n    autosize_cells(last_cells) {\r\n        while (last_cells.length > 0) {\r\n            const [cell, metadata] = last_cells.shift();\r\n            const offsetWidth = cell.offsetWidth;\r\n            this._column_sizes.row_height = this._column_sizes.row_height || cell.offsetHeight;\r\n            this._column_sizes.indices[metadata.cidx] = offsetWidth;\r\n            const is_override = this._column_sizes.override.hasOwnProperty(metadata.size_key);\r\n            if (offsetWidth && !is_override) {\r\n                this._column_sizes.auto[metadata.size_key] = offsetWidth;\r\n            }\r\n        }\r\n    }\r\n\r\n    async draw(container_size, view_cache, selected_id, preserve_width, viewport) {\r\n        const {width: container_width, height: container_height} = container_size;\r\n        const {view, config, column_paths, schema, table_schema} = view_cache;\r\n        const visible_columns = column_paths.slice(viewport.start_col);\r\n        const columns_data = await view.to_columns(viewport);\r\n        const {start_row: ridx_offset, start_col: cidx_offset} = viewport;\r\n        const depth = config.row_pivots.length;\r\n        const id_column = columns_data[\"__ID__\"];\r\n        const view_state = {viewport_width: 0, selected_id, depth, ridx_offset, cidx_offset, row_height: this._column_sizes.row_height};\r\n\r\n        let cont_body,\r\n            cidx = 0,\r\n            last_cells = [];\r\n        if (column_paths[0] === \"__ROW_PATH__\") {\r\n            const column_name = config.row_pivots.join(\",\");\r\n            const type = config.row_pivots.map(x => table_schema[x]);\r\n            const column_data = columns_data[\"__ROW_PATH__\"];\r\n            const column_state = {column_name, cidx: 0, column_data, id_column, type};\r\n            const cont_head = this.header.draw(config, column_name, \"\", type, 0);\r\n            cont_body = this.body.draw(container_height, column_state, {...view_state, cidx_offset: 0});\r\n            view_state.selected_id = false;\r\n            view_state.viewport_width += this._column_sizes.indices[0] || cont_body.td?.offsetWidth || cont_head.th.offsetWidth;\r\n            view_state.row_height = view_state.row_height || cont_body.row_height;\r\n            cidx++;\r\n            if (!preserve_width) {\r\n                last_cells.push([cont_body.td || cont_head.th, cont_body.metadata || cont_head.metadata]);\r\n            }\r\n        }\r\n\r\n        try {\r\n            while (cidx < visible_columns.length) {\r\n                const column_name = visible_columns[cidx];\r\n                if (!columns_data[column_name]) {\r\n                    let missing_cidx = Math.max(viewport.end_col, 0);\r\n                    viewport.start_col = missing_cidx;\r\n                    viewport.end_col = missing_cidx + 1;\r\n                    const new_col = await view.to_columns(viewport);\r\n                    if (!(column_name in new_col)) {\r\n                        new_col[column_name] = [];\r\n                    }\r\n\r\n                    columns_data[column_name] = new_col[column_name];\r\n                }\r\n\r\n                const type = column_path_2_type(schema, column_name);\r\n                const column_data = columns_data[column_name];\r\n                const column_state = {column_name, cidx, column_data, id_column, type};\r\n                const cont_head = this.header.draw(config, undefined, column_name, type, cidx + cidx_offset);\r\n                cont_body = this.body.draw(container_height, column_state, view_state);\r\n                view_state.selected_id = false;\r\n                view_state.viewport_width += this._column_sizes.indices[cidx + cidx_offset] || cont_body.td?.offsetWidth || cont_head.th.offsetWidth;\r\n                view_state.row_height = view_state.row_height || cont_body.row_height;\r\n                cidx++;\r\n                if (!preserve_width) {\r\n                    last_cells.push([cont_body.td || cont_head.th, cont_body.metadata || cont_head.metadata]);\r\n                }\r\n\r\n                if (view_state.viewport_width > container_width) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return last_cells;\r\n        } finally {\r\n            this.body.clean({ridx: cont_body?.ridx || 0, cidx});\r\n            this.header.clean();\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {throttlePromise} from \"@finos/perspective-viewer/dist/esm/utils.js\";\r\n\r\nimport isEqual from \"lodash/isEqual\";\r\nimport CONTAINER_STYLE from \"../less/container.less\";\r\nimport MATERIAL_STYLE from \"../less/material.less\";\r\n\r\nimport {log_perf, html} from \"./utils\";\r\nimport {DEBUG, BROWSER_MAX_HEIGHT, DOUBLE_BUFFER_RECREATE, DOUBLE_BUFFER_ROW, DOUBLE_BUFFER_COLUMN} from \"./constants\";\r\n\r\n/**\r\n * Handles the virtual scroll pane, as well as the double buffering\r\n * of the underlying <table>. This DOM structure looks a little like\r\n * this:\r\n *\r\n *     +------------------------+      <- div.pd-scroll-container\r\n *     | +----------------------|------<- div.pd-virtual-panel\r\n *     | | +------------------+ |      <- div.pd-scroll-table-clip\r\n *     | | | +----------------|-|--+   <- table             |\r\n *     | | | | 1  A  Alabama  | |  |                        |\r\n *     | | | | 2  B  Arizona  | |  |                        |\r\n *     | | | | 3  C  Arkansas | |  |                        |\r\n *     | | | | 4  D  Californi| |  |                        |\r\n *     | | | | 5  E  Colorado | |  |                        |\r\n *     | | +------------------+ |  |                        |\r\n *     +------------------------+  |                        |\r\n *       |   | 8  H  District of C |                        |\r\n *       |   +---------------------+                        |\r\n *       |                                                  |\r\n *       |                                                  |\r\n *       |                                                  |\r\n *       |                                                  |\r\n *       |                                                  |\r\n *       +--------------------------------------------------+\r\n *\r\n * `overflow: auto` is applied to `.pd-scroll-container`, and `.pd-virtual-pane`\r\n * is sized to match the estimated \"virtual\" size of the `table`;  estimated,\r\n * because it's true size can't be known until all columns dimensions are known,\r\n * which may be deferred in the case of auto-sized tables.\r\n *\r\n * Double buffering can be enabled on \"column scroll\", \"row scroll\" and/or\r\n * \"column schema change\".  When enabled and a redraw is requested for the case,\r\n * the existing table is cloned with `cloneNode()` and swapped with the real\r\n * `table`, which is then updated offscreen and swapped back in.  While this is\r\n * much slower to render, it prevents draw-in.\r\n *\r\n * @class DatagridVirtualTableViewModel\r\n */\r\nexport class DatagridVirtualTableViewModel extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Create the DOM for this `shadowRoot`.\r\n     *\r\n     * `MATERIAL_STYLE` is needed both here, and in the document `<head>`, due\r\n     * to double buffering, which may read incorrect position/size values as the\r\n     * double buffered `<table>` is rendered in the shadow DOM before being\r\n     * swapped in.\r\n     *\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    create_shadow_dom() {\r\n        this.attachShadow({mode: \"open\"});\r\n        const slot = `<slot></slot>`;\r\n        this.shadowRoot.innerHTML = html`\r\n            <style>\r\n                ${CONTAINER_STYLE + MATERIAL_STYLE}\r\n            </style>\r\n            <div class=\"pd-scroll-container\">\r\n                <div class=\"pd-virtual-panel\">${this._virtual_scrolling_disabled && slot}</div>\r\n                <div class=\"pd-scroll-table-clip\">${this._virtual_scrolling_disabled || slot}</div>\r\n                <div style=\"position: absolute; visibility: hidden;\"></div>\r\n            </div>\r\n        `;\r\n\r\n        const stick_container = document.createElement(\"div\");\r\n        const [, scroll_container] = this.shadowRoot.children;\r\n        const [virtual_panel, table_clip, table_staging] = scroll_container.children;\r\n        this._sticky_container = stick_container;\r\n        this._table_clip = table_clip;\r\n        this._table_staging = table_staging;\r\n        this._scroll_container = scroll_container;\r\n        this._virtual_panel = virtual_panel;\r\n    }\r\n\r\n    /**\r\n     * Calculates the `viewport` argument for perspective's `to_columns` method.\r\n     *\r\n     * @param {*} nrows\r\n     * @param {*} reset_scroll_position\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _calculate_viewport(nrows, reset_scroll_position) {\r\n        const id = this._view_cache.config.row_pivots.length > 0;\r\n        if (this._virtual_scrolling_disabled) {\r\n            return {id};\r\n        }\r\n        const {start_row, end_row} = this._calculate_row_range(nrows, reset_scroll_position);\r\n        const {start_col, end_col} = this._calculate_column_range();\r\n        this._nrows = nrows;\r\n        return {start_col, end_col, start_row, end_row, id};\r\n    }\r\n\r\n    /**\r\n     * Calculate `start_row` and `end_row` for the viewport.  We do this by\r\n     * first calculating `total_scroll_height`, the px height of the\r\n     * scrollable page, from the `_virtual_panel.offsetHeight`.\r\n     *\r\n     *    0px +------------+-------------+  - virtual_panel.offsetHeight\r\n     *        |            |  .          |  . 600px\r\n     *        |  viewport  |  .          |  .\r\n     *        |            |  .          |  .\r\n     *  200px +------------+  - height   |  .  - total_scroll_height\r\n     *        |                 200px    |  .  . 400px\r\n     *        |                          |  .  .\r\n     *        |                          |  .  .\r\n     *        |                          |  .  .\r\n     *        |                          |  .  .\r\n     *  600px +--------------------------+  -  -\r\n     *\r\n     *  `percent_scroll` can be calculated from this value and `scrollTop`,\r\n     *  which we can then apply to the new calculated height to preserve scroll\r\n     *  position when the height has changed since previous render.\r\n     *\r\n     *    0px +--------------------------+  -\r\n     *        |                          |  .\r\n     *        |                          |  .\r\n     *        |                          |  . scrollable area\r\n     *  300px +------------+             |  .\r\n     *        |            |             |  .\r\n     *  - - - |  viewport  | - - - - - - |  - total_scroll_height\r\n     *        |            |             |    400px\r\n     *  500px +------------+             |\r\n     *        |                          |\r\n     *  600px +--------------------------+\r\n     *\r\n     * @param {*} nrows\r\n     * @param {*} reset_scroll_position\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _calculate_row_range(nrows, reset_scroll_position) {\r\n        const {height} = this._container_size;\r\n        const row_height = this._column_sizes.row_height || 19;\r\n        const header_levels = this._view_cache.config.column_pivots.length + 1;\r\n        const total_scroll_height = Math.max(1, this._virtual_panel.offsetHeight - this._scroll_container.offsetHeight);\r\n        const percent_scroll = this._scroll_container.scrollTop / total_scroll_height;\r\n        const virtual_panel_row_height = Math.floor(height / row_height);\r\n        const relative_nrows = !reset_scroll_position ? this._nrows || 0 : nrows;\r\n        const scroll_rows = Math.max(0, relative_nrows + (header_levels - virtual_panel_row_height));\r\n        let start_row = Math.round(scroll_rows * percent_scroll);\r\n        let end_row = start_row + virtual_panel_row_height;\r\n        return {start_row, end_row};\r\n    }\r\n\r\n    /**\r\n     * Calculates `start_col` and `end_col` for the viewport - most of the\r\n     * details of which are actually calculated in `_max_column`, the equivalent\r\n     * of `total_scroll_height` from `_calculate_row_range`.\r\n     *\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _calculate_column_range() {\r\n        const total_scroll_width = Math.max(1, this._virtual_panel.offsetWidth - this._container_size.width);\r\n        const percent_left = this._scroll_container.scrollLeft / total_scroll_width;\r\n        const max_scroll_column = this._max_scroll_column() + 0.5;\r\n        let start_col = Math.floor(max_scroll_column * percent_left);\r\n        let end_col = start_col + (this.table_model.num_columns() || 1) + 1;\r\n        return {start_col, end_col};\r\n    }\r\n\r\n    /**\r\n     * Calculates the minimum possible starting column index for which the last\r\n     * column is completely visible (e.g. not occluded by the container clip).\r\n     * This is assumed to be the # of columns unil the column widths are\r\n     * calculated as they are scrolled into view by the user, which requires\r\n     * special synchronization with _update_virtual_panel_width`\r\n     * as the scrollable width will changes as the user scrolls left to right.\r\n     *\r\n     * Once `_column_sizes.indices` has enough column widths populated from\r\n     * user scrolling, it calulates the cumulative sum of column widths from\r\n     * last visible column backwards, until the sum is larger than the viewport\r\n     * px width, which is 1 below the max scroll column\r\n     *\r\n     *               width = 290   = 210     = 100    = 0\r\n     *   0px               V       V         V        500px\r\n     *   +-----------------+-------+---------+--------+\r\n     *   | ..ol B) (Col C) | Col D | Col E   | Col F  |\r\n     *   |                 | 80px  | 110px   | 100px  |\r\n     *   |                 |       |         |        |\r\n     *\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _max_scroll_column() {\r\n        let width = 0;\r\n        if (this._view_cache.config.row_pivots.length > 0) {\r\n            width = this._column_sizes.indices[0];\r\n        }\r\n        let max_scroll_column = this._view_cache.column_paths.length;\r\n        while (width < this._container_size.width && max_scroll_column >= 0) {\r\n            max_scroll_column--;\r\n            width += this._column_sizes.indices[max_scroll_column] || 60;\r\n        }\r\n        const psp_offset = this._view_cache.config.row_pivots.length > 0;\r\n        return Math.min(this._view_cache.column_paths.length - (psp_offset ? 2 : 1), max_scroll_column + (psp_offset ? 0 : 1));\r\n    }\r\n\r\n    /**\r\n     * Determines whether the viewport is identical in row and column axes to\r\n     * the previous viewport rendered, for throttling identical render requests,\r\n     * e.g. when the logical (row-wise) viewport does not change, but the pixel\r\n     * viewport has moved a few px.\r\n     *\r\n     * @param {*} {start_col, end_col, start_row, end_row}\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _validate_viewport({start_col, end_col, start_row, end_row}) {\r\n        const invalid_column = this._start_col !== start_col;\r\n        const invalid_row = this._start_row !== start_row || this._end_row !== end_row || this._end_col !== end_col;\r\n        this._start_col = start_col;\r\n        this._end_col = end_col;\r\n        this._start_row = start_row;\r\n        this._end_row = end_row;\r\n        return {invalid_column, invalid_row};\r\n    }\r\n\r\n    /**\r\n     * A helper method to determine whether to perform a double-buffer render\r\n     * based on settings and render type.\r\n     *\r\n     * @param {*} {invalid_schema, invalid_row, invalid_column}\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _needs_swap({invalid_row, invalid_column}) {\r\n        return (DOUBLE_BUFFER_RECREATE && this._invalid_schema) || (DOUBLE_BUFFER_COLUMN && (invalid_column || this._invalid_schema)) || (DOUBLE_BUFFER_ROW && (invalid_row || this._invalid_schema));\r\n    }\r\n\r\n    /**\r\n     * Step 1 of a double-buffer render, swaps in a duplicate table and appends\r\n     * the real table to the hidden shadow DOM for mutation.\r\n     *\r\n     * @param {*} args\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _swap_in(args) {\r\n        if (!this._virtual_scrolling_disabled) {\r\n            if (this._needs_swap(args)) {\r\n                if (this._sticky_container === this.table_model.table.parentElement) {\r\n                    this._sticky_container.replaceChild(this.table_model.table.cloneNode(true), this.table_model.table);\r\n                }\r\n                this._table_staging.appendChild(this.table_model.table);\r\n            } else {\r\n                if (this._sticky_container !== this.table_model.table.parentElement) {\r\n                    this._sticky_container.replaceChild(this.table_model.table, this._sticky_container.children[0]);\r\n                }\r\n            }\r\n        }\r\n        this._render_element.dispatchEvent(new CustomEvent(\"perspective-datagrid-before-update\", {bubbles: true, detail: this}));\r\n    }\r\n\r\n    /**\r\n     * Step 2 of a double-buffer render, swap the original table back into the\r\n     * light DOM.\r\n     *\r\n     * @param {*} args\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _swap_out(args) {\r\n        if (!this._virtual_scrolling_disabled && this._needs_swap(args)) {\r\n            this._sticky_container.replaceChild(this.table_model.table, this._sticky_container.children[0]);\r\n        }\r\n        this._render_element.dispatchEvent(new CustomEvent(\"perspective-datagrid-after-update\", {bubbles: true, detail: this}));\r\n    }\r\n\r\n    /**\r\n     * Updates the `virtual_panel` width based on view state.\r\n     *\r\n     * @param {*} invalid_schema\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _update_virtual_panel_width(invalid_schema) {\r\n        if (invalid_schema) {\r\n            const total_scroll_width = Math.max(1, this._virtual_panel.offsetWidth - this._container_size.width);\r\n            const percent_left = this._scroll_container.scrollLeft / total_scroll_width;\r\n            const max_scroll_column = this._max_scroll_column();\r\n            let cidx = 0,\r\n                virtual_width = 0;\r\n            while (cidx < max_scroll_column) {\r\n                virtual_width += this._column_sizes.indices[cidx] || 60;\r\n                cidx++;\r\n            }\r\n            const panel_width = this._container_size.width + virtual_width;\r\n            this._virtual_panel.style.width = panel_width + \"px\";\r\n            this._scroll_container.scrollLeft = percent_left * virtual_width;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the `virtual_panel` height based on the view state.\r\n     *\r\n     * @param {*} nrows\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _update_virtual_panel_height(nrows) {\r\n        const {row_height = 19} = this._column_sizes;\r\n        const virtual_panel_px_size = Math.min(BROWSER_MAX_HEIGHT, nrows * row_height);\r\n        this._virtual_panel.style.height = `${virtual_panel_px_size}px`;\r\n    }\r\n\r\n    /**\r\n     * Infer options for `draw()` from the previous render state, given a new\r\n     * perspective `config`.\r\n     *\r\n     * @param {*} config\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    infer_options(config) {\r\n        config = Object.assign({}, config);\r\n        if (!this._view_cache) {\r\n            return {};\r\n        }\r\n        const old_config = Object.assign({}, this._view_cache.config);\r\n        delete old_config[\"sort\"];\r\n        delete config[\"sort\"];\r\n        return {reset_scroll_position: !isEqual(config, old_config)};\r\n    }\r\n\r\n    /**\r\n     * Draws this virtual panel, given an object of render options that allow\r\n     * the implementor to fine tune the individual render frames based on the\r\n     * interaction and previous render state.\r\n     *\r\n     * `reset_scroll_position` will not prevent the viewport from moving as\r\n     * `draw()` may change the dmiensions of the virtual_panel (and thus,\r\n     * absolute scroll offset).  This calls `reset_scroll`, which will\r\n     * trigger `_on_scroll` and ultimately `draw()` again;  however, this call\r\n     * to `draw()` will be for the same viewport and will not actually cause\r\n     * a render.\r\n     *\r\n     * @param {*} [options={reset_scroll_position = false, preserve_width = false, invalid_viewport = false}]\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    @throttlePromise\r\n    async draw(options = {}) {\r\n        const __debug_start_time__ = DEBUG && performance.now();\r\n        const {reset_scroll_position = false, preserve_width = false, invalid_viewport = false} = options;\r\n\r\n        if (this._view_cache.column_paths === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (reset_scroll_position) {\r\n            this.reset_scroll();\r\n        }\r\n\r\n        const nrows = await this._view_cache.view.num_rows();\r\n\r\n        if (this._virtual_scrolling_disabled) {\r\n            this._container_size = {width: Infinity, height: Infinity};\r\n        } else {\r\n            this._container_size = (!this._invalid_schema && this._container_size) || {\r\n                width: this._sticky_container.offsetWidth,\r\n                height: this._sticky_container.offsetHeight\r\n            };\r\n        }\r\n\r\n        const viewport = this._calculate_viewport(nrows, reset_scroll_position);\r\n        const swap_args = this._validate_viewport(viewport);\r\n        const {invalid_row, invalid_column} = swap_args;\r\n        this._update_virtual_panel_height(nrows);\r\n\r\n        if (this._invalid_schema || invalid_row || invalid_column || invalid_viewport) {\r\n            this._swap_in(swap_args);\r\n            const last_cells = await this.table_model.draw(this._container_size, this._view_cache, this._selected_id, preserve_width, viewport);\r\n            this._swap_out(swap_args);\r\n            this.table_model.autosize_cells(last_cells);\r\n            if (!preserve_width) {\r\n                this._update_virtual_panel_width(this._invalid_schema || invalid_column || invalid_viewport);\r\n            }\r\n            this._invalid_schema = false;\r\n        }\r\n\r\n        if (DEBUG) {\r\n            log_perf(performance.now() - __debug_start_time__);\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {throttlePromise} from \"@finos/perspective-viewer/dist/esm/utils.js\";\r\n\r\nimport isEqual from \"lodash/isEqual\";\r\nimport {METADATA_MAP} from \"./constants\";\r\nimport {DatagridVirtualTableViewModel} from \"./scroll_panel\";\r\nimport {getCellConfig} from \"./utils\";\r\n\r\n/**\r\n *\r\n *\r\n * @class DatagridViewEventModel\r\n * @extends {DatagridVirtualTableViewModel}\r\n */\r\nexport class DatagridViewEventModel extends DatagridVirtualTableViewModel {\r\n    register_listeners() {\r\n        this._scroll_container.addEventListener(\"scroll\", this._on_scroll.bind(this), {passive: false});\r\n        this._scroll_container.addEventListener(\"mousewheel\", this._on_mousewheel.bind(this), {passive: false});\r\n        this._sticky_container.addEventListener(\"mousedown\", this._on_click.bind(this));\r\n        this._sticky_container.addEventListener(\"dblclick\", this._on_dblclick.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @returns\r\n     * @memberof DatagridViewModel\r\n     */\r\n    async _on_scroll(event) {\r\n        event.stopPropagation();\r\n        event.returnValue = false;\r\n        await this.draw();\r\n        this._render_element.dispatchEvent(new CustomEvent(\"perspective-datagrid-scroll\"));\r\n    }\r\n\r\n    /**\r\n     * Mousewheel must precalculate in addition to `_on_scroll` to prevent\r\n     * visual artifacts due to scrolling \"inertia\" on modern browsers/mobile.\r\n     *\r\n     * @param {*} event\r\n     * @memberof DatagridViewModel\r\n     */\r\n    _on_mousewheel(event) {\r\n        if (this._virtual_scrolling_disabled) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        event.returnValue = false;\r\n        const {offsetWidth, offsetHeight, scrollTop, scrollLeft} = this._scroll_container;\r\n        const total_scroll_height = Math.max(1, this._virtual_panel.offsetHeight - offsetHeight);\r\n        const total_scroll_width = Math.max(1, this._virtual_panel.offsetWidth - offsetWidth);\r\n        this._scroll_container.scrollTop = Math.min(total_scroll_height, scrollTop + event.deltaY);\r\n        this._scroll_container.scrollLeft = Math.min(total_scroll_width, scrollLeft + event.deltaX);\r\n        this._on_scroll(event);\r\n    }\r\n\r\n    /**\r\n     * Handles double-click header width override reset.\r\n     *\r\n     * @param {*} event\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    async _on_dblclick(event) {\r\n        let element = event.target;\r\n        while (element.tagName !== \"TD\" && element.tagName !== \"TH\") {\r\n            element = element.parentElement;\r\n            if (!this._sticky_container.contains(element)) {\r\n                return;\r\n            }\r\n        }\r\n        const is_resize = event.target.classList.contains(\"pd-column-resize\");\r\n        const metadata = METADATA_MAP.get(element);\r\n        if (is_resize) {\r\n            await new Promise(setTimeout);\r\n            delete this._column_sizes.override[metadata.size_key];\r\n            delete this._column_sizes.auto[metadata.size_key];\r\n            delete this._column_sizes.indices[metadata.cidx];\r\n            element.style.minWidth = \"\";\r\n            element.style.maxWidth = \"\";\r\n            for (const row of this.table_model.body.cells) {\r\n                const td = row[metadata.cidx];\r\n                td.style.minWidth = \"\";\r\n                td.style.maxWidth = \"\";\r\n                td.classList.remove(\"pd-cell-clip\");\r\n            }\r\n            await this.draw({invalid_viewport: true});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatches all click events to other handlers, depending on\r\n     * `event.target`.\r\n     *\r\n     * @param {*} event\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    async _on_click(event) {\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n\r\n        let element = event.target;\r\n        while (element.tagName !== \"TD\" && element.tagName !== \"TH\") {\r\n            element = element.parentElement;\r\n            if (!this._sticky_container.contains(element)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const is_button = event.target.classList.contains(\"pd-row-header-icon\");\r\n        const is_resize = event.target.classList.contains(\"pd-column-resize\");\r\n        const metadata = METADATA_MAP.get(element);\r\n        if (is_button) {\r\n            await this._on_toggle(event, metadata);\r\n        } else if (is_resize) {\r\n            this._on_resize_column(event, element, metadata);\r\n        } else if (metadata?.is_column_header) {\r\n            await this._on_sort(event, metadata);\r\n        } else {\r\n            await this._on_select(metadata);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Datagrid event for column resize.\r\n     *\r\n     * @param {*} event\r\n     * @param {*} element\r\n     * @param {*} metadata\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    _on_resize_column(event, element, metadata) {\r\n        const start = event.pageX;\r\n        element = this.table_model.header.get_column_header(metadata.vcidx);\r\n        const width = this._column_sizes.indices[metadata.cidx];\r\n        const move = event => this._on_resize_column_move(event, element, start, width, metadata);\r\n        const up = async () => {\r\n            document.removeEventListener(\"mousemove\", move);\r\n            document.removeEventListener(\"mouseup\", up);\r\n            const override_width = this._column_sizes.override[metadata.size_key];\r\n            this._column_sizes.indices[metadata.cidx] = override_width;\r\n            await this.draw({invalid_viewport: true});\r\n        };\r\n        document.addEventListener(\"mousemove\", move);\r\n        document.addEventListener(\"mouseup\", up);\r\n    }\r\n\r\n    /**\r\n     * Datagrid event for mouse movement when resizing a column.\r\n     *\r\n     * @param {*} event\r\n     * @param {*} th\r\n     * @param {*} start\r\n     * @param {*} width\r\n     * @param {*} metadata\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    @throttlePromise\r\n    async _on_resize_column_move(event, th, start, width, metadata) {\r\n        await new Promise(setTimeout);\r\n        const diff = event.pageX - start;\r\n        const override_width = width + diff;\r\n        this._column_sizes.override[metadata.size_key] = override_width;\r\n\r\n        // If the column is smaller, new columns may need to be fetched, so\r\n        // redraw, else just update the DOM widths as if redrawn.\r\n        if (diff < 0) {\r\n            await this.draw({invalid_viewport: true, preserve_width: true});\r\n        } else {\r\n            th.style.minWidth = override_width + \"px\";\r\n            th.style.maxWidth = override_width + \"px\";\r\n            const auto_width = this._column_sizes.auto[metadata.size_key];\r\n            for (const row of this.table_model.body.cells) {\r\n                const td = row[metadata.vcidx];\r\n                td.style.maxWidth = td.style.minWidth = override_width + \"px\";\r\n                td.classList.toggle(\"pd-cell-clip\", auto_width > override_width);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Datagrid event which handles row selection.\r\n     *\r\n     * @param {*} metadata\r\n     * @returns\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    async _on_select(metadata) {\r\n        if (!this._render_element.hasAttribute(\"selectable\")) {\r\n            return;\r\n        }\r\n\r\n        const is_deselect = isEqual(metadata.id, this._selected_id);\r\n        let filters = [];\r\n        if (is_deselect) {\r\n            this._selected_id = undefined;\r\n            await this.draw({invalid_viewport: true});\r\n        } else {\r\n            this._selected_id = metadata.id;\r\n            await this.draw({invalid_viewport: true});\r\n            filters = await getCellConfig(this._view_cache, metadata.ridx, metadata.cidx);\r\n            filters = filters.config.filters;\r\n        }\r\n\r\n        this._render_element.dispatchEvent(\r\n            new CustomEvent(\"perspective-select\", {\r\n                bubbles: true,\r\n                composed: true,\r\n                detail: {\r\n                    selected: !is_deselect,\r\n                    config: {filters}\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Toggles a tree row between 'open' and 'closed' states, or toggles all\r\n     * tree rows at this depth when the shift key is also pressed.\r\n     *\r\n     * @param {*} event\r\n     * @param {*} metadata\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    async _on_toggle(event, metadata) {\r\n        if (metadata.is_open) {\r\n            if (event.shiftKey) {\r\n                await this._view_cache.view.set_depth(metadata.row_path.length - 1);\r\n            } else {\r\n                await this._view_cache.view.collapse(metadata.ridx);\r\n            }\r\n        } else if (metadata.is_open === false) {\r\n            if (event.shiftKey) {\r\n                await this._view_cache.view.set_depth(metadata.row_path.length);\r\n            } else {\r\n                await this._view_cache.view.expand(metadata.ridx);\r\n            }\r\n        }\r\n        await this.draw({invalid_viewport: true});\r\n    }\r\n\r\n    /**\r\n     * Datagrid event which handles sorting.  There are 3 control states:\r\n     *\r\n     *  - Already sorted by `metadata.column_name`, increment sort clause to\r\n     *    next sort state.\r\n     *  - Not sorted, shift key, append new sort clause to existing.\r\n     *  - Not sorted, set as new sort clause.\r\n     *\r\n     * @param {*} event\r\n     * @param {*} metadata\r\n     * @memberof DatagridVirtualTableViewModel\r\n     */\r\n    async _on_sort(event, metadata) {\r\n        let sort = this._view_cache.config.sort.slice();\r\n        const current_idx = sort.findIndex(x => x[0] === metadata.column_name);\r\n        if (current_idx > -1) {\r\n            const sort_dir = sort[current_idx][1];\r\n            const new_sort = this._render_element._increment_sort(sort_dir, false, event.altKey);\r\n            sort[current_idx] = [metadata.column_name, new_sort];\r\n        } else {\r\n            let sort_dir = event.altKey ? \"asc abs\" : \"asc\";\r\n            const new_sort = [metadata.column_name, sort_dir];\r\n            if (event.shiftKey) {\r\n                sort.push(new_sort);\r\n            } else {\r\n                sort = [new_sort];\r\n            }\r\n        }\r\n        this._render_element.setAttribute(\"sort\", JSON.stringify(sort));\r\n    }\r\n}\r\n","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {registerPlugin} from \"@finos/perspective-viewer/dist/esm/utils.js\";\r\nimport {_start_profiling_loop} from \"./utils\";\r\nimport {DatagridViewModel} from \"./datagrid\";\r\nimport {VIEWER_MAP} from \"./constants\";\r\nimport MATERIAL_STYLE from \"../less/material.less\";\r\n\r\n/**\r\n * Initializes a new datagrid renderer if needed, or returns an existing one\r\n * associated with a rendering `<div>` from a cache.\r\n *\r\n * @param {*} element\r\n * @param {*} div\r\n * @returns\r\n */\r\nfunction get_or_create_datagrid(element, div) {\r\n    let datagrid;\r\n    if (!VIEWER_MAP.has(div)) {\r\n        datagrid = document.createElement(\"perspective-datagrid\");\r\n        datagrid.appendChild(document.createElement(\"slot\"));\r\n        datagrid.set_element(element);\r\n        datagrid.register_listeners();\r\n        div.innerHTML = \"\";\r\n        div.appendChild(datagrid);\r\n        VIEWER_MAP.set(div, datagrid);\r\n    } else {\r\n        datagrid = VIEWER_MAP.get(div);\r\n    }\r\n\r\n    if (!datagrid.isConnected) {\r\n        datagrid.clear();\r\n        div.innerHTML = \"\";\r\n        div.appendChild(datagrid);\r\n    }\r\n\r\n    return datagrid;\r\n}\r\n\r\n/**\r\n * <perspective-viewer> plugin.\r\n *\r\n * @class DatagridPlugin\r\n */\r\nclass DatagridPlugin {\r\n    static name = \"Datagrid\";\r\n    static selectMode = \"toggle\";\r\n    static deselectMode = \"pivots\";\r\n\r\n    static async update(div) {\r\n        try {\r\n            const datagrid = VIEWER_MAP.get(div);\r\n            await datagrid.draw({invalid_viewport: true});\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    static async create(div, view) {\r\n        const datagrid = get_or_create_datagrid(this, div);\r\n        const options = await datagrid.set_view(view);\r\n        await datagrid.draw(options);\r\n    }\r\n\r\n    static async resize() {\r\n        if (this.view && VIEWER_MAP.has(this._datavis)) {\r\n            const datagrid = VIEWER_MAP.get(this._datavis);\r\n            datagrid.reset_size();\r\n            await datagrid.draw({invalid_viewport: true});\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Appends the default tbale CSS to `<head>`, should be run once on module\r\n *  import.\r\n *\r\n */\r\nfunction _register_global_styles() {\r\n    const style = document.createElement(\"style\");\r\n    style.textContent = MATERIAL_STYLE;\r\n    document.head.appendChild(style);\r\n}\r\n\r\n/******************************************************************************\r\n *\r\n * Main\r\n *\r\n */\r\n\r\nwindow.customElements.define(\"perspective-datagrid\", DatagridViewModel);\r\n\r\nregisterPlugin(\"datagrid\", DatagridPlugin);\r\n\r\n_start_profiling_loop();\r\n_register_global_styles();\r\n","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {METADATA_MAP} from \"./constants\";\r\nimport {DatagridTableViewModel} from \"./table\";\r\nimport {DatagridViewEventModel} from \"./events\";\r\n\r\n/**\r\n * Datagrid's \"public\" API.  See the `superstore-custom-grid.html` simple\r\n * example.\r\n *\r\n * @class DatagridViewEventModel\r\n * @extends {DatagridVirtualTableViewModel}\r\n */\r\nexport class DatagridViewModel extends DatagridViewEventModel {\r\n    /**\r\n     * Returns the metadata object associated with a `<td>` or `<th>`.  When\r\n     * an `perspective-datagrid-after-update` event fires, use this method\r\n     * to look up the Perspective data associated with a `<table>`s DOM cells.\r\n     *\r\n     * @param {*} td\r\n     * @returns a metadata object.\r\n     * @memberof DatagridViewModel\r\n     */\r\n    get_meta(td) {\r\n        return METADATA_MAP.get(td);\r\n    }\r\n\r\n    /**\r\n     * Gets all `<td>` elements modified in this render.  This is equivalent to\r\n     * `element.querySlectorAll(\"td\");\r\n     *\r\n     * @returns\r\n     * @memberof DatagridViewModel\r\n     */\r\n    get_tds() {\r\n        return this.table_model.body.cells.flat(1);\r\n    }\r\n\r\n    /**\r\n     * Gets all `<th>` elements modified in this render.  This is equivalent to\r\n     * `element.querySlectorAll(\"th\");\r\n     *\r\n     * @returns\r\n     * @memberof DatagridViewModel\r\n     */\r\n    get_ths() {\r\n        return this.table_model.body.cells.flat(1);\r\n    }\r\n\r\n    /**\r\n     * Clear this renderer.\r\n     *\r\n     * @memberof DatagridViewModel\r\n     */\r\n    clear() {\r\n        this._sticky_container.innerHTML = \"<table></table>\";\r\n        if (this._render_element) {\r\n            if (this._render_element !== this.table_model.table.parentElement) {\r\n                this._render_element.appendChild(this._sticky_container);\r\n            }\r\n        } else {\r\n            this.appendChild(this.table_model.table);\r\n        }\r\n    }\r\n\r\n    reset_viewport() {\r\n        this._start_row = undefined;\r\n        this._end_row = undefined;\r\n        this._start_col = undefined;\r\n        this._end_col = undefined;\r\n    }\r\n\r\n    reset_size() {\r\n        this._container_size = undefined;\r\n    }\r\n\r\n    reset_scroll() {\r\n        this._column_sizes.indices = [];\r\n        this._scroll_container.scrollTop = 0;\r\n        this._scroll_container.scrollLeft = 0;\r\n        this.reset_viewport();\r\n    }\r\n\r\n    async set_view(view) {\r\n        const config = await view.get_config();\r\n        const table_schema = await this._render_element.table.schema();\r\n        const schema = await view.schema();\r\n        const column_paths = await view.column_paths();\r\n        this._invalid_schema = true;\r\n        const options = this.infer_options(config);\r\n        this._view_cache = {view, config, column_paths, schema, table_schema};\r\n        return options;\r\n    }\r\n\r\n    set_element(_render_element) {\r\n        if (_render_element) {\r\n            this._render_element = _render_element;\r\n        }\r\n        this._virtual_scrolling_disabled = _render_element.hasAttribute(\"disable-virtual-datagrid\");\r\n        this.create_shadow_dom();\r\n        this._column_sizes = {auto: {}, override: {}, indices: []};\r\n        this.table_model = new DatagridTableViewModel(this._table_clip, this._column_sizes, this._sticky_container);\r\n        if (!this.table_model) return;\r\n        if (this._render_element) {\r\n            if (this._render_element !== this.table_model.table.parentElement) {\r\n                this._render_element.appendChild(this._sticky_container);\r\n            }\r\n        } else {\r\n            this.appendChild(this.table_model.table);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}