{"version":3,"sources":["../../src/js/thead.js"],"names":["ViewModel","ICON_MAP","html","DatagridHeaderViewModel","_draw_group_th","offset_cache","d","column","sort_dir","tr","row_container","_get_row","th","_get_cell","className","removeAttribute","style","minWidth","length","innerHTML","sort_txt","map","x","icon","join","_redraw_previous","cidx","classList","add","_draw_group","column_name","type","metadata","_get_or_create_metadata","column_path","column_type","is_column_header","_draw_th","size_key","auto_width","_column_sizes","auto","override_width","override","toggle","maxWidth","remove","get_column_header","rows","draw","config","alias","header_levels","column_pivots","parts","split","is_new_group","_offset_cache","_group_header_cache","setAttribute","vcidx","sort","filter","group_meta","Array","isArray","_clean_rows","clean","_clean_columns"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {ViewModel} from \"./view_model\";\nimport {ICON_MAP} from \"./constants\";\nimport {html} from \"./utils.js\";\n\n/**\n * <thead> view model.  This model accumulates state in the form of\n * column_sizes, which leverages <tables> autosize behavior across\n * virtual pages.\n *\n * @class DatagridHeaderViewModel\n */\nexport class DatagridHeaderViewModel extends ViewModel {\n    _draw_group_th(offset_cache, d, column, sort_dir) {\n        const {tr, row_container} = this._get_row(d);\n        const th = this._get_cell(\"th\", row_container, offset_cache[d], tr);\n        offset_cache[d] += 1;\n        th.className = \"\";\n        th.removeAttribute(\"colspan\");\n        th.style.minWidth = \"0\";\n        if (sort_dir?.length === 0) {\n            th.innerHTML = html`\n                <span>${column}</span>\n                <span class=\"pd-column-resize\"></span>\n            `;\n        } else {\n            const sort_txt = sort_dir\n                ?.map(x => {\n                    const icon = ICON_MAP[x];\n                    return html`\n                        <span class=\"pd-column-header-icon\">${icon}</span>\n                    `;\n                })\n                .join(\"\");\n            th.innerHTML = html`\n                <span>${column}</span>\n                ${sort_txt}\n                <span class=\"pd-column-resize\"></span>\n            `;\n        }\n\n        return th;\n    }\n\n    _redraw_previous(offset_cache, d) {\n        const {tr, row_container} = this._get_row(d);\n        const cidx = offset_cache[d] - 1;\n        if (cidx < 0) {\n            return;\n        }\n        const th = this._get_cell(\"th\", row_container, cidx, tr);\n        if (!th) return;\n        th.classList.add(\"pd-group-header\");\n        return th;\n    }\n\n    _draw_group(column, column_name, type, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_path = column;\n        metadata.column_name = column_name;\n        metadata.column_type = type;\n        metadata.is_column_header = false;\n        th.className = \"\";\n        return metadata;\n    }\n\n    _draw_th(column, column_name, type, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_path = column;\n        metadata.column_name = column_name;\n        metadata.column_type = type;\n        metadata.is_column_header = true;\n        metadata.size_key = `${column}|${type}`;\n        const auto_width = this._column_sizes.auto[metadata.size_key];\n        const override_width = this._column_sizes.override[metadata.size_key];\n        th.classList.add(`pd-${type}`);\n        if (override_width) {\n            th.classList.toggle(\"pd-cell-clip\", auto_width > override_width);\n            th.style.minWidth = override_width + \"px\";\n            th.style.maxWidth = override_width + \"px\";\n        } else if (auto_width) {\n            th.classList.remove(\"pd-cell-clip\");\n            th.style.maxWidth = \"\";\n            th.style.minWidth = auto_width + \"px\";\n        }\n        return metadata;\n    }\n\n    get_column_header(cidx) {\n        const {tr, row_container} = this._get_row(this.rows.length - 1);\n        return this._get_cell(\"th\", row_container, cidx, tr);\n    }\n\n    _group_header_cache = [];\n    _offset_cache = [];\n\n    draw(config, alias, column_path, type, cidx) {\n        const header_levels = config.column_pivots.length + 1;\n        let parts = column_path.split?.(\"|\");\n        let th,\n            column_name,\n            is_new_group = false;\n        for (let d = 0; d < header_levels; d++) {\n            column_name = parts[d] ? parts[d] : \"\";\n            this._offset_cache[d] = this._offset_cache[d] || 0;\n            if (d < header_levels - 1) {\n                if (this._group_header_cache?.[d]?.[0]?.column_name === column_name) {\n                    th = this._group_header_cache[d][1];\n                    this._group_header_cache[d][2] += 1;\n                    th.setAttribute(\"colspan\", this._group_header_cache[d][2]);\n                } else {\n                    th = this._draw_group_th(this._offset_cache, d, column_name, []);\n                    const metadata = this._draw_group(column_path, column_name, type, th);\n                    this._group_header_cache[d] = [metadata, th, 1];\n                    is_new_group = true;\n                }\n            } else {\n                if (is_new_group) {\n                    this._redraw_previous(this._offset_cache, d);\n                }\n                const vcidx = this._offset_cache[d];\n                const sort_dir = config.sort?.filter(x => x[0] === column_name).map(x => x[1]);\n                th = this._draw_group_th(this._offset_cache, d, column_name, sort_dir);\n\n                // Update the group header's metadata such that each group\n                // header has the same metadata coordinates of its rightmost column.\n                const metadata = this._draw_th(alias || column_path, column_name, type, th);\n                metadata.vcidx = vcidx;\n                metadata.cidx = cidx;\n                for (const [group_meta] of this._group_header_cache) {\n                    group_meta.cidx = cidx;\n                    group_meta.vcidx = vcidx;\n                    group_meta.size_key = metadata.size_key;\n                }\n            }\n        }\n\n        if (header_levels === 1 && Array.isArray(type)) {\n            th.classList.add(\"pd-group-header\");\n        }\n        const metadata = this._get_or_create_metadata(th);\n        this._clean_rows(this._offset_cache.length);\n        return {th, metadata};\n    }\n\n    clean() {\n        this._clean_columns(this._offset_cache);\n        this._offset_cache = [];\n        this._group_header_cache = [];\n    }\n}\n"],"file":"thead.js"}