{"version":3,"sources":["../../src/js/thead.js"],"names":["ViewModel","ICON_MAP","DatagridHeaderViewModel","_draw_group_th","offset_cache","d","column","sort_dir","tr","row_container","_get_row","th","_get_cell","cidx","className","removeAttribute","style","minWidth","metadata","_get_or_create_metadata","length","innerHTML","sort_txt","map","x","_redraw_previous","classList","add","_draw_group","column_name","type","column_path","column_type","is_column_header","size_key","_draw_th","auto_width","_column_sizes","auto","override_width","override","toggle","maxWidth","remove","draw","config","alias","sort","group_header_cache","header_levels","column_pivots","parts","split","is_new_group","setAttribute","parseInt","getAttribute","filter","Array","isArray","_clean_rows","clean","_clean_columns"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {ViewModel} from \"./view_model\";\nimport {ICON_MAP} from \"./constants\";\n\n/**\n * <thead> view model.  This model accumulates state in the form of\n * column_sizes, which leverages <tables> autosize behavior across\n * virtual pages.\n *\n * @class DatagridHeaderViewModel\n */\nexport class DatagridHeaderViewModel extends ViewModel {\n    _draw_group_th(offset_cache, d, column, sort_dir) {\n        const {tr, row_container} = this._get_row(d);\n        const th = this._get_cell(\"th\", row_container, offset_cache[d], tr);\n        const cidx = offset_cache[d];\n        offset_cache[d] += 1;\n        th.className = \"\";\n        th.removeAttribute(\"colspan\");\n        th.style.minWidth = \"0\";\n        const metadata = this._get_or_create_metadata(th);\n        metadata.cidx = cidx;\n\n        if (sort_dir?.length === 0) {\n            th.innerHTML = \"<span>\" + column + `</span><span class=\"pd-column-resize\"></span>`;\n        } else {\n            const sort_txt = sort_dir?.map(x => ICON_MAP[x]);\n            th.innerHTML = \"<span>\" + column + `</span><span class=\"pd-column-header-icon\">${sort_txt}</span><span class=\"pd-column-resize\"></span>`;\n        }\n        return th;\n    }\n\n    _redraw_previous(offset_cache, d) {\n        const {tr, row_container} = this._get_row(d);\n        const cidx = offset_cache[d] - 1;\n        if (cidx < 0) {\n            return;\n        }\n        const th = this._get_cell(\"th\", row_container, cidx, tr);\n        if (!th) return;\n        th.classList.add(\"pd-group-header\");\n        return th;\n    }\n\n    _draw_group(column, column_name, type, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_path = column;\n        metadata.column_name = column_name;\n        metadata.column_type = type;\n        metadata.is_column_header = false;\n        metadata.size_key = `${column}|${type}`;\n        th.className = \"\";\n    }\n\n    _draw_th(column, column_name, type, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_path = column;\n        metadata.column_name = column_name;\n        metadata.column_type = type;\n        metadata.is_column_header = true;\n        metadata.size_key = `${column}|${type}`;\n        const auto_width = this._column_sizes.auto[metadata.size_key];\n        const override_width = this._column_sizes.override[metadata.size_key];\n        th.classList.add(`pd-${type}`);\n        if (override_width) {\n            th.classList.toggle(\"pd-cell-clip\", auto_width > override_width);\n            th.style.minWidth = override_width + \"px\";\n            th.style.maxWidth = override_width + \"px\";\n        } else if (auto_width) {\n            th.classList.remove(\"pd-cell-clip\");\n            th.style.maxWidth = \"none\";\n            th.style.minWidth = auto_width + \"px\";\n        }\n    }\n\n    draw(config, alias, column, type, sort, {group_header_cache = [], offset_cache = []} = {}) {\n        const header_levels = config.column_pivots.length + 1;\n        let parts = column.split?.(\"|\");\n        let th,\n            column_name,\n            is_new_group = false;\n        for (let d = 0; d < header_levels; d++) {\n            column_name = parts[d] ? parts[d] : \"\";\n            group_header_cache[d] = group_header_cache[d] || [];\n            offset_cache[d] = offset_cache[d] || 0;\n            if (d < header_levels - 1) {\n                if (group_header_cache[d][0] === column_name) {\n                    th = group_header_cache[d][1];\n                    th.setAttribute(\"colspan\", (parseInt(th.getAttribute(\"colspan\")) || 1) + 1);\n                } else {\n                    th = this._draw_group_th(offset_cache, d, column_name, []);\n                    this._draw_group(column, column_name, type, th);\n                    group_header_cache[d] = [column_name, th];\n                    is_new_group = true;\n                }\n            } else {\n                if (is_new_group) {\n                    this._redraw_previous(offset_cache, d);\n                }\n                const sort_dir = sort?.filter(x => x[0] === column_name).map(x => x[1]);\n                th = this._draw_group_th(offset_cache, d, column_name, sort_dir);\n                this._draw_th(alias || column, column_name, type, th);\n            }\n        }\n\n        if (header_levels === 1 && Array.isArray(type)) {\n            th.classList.add(\"pd-group-header\");\n        }\n        const metadata = this._get_or_create_metadata(th);\n        this._clean_rows(offset_cache.length);\n        return {group_header_cache, offset_cache, th, metadata};\n    }\n\n    clean({offset_cache}) {\n        this._clean_columns(offset_cache);\n    }\n}\n"],"file":"thead.js"}