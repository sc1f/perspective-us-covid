{"version":3,"sources":["../../src/js/utils.js"],"names":["DEBUG","getCellConfig","view","config","row_idx","col_idx","row_pivots","column_pivots","start_row","end_row","r","to_json","row_paths","map","x","__ROW_PATH__","row_pivots_values","row_filters","pivot","index","pivot_value","undefined","filter","column_index","length","column_paths","Object","keys","result","row","column_filters","column_pivot_values","split","column_names","value","filters","concat","LOG","log_fps","avg","reduce","y","rfps","vfps","nframes","console","log","toFixed","log_perf","push","_start_profiling_loop","setInterval","memoize","_target","_property","descriptor","cache","Map","func","new_func","arg","has","get","res","call","set","column_path_2_type","schema","column","parts","html","strings","args","str","i","flat","a","join"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {DEBUG} from \"./constants\";\n\n/******************************************************************************\n *\n * Events\n *\n */\n\nexport async function getCellConfig({view, config}, row_idx, col_idx) {\n    const row_pivots = config.row_pivots;\n    const column_pivots = config.column_pivots;\n    const start_row = row_idx >= 0 ? row_idx : 0;\n    const end_row = start_row + 1;\n    const r = await view.to_json({start_row, end_row});\n    const row_paths = r.map(x => x.__ROW_PATH__);\n    const row_pivots_values = row_paths[0] || [];\n    const row_filters = row_pivots\n        .map((pivot, index) => {\n            const pivot_value = row_pivots_values[index];\n            return pivot_value ? [pivot, \"==\", pivot_value] : undefined;\n        })\n        .filter(x => x);\n    const column_index = row_pivots.length > 0 ? col_idx + 1 : col_idx;\n    const column_paths = Object.keys(r[0])[column_index];\n    const result = {row: r[0]};\n    let column_filters = [];\n    if (column_paths) {\n        const column_pivot_values = column_paths.split(\"|\");\n        result.column_names = [column_pivot_values[column_pivot_values.length - 1]];\n        column_filters = column_pivots\n            .map((pivot, index) => {\n                const pivot_value = column_pivot_values[index];\n                return pivot_value ? [pivot, \"==\", pivot_value] : undefined;\n            })\n            .filter(x => x)\n            .filter(([, , value]) => value !== \"__ROW_PATH__\");\n    }\n\n    const filters = config.filter.concat(row_filters).concat(column_filters);\n    result.config = {filters};\n    return result;\n}\n\n/******************************************************************************\n *\n * Profling\n *\n */\n\nlet LOG = [];\n\nfunction log_fps() {\n    const avg = LOG.reduce((x, y) => x + y, 0) / LOG.length;\n    const rfps = LOG.length / 5;\n    const vfps = 1000 / avg;\n    const nframes = LOG.length;\n    console.log(`${avg.toFixed(2)} ms/frame   ${rfps} rfps   ${vfps.toFixed(2)} vfps   (${nframes} frames in 5s)`);\n    LOG = [];\n}\n\nexport function log_perf(x) {\n    LOG.push(x);\n}\n\nexport function _start_profiling_loop() {\n    if (DEBUG) {\n        setInterval(log_fps, 5000);\n    }\n}\n\n/******************************************************************************\n *\n * Utils\n *\n */\n\n/**\n * A class method decorate for memoizing method results.  Only works on one\n * arg.\n */\nexport function memoize(_target, _property, descriptor) {\n    const cache = new Map();\n    const func = descriptor.value;\n    descriptor.value = new_func;\n    return descriptor;\n    function new_func(arg) {\n        if (cache.has(arg)) {\n            return cache.get(arg);\n        } else {\n            const res = func.call(this, arg);\n            cache.set(arg, res);\n            return res;\n        }\n    }\n}\n\nexport function column_path_2_type(schema, column) {\n    let parts = column.split(\"|\");\n    return schema[parts[parts.length - 1]];\n}\n\n/**\n * Identical to a non-tagger template literal, this is only used to indicate to\n * babel that this string should be HTML-minified on production builds.\n */\nexport const html = (strings, ...args) =>\n    strings\n        .map((str, i) => [str, args[i]])\n        .flat()\n        .filter(a => !!a)\n        .join(\"\");\n"],"file":"utils.js"}