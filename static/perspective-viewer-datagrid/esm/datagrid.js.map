{"version":3,"sources":["../../src/js/datagrid.js"],"names":["METADATA_MAP","DatagridTableViewModel","DatagridViewEventModel","DatagridViewModel","get_meta","td","get","get_tds","table_model","body","cells","flat","get_ths","clear","_sticky_container","innerHTML","_render_element","table","parentElement","appendChild","reset_viewport","_start_row","undefined","_end_row","_start_col","_end_col","reset_size","_container_size","reset_scroll","_column_sizes","indices","_scroll_container","scrollTop","scrollLeft","set_view","view","config","get_config","table_schema","schema","column_paths","_invalid_schema","options","infer_options","_view_cache","set_element","_virtual_scrolling_disabled","hasAttribute","create_shadow_dom","auto","override","_table_clip"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {METADATA_MAP} from \"./constants\";\r\nimport {DatagridTableViewModel} from \"./table\";\r\nimport {DatagridViewEventModel} from \"./events\";\r\n\r\n/**\r\n * Datagrid's \"public\" API.  See the `superstore-custom-grid.html` simple\r\n * example.\r\n *\r\n * @class DatagridViewEventModel\r\n * @extends {DatagridVirtualTableViewModel}\r\n */\r\nexport class DatagridViewModel extends DatagridViewEventModel {\r\n    /**\r\n     * Returns the metadata object associated with a `<td>` or `<th>`.  When\r\n     * an `perspective-datagrid-after-update` event fires, use this method\r\n     * to look up the Perspective data associated with a `<table>`s DOM cells.\r\n     *\r\n     * @param {*} td\r\n     * @returns a metadata object.\r\n     * @memberof DatagridViewModel\r\n     */\r\n    get_meta(td) {\r\n        return METADATA_MAP.get(td);\r\n    }\r\n\r\n    /**\r\n     * Gets all `<td>` elements modified in this render.  This is equivalent to\r\n     * `element.querySlectorAll(\"td\");\r\n     *\r\n     * @returns\r\n     * @memberof DatagridViewModel\r\n     */\r\n    get_tds() {\r\n        return this.table_model.body.cells.flat(1);\r\n    }\r\n\r\n    /**\r\n     * Gets all `<th>` elements modified in this render.  This is equivalent to\r\n     * `element.querySlectorAll(\"th\");\r\n     *\r\n     * @returns\r\n     * @memberof DatagridViewModel\r\n     */\r\n    get_ths() {\r\n        return this.table_model.body.cells.flat(1);\r\n    }\r\n\r\n    /**\r\n     * Clear this renderer.\r\n     *\r\n     * @memberof DatagridViewModel\r\n     */\r\n    clear() {\r\n        this._sticky_container.innerHTML = \"<table></table>\";\r\n        if (this._render_element) {\r\n            if (this._render_element !== this.table_model.table.parentElement) {\r\n                this._render_element.appendChild(this._sticky_container);\r\n            }\r\n        } else {\r\n            this.appendChild(this.table_model.table);\r\n        }\r\n    }\r\n\r\n    reset_viewport() {\r\n        this._start_row = undefined;\r\n        this._end_row = undefined;\r\n        this._start_col = undefined;\r\n        this._end_col = undefined;\r\n    }\r\n\r\n    reset_size() {\r\n        this._container_size = undefined;\r\n    }\r\n\r\n    reset_scroll() {\r\n        this._column_sizes.indices = [];\r\n        this._scroll_container.scrollTop = 0;\r\n        this._scroll_container.scrollLeft = 0;\r\n        this.reset_viewport();\r\n    }\r\n\r\n    async set_view(view) {\r\n        const config = await view.get_config();\r\n        const table_schema = await this._render_element.table.schema();\r\n        const schema = await view.schema();\r\n        const column_paths = await view.column_paths();\r\n        this._invalid_schema = true;\r\n        const options = this.infer_options(config);\r\n        this._view_cache = {view, config, column_paths, schema, table_schema};\r\n        return options;\r\n    }\r\n\r\n    set_element(_render_element) {\r\n        if (_render_element) {\r\n            this._render_element = _render_element;\r\n        }\r\n        this._virtual_scrolling_disabled = _render_element.hasAttribute(\"disable-virtual-datagrid\");\r\n        this.create_shadow_dom();\r\n        this._column_sizes = {auto: {}, override: {}, indices: []};\r\n        this.table_model = new DatagridTableViewModel(this._table_clip, this._column_sizes, this._sticky_container);\r\n        if (!this.table_model) return;\r\n        if (this._render_element) {\r\n            if (this._render_element !== this.table_model.table.parentElement) {\r\n                this._render_element.appendChild(this._sticky_container);\r\n            }\r\n        } else {\r\n            this.appendChild(this.table_model.table);\r\n        }\r\n    }\r\n}\r\n"],"file":"datagrid.js"}