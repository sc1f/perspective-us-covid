{"version":3,"sources":["../../src/js/table.js"],"names":["DatagridHeaderViewModel","DatagridBodyViewModel","column_path_2_type","html","DatagridTableViewModel","constructor","table_clip","column_sizes","element","innerHTML","table","children","thead","tbody","_column_sizes","header","body","fragment","document","createDocumentFragment","num_columns","_get_row","Math","max","rows","length","row_container","autosize_cells","last_cells","cell","metadata","shift","offsetWidth","row_height","offsetHeight","indices","cidx","is_override","override","hasOwnProperty","size_key","auto","draw","container_size","view_cache","selected_id","preserve_width","viewport","width","container_width","height","container_height","view","config","column_paths","schema","table_schema","visible_columns","slice","start_col","columns_data","to_columns","start_row","ridx_offset","cidx_offset","depth","row_pivots","id_column","view_state","viewport_width","cont_body","column_name","join","type","map","x","column_data","column_state","cont_head","td","th","push","missing_cidx","end_col","new_col","undefined","clean","ridx"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {DatagridHeaderViewModel} from \"./thead\";\r\nimport {DatagridBodyViewModel} from \"./tbody\";\r\nimport {column_path_2_type, html} from \"./utils\";\r\n\r\n/**\r\n * <table> view model.  In order to handle unknown column width when `draw()`\r\n * is called, this model will iteratively fetch more data to fill in columns\r\n * until the page is complete, and makes some column viewport estimations\r\n * when this information is not availble.\r\n *\r\n * @class DatagridTableViewModel\r\n */\r\nexport class DatagridTableViewModel {\r\n    constructor(table_clip, column_sizes, element) {\r\n        element.innerHTML = html`\r\n            <table cellspacing=\"0\">\r\n                <thead></thead>\r\n                <tbody></tbody>\r\n            </table>\r\n        `;\r\n        const [table] = element.children;\r\n        const [thead, tbody] = table.children;\r\n        this.table = table;\r\n        this._column_sizes = column_sizes;\r\n        this.header = new DatagridHeaderViewModel(column_sizes, table_clip, thead);\r\n        this.body = new DatagridBodyViewModel(column_sizes, table_clip, tbody);\r\n        this.fragment = document.createDocumentFragment();\r\n    }\r\n\r\n    num_columns() {\r\n        return this.header._get_row(Math.max(0, this.header.rows?.length - 1 || 0)).row_container.length;\r\n    }\r\n\r\n    /**\r\n     * Calculate amendments to auto size from this render pass.\r\n     *\r\n     * @param {*} last_cells\r\n     * @param {*} {columns, column_pivots}\r\n     * @memberof DatagridTableViewModel\r\n     */\r\n    autosize_cells(last_cells) {\r\n        while (last_cells.length > 0) {\r\n            const [cell, metadata] = last_cells.shift();\r\n            const offsetWidth = cell.offsetWidth;\r\n            this._column_sizes.row_height = this._column_sizes.row_height || cell.offsetHeight;\r\n            this._column_sizes.indices[metadata.cidx] = offsetWidth;\r\n            const is_override = this._column_sizes.override.hasOwnProperty(metadata.size_key);\r\n            if (offsetWidth && !is_override) {\r\n                this._column_sizes.auto[metadata.size_key] = offsetWidth;\r\n            }\r\n        }\r\n    }\r\n\r\n    async draw(container_size, view_cache, selected_id, preserve_width, viewport) {\r\n        const {width: container_width, height: container_height} = container_size;\r\n        const {view, config, column_paths, schema, table_schema} = view_cache;\r\n        const visible_columns = column_paths.slice(viewport.start_col);\r\n        const columns_data = await view.to_columns(viewport);\r\n        const {start_row: ridx_offset, start_col: cidx_offset} = viewport;\r\n        const depth = config.row_pivots.length;\r\n        const id_column = columns_data[\"__ID__\"];\r\n        const view_state = {viewport_width: 0, selected_id, depth, ridx_offset, cidx_offset, row_height: this._column_sizes.row_height};\r\n\r\n        let cont_body,\r\n            cidx = 0,\r\n            last_cells = [];\r\n        if (column_paths[0] === \"__ROW_PATH__\") {\r\n            const column_name = config.row_pivots.join(\",\");\r\n            const type = config.row_pivots.map(x => table_schema[x]);\r\n            const column_data = columns_data[\"__ROW_PATH__\"];\r\n            const column_state = {column_name, cidx: 0, column_data, id_column, type};\r\n            const cont_head = this.header.draw(config, column_name, \"\", type, 0);\r\n            cont_body = this.body.draw(container_height, column_state, {...view_state, cidx_offset: 0});\r\n            view_state.selected_id = false;\r\n            view_state.viewport_width += this._column_sizes.indices[0] || cont_body.td?.offsetWidth || cont_head.th.offsetWidth;\r\n            view_state.row_height = view_state.row_height || cont_body.row_height;\r\n            cidx++;\r\n            if (!preserve_width) {\r\n                last_cells.push([cont_body.td || cont_head.th, cont_body.metadata || cont_head.metadata]);\r\n            }\r\n        }\r\n\r\n        try {\r\n            while (cidx < visible_columns.length) {\r\n                const column_name = visible_columns[cidx];\r\n                if (!columns_data[column_name]) {\r\n                    let missing_cidx = Math.max(viewport.end_col, 0);\r\n                    viewport.start_col = missing_cidx;\r\n                    viewport.end_col = missing_cidx + 1;\r\n                    const new_col = await view.to_columns(viewport);\r\n                    if (!(column_name in new_col)) {\r\n                        new_col[column_name] = [];\r\n                    }\r\n\r\n                    columns_data[column_name] = new_col[column_name];\r\n                }\r\n\r\n                const type = column_path_2_type(schema, column_name);\r\n                const column_data = columns_data[column_name];\r\n                const column_state = {column_name, cidx, column_data, id_column, type};\r\n                const cont_head = this.header.draw(config, undefined, column_name, type, cidx + cidx_offset);\r\n                cont_body = this.body.draw(container_height, column_state, view_state);\r\n                view_state.selected_id = false;\r\n                view_state.viewport_width += this._column_sizes.indices[cidx + cidx_offset] || cont_body.td?.offsetWidth || cont_head.th.offsetWidth;\r\n                view_state.row_height = view_state.row_height || cont_body.row_height;\r\n                cidx++;\r\n                if (!preserve_width) {\r\n                    last_cells.push([cont_body.td || cont_head.th, cont_body.metadata || cont_head.metadata]);\r\n                }\r\n\r\n                if (view_state.viewport_width > container_width) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return last_cells;\r\n        } finally {\r\n            this.body.clean({ridx: cont_body?.ridx || 0, cidx});\r\n            this.header.clean();\r\n        }\r\n    }\r\n}\r\n"],"file":"table.js"}