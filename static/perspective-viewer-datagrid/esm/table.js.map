{"version":3,"sources":["../../src/js/table.js"],"names":["DatagridHeaderViewModel","DatagridBodyViewModel","column_path_2_type","DatagridTableViewModel","constructor","table_clip","column_sizes","table","document","createElement","setAttribute","thead","appendChild","tbody","_column_sizes","header","body","fragment","createDocumentFragment","num_columns","_get_row","Math","max","rows","length","row_container","autosize_cells","last_cells","cell","metadata","shift","offsetWidth","row_height","offsetHeight","indices","cidx","is_override","override","hasOwnProperty","size_key","auto","draw","container_size","view_cache","selected_id","is_resize","viewport","width","container_width","height","container_height","view","config","column_paths","schema","table_schema","visible_columns","slice","start_col","columns_data","to_columns","sidx","id_column","cont_body","cont_head","alias","row_pivots","join","types","map","x","start_row","push","td","th","column_name","missing_cidx","end_col","new_col","column_data","type","undefined","sort","clean","ridx"],"mappings":"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","sourcesContent":["/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport {DatagridHeaderViewModel} from \"./thead\";\r\nimport {DatagridBodyViewModel} from \"./tbody\";\r\nimport {column_path_2_type} from \"./utils\";\r\n\r\n/**\r\n * <table> view model.  In order to handle unknown column width when `draw()`\r\n * is called, this model will iteratively fetch more data to fill in columns\r\n * until the page is complete, and makes some column viewport estimations\r\n * when this information is not availble.\r\n *\r\n * @class DatagridTableViewModel\r\n */\r\nexport class DatagridTableViewModel {\r\n    constructor(table_clip, column_sizes) {\r\n        const table = document.createElement(\"table\");\r\n        table.setAttribute(\"cellspacing\", 0);\r\n\r\n        const thead = document.createElement(\"thead\");\r\n        table.appendChild(thead);\r\n\r\n        const tbody = document.createElement(\"tbody\");\r\n        table.appendChild(tbody);\r\n\r\n        this.table = table;\r\n        this._column_sizes = column_sizes;\r\n        this.header = new DatagridHeaderViewModel(column_sizes, table_clip, thead);\r\n        this.body = new DatagridBodyViewModel(column_sizes, table_clip, tbody);\r\n        this.fragment = document.createDocumentFragment();\r\n    }\r\n\r\n    num_columns() {\r\n        return this.header._get_row(Math.max(0, this.header.rows?.length - 1 || 0)).row_container.length;\r\n    }\r\n\r\n    /**\r\n     * Calculate amendments to auto size from this render pass.\r\n     *\r\n     * @param {*} last_cells\r\n     * @param {*} {columns, column_pivots}\r\n     * @memberof DatagridTableViewModel\r\n     */\r\n    autosize_cells(last_cells) {\r\n        while (last_cells.length > 0) {\r\n            const [cell, metadata] = last_cells.shift();\r\n            const offsetWidth = cell.offsetWidth;\r\n            this._column_sizes.row_height = this._column_sizes.row_height || cell.offsetHeight;\r\n            this._column_sizes.indices[metadata.cidx] = offsetWidth;\r\n            const is_override = this._column_sizes.override.hasOwnProperty(metadata.size_key);\r\n            if (offsetWidth && !is_override) {\r\n                this._column_sizes.auto[metadata.size_key] = offsetWidth;\r\n            }\r\n        }\r\n    }\r\n\r\n    async draw(container_size, view_cache, selected_id, is_resize, viewport) {\r\n        const {width: container_width, height: container_height} = container_size;\r\n        const {view, config, column_paths, schema, table_schema} = view_cache;\r\n        const visible_columns = column_paths.slice(viewport.start_col);\r\n        const columns_data = await view.to_columns(viewport);\r\n        const {start_col: sidx} = viewport;\r\n        const id_column = columns_data[\"__ID__\"];\r\n        let row_height = this._column_sizes.row_height;\r\n        let cont_body,\r\n            cont_head,\r\n            cidx = 0,\r\n            width = 0,\r\n            last_cells = [];\r\n        if (column_paths[0] === \"__ROW_PATH__\") {\r\n            const alias = config.row_pivots.join(\",\");\r\n            const types = config.row_pivots.map(x => table_schema[x]);\r\n            cont_head = this.header.draw(config, alias, \"\", types);\r\n            cont_body = this.body.draw(container_height, alias, 0, columns_data[\"__ROW_PATH__\"], id_column, selected_id, types, config.row_pivots.length, viewport.start_row, 0, row_height);\r\n            selected_id = false;\r\n            if (!is_resize) {\r\n                last_cells.push([cont_body.td || cont_head.th, cont_body.metadata || cont_head.metadata]);\r\n            }\r\n            row_height = row_height || cont_body.row_height;\r\n            width += this._column_sizes.indices[0] || cont_body.td?.offsetWidth || cont_head.th.offsetWidth;\r\n            cidx++;\r\n        }\r\n\r\n        try {\r\n            while (cidx < visible_columns.length) {\r\n                const column_name = visible_columns[cidx];\r\n                if (!columns_data[column_name]) {\r\n                    let missing_cidx = Math.max(viewport.end_col, 0);\r\n                    viewport.start_col = missing_cidx;\r\n                    viewport.end_col = missing_cidx + 1;\r\n                    const new_col = await view.to_columns(viewport);\r\n                    if (!(column_name in new_col)) {\r\n                        new_col[column_name] = [];\r\n                    }\r\n\r\n                    columns_data[column_name] = new_col[column_name];\r\n                }\r\n\r\n                const column_data = columns_data[column_name];\r\n                const type = column_path_2_type(schema, column_name);\r\n                cont_head = this.header.draw(config, undefined, column_name, type, config.sort, cont_head);\r\n                cont_body = this.body.draw(container_height, column_name, cidx, column_data, id_column, selected_id, type, undefined, viewport.start_row, sidx, cont_body?.row_height);\r\n                selected_id = false;\r\n                width += this._column_sizes.indices[cidx + sidx] || cont_body.td?.offsetWidth || cont_head.th.offsetWidth;\r\n                if (!is_resize) {\r\n                    last_cells.push([cont_body.td || cont_head.th, cont_body.metadata || cont_head.metadata]);\r\n                }\r\n\r\n                row_height = row_height || cont_body.row_height;\r\n                cidx++;\r\n                if (width > container_width) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return last_cells;\r\n        } finally {\r\n            this.body.clean({ridx: cont_body?.ridx || 0, cidx});\r\n            if (cont_head) {\r\n                this.header.clean(cont_head);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"table.js"}