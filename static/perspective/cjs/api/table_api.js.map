{"version":3,"sources":["../../../src/js/api/table_api.js"],"names":["name","options","Math","bindall","data","msg","cmd","args","arrow","mode","table","proxy_table","async_queue","subscribe","unsubscribe","method","f"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {unsubscribe, subscribe, async_queue} from \"./dispatch.js\";\nimport {view} from \"./view_api.js\";\nimport {bindall} from \"../utils.js\";\n\n/**\n * Construct a proxy for the table object by creating a \"table\" message and\n * sending it through the worker.\n *\n * @param {*} worker\n * @param {*} data\n * @param {*} options\n */\nexport function table(worker, data, options) {\n    this._worker = worker;\n    let name = options.name || Math.random() + \"\";\n    this._name = name;\n    bindall(this);\n    if (data.to_arrow) {\n        var msg = {\n            cmd: \"table\",\n            name: name,\n            args: [],\n            options: options || {}\n        };\n        this._worker.post(msg);\n        data.to_arrow().then(arrow => {\n            var msg = {\n                cmd: \"table\",\n                name: name,\n                args: [arrow],\n                options: options || {}\n            };\n            this._worker.post(msg);\n            data.on_update(this.update, {mode: \"row\"});\n        });\n    } else {\n        var msg = {\n            cmd: \"table\",\n            name: name,\n            args: [data],\n            options: options || {}\n        };\n        this._worker.post(msg);\n    }\n}\n\ntable.prototype.type = \"table\";\n\n/**\n * Create a reference to a Perspective table at `worker` for use by remote\n * clients.\n *\n * @param {worker} worker the Web Worker at which the table is located.\n * @param {String} name a unique name for the table.\n */\nexport function proxy_table(worker, name) {\n    this._worker = worker;\n    this._name = name;\n}\n\nproxy_table.prototype = table.prototype;\n\n// Dispatch table methods that create new objects to the worker\ntable.prototype.view = function(config) {\n    return new view(this._worker, this._name, config);\n};\n\n// Dispatch table methods that do not create new objects (getters, setters etc.)\n// to the queue for processing.\n\ntable.prototype.compute = async_queue(\"compute\", \"table_method\");\n\ntable.prototype.schema = async_queue(\"schema\", \"table_method\");\n\ntable.prototype.computed_schema = async_queue(\"computed_schema\", \"table_method\");\n\ntable.prototype.get_computation_input_types = async_queue(\"get_computation_input_types\", \"table_method\");\n\ntable.prototype.get_computed_functions = async_queue(\"get_computed_functions\", \"table_method\");\n\ntable.prototype.is_valid_filter = async_queue(\"is_valid_filter\", \"table_method\");\n\ntable.prototype.size = async_queue(\"size\", \"table_method\");\n\ntable.prototype.columns = async_queue(\"columns\", \"table_method\");\n\ntable.prototype.clear = async_queue(\"clear\", \"table_method\");\n\ntable.prototype.replace = async_queue(\"replace\", \"table_method\");\n\ntable.prototype.delete = async_queue(\"delete\", \"table_method\");\n\ntable.prototype.on_delete = subscribe(\"on_delete\", \"table_method\", true);\n\ntable.prototype.remove = async_queue(\"remove\", \"table_method\");\n\ntable.prototype.remove_delete = unsubscribe(\"remove_delete\", \"table_method\", true);\n\ntable.prototype.update = function(data) {\n    return new Promise((resolve, reject) => {\n        var msg = {\n            name: this._name,\n            cmd: \"table_method\",\n            method: \"update\",\n            args: [data]\n        };\n        this._worker.post(msg, resolve, reject, false);\n    });\n};\n\ntable.prototype.execute = function(f) {\n    var msg = {\n        cmd: \"table_execute\",\n        name: this._name,\n        f: f.toString()\n    };\n    this._worker.post(msg);\n};\n"],"file":"table_api.js"}