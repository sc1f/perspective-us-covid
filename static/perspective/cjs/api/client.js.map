{"version":3,"sources":["../../../src/js/api/client.js"],"names":["constructor","initialized","value","transferable","msg_id","handlers","messages","bindall","unsubscribe","Object","post","keep_alive","resolve","msg","initialize_profile_thread","id","cmd","send","open_table","open_view","_handle","event","document","window","msgs","e","handler","table","options","terminate"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {table, proxy_table} from \"./table_api.js\";\nimport {proxy_view} from \"./view_api.js\";\nimport {bindall} from \"../utils.js\";\n\n/**\n * Perspective's worker API handles and processes asynchronous messages,\n * interfacing with the Perspective host class.  Child classes must implement\n * the `send()` interface, which defines how messages are dispatched in\n * different contexts.  `handlers` is a dictionary of resolve/reject callbacks\n * for each method the worker receives.\n *\n * @export\n */\nexport class Client {\n    constructor() {\n        this._initialized = false;\n        this._worker = {\n            initialized: {value: false},\n            transferable: false,\n            msg_id: 0,\n            handlers: {},\n            messages: []\n        };\n        bindall(this);\n    }\n\n    /**\n     * Remove a listener for a Perspective-generated event.\n     */\n    unsubscribe(cmd, handler) {\n        for (let key of Object.keys(this._worker.handlers)) {\n            if (this._worker.handlers[key].resolve === handler) {\n                delete this._worker.handlers[key];\n            }\n        }\n    }\n\n    /**\n     * Process an asynchronous message.\n     */\n    post(msg, resolve, reject, keep_alive = false) {\n        if (resolve || reject) {\n            this._worker.handlers[++this._worker.msg_id] = {resolve, reject, keep_alive};\n        }\n        msg.id = this._worker.msg_id;\n        if (this._worker.initialized.value) {\n            this.send(msg);\n        } else {\n            this._worker.messages.push(() => this.send(msg));\n        }\n    }\n\n    initialize_profile_thread() {\n        if (this._worker.initialized.value) {\n            this.send({id: -1, cmd: \"init_profile_thread\"});\n        } else {\n            this._worker.messages.push(() => this.send({id: -1, cmd: \"init_profile_thread\"}));\n        }\n    }\n\n    /**\n     * Must be implemented in order to transport commands to the server.\n     */\n    send() {\n        throw new Error(\"send() not implemented\");\n    }\n\n    /**\n     * Given the name of a table that is hosted on the server (e.g. using\n     * `perspective-python` or `perspective` in NodeJS), return a `table`\n     * instance that sends all operations and instructions to the `table` on the\n     * server.\n     *\n     * @param {string} name\n     */\n    open_table(name) {\n        return new proxy_table(this, name);\n    }\n\n    open_view(name) {\n        return new proxy_view(this, name);\n    }\n\n    /**\n     * Handle a command from Perspective. If the Client is not initialized,\n     * initialize it and dispatch the `perspective-ready` event.\n     *\n     * Otherwise, reject or resolve the incoming command.\n     */\n    _handle(e) {\n        if (!this._worker.initialized.value) {\n            if (!this._initialized && typeof document !== \"undefined\" && document && typeof window !== undefined && window) {\n                try {\n                    const event = document.createEvent(\"Event\");\n                    event.initEvent(\"perspective-ready\", false, true);\n                    window.dispatchEvent(event);\n                } catch (e) {}\n                this._initialized = true;\n            }\n\n            const msgs = this._worker.messages;\n            this._worker.initialized.value = true;\n            this._worker.messages = [];\n\n            if (msgs) {\n                for (const m in msgs) {\n                    if (msgs.hasOwnProperty(m)) {\n                        msgs[m]();\n                    }\n                }\n            }\n        }\n        if (e.data.id) {\n            var handler = this._worker.handlers[e.data.id];\n            if (handler) {\n                if (e.data.error) {\n                    handler.reject(e.data.error);\n                } else {\n                    handler.resolve(e.data.data);\n                }\n                if (!handler.keep_alive) {\n                    delete this._worker.handlers[e.data.id];\n                }\n            }\n        }\n    }\n\n    table(data, options) {\n        return new table(this, data, options || {});\n    }\n\n    terminate() {\n        this._worker.terminate();\n        this._worker = undefined;\n    }\n}\n"],"file":"client.js"}