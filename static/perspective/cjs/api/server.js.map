{"version":3,"sources":["../../../src/js/api/server.js"],"names":["obj","Object","key","error","constructor","init","msg","override_config","post","clear_views","console","length","process","msgs","eval","g","id","data","f","process_error","error_to_json","process_subscribe","callback","ev","result","method","remove_method","JSON","process_method_call_response","process_method_call","message"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {override_config} from \"../config\";\n\nfunction error_to_json(error) {\n    const obj = {};\n    if (typeof error !== \"string\") {\n        Object.getOwnPropertyNames(error).forEach(key => {\n            obj[key] = error[key];\n        }, error);\n    } else {\n        obj[\"message\"] = error;\n    }\n    return obj;\n}\n\n/**\n * The base class for Perspective's async API. It initializes and keeps track of\n * tables, views, and processes messages from the user into Perspective.\n *\n * Child classes must implement the `post()` interface, which defines how the\n * worker sends messages.\n */\nexport class Server {\n    constructor(perspective) {\n        this.perspective = perspective;\n        this._tables = {};\n        this._views = {};\n\n        this._callback_cache = new Map();\n    }\n\n    /**\n     * `Server` must be extended and the `post` method implemented before it can\n     * be initialized.\n     */\n    init(msg) {\n        if (msg.config) {\n            override_config(msg.config);\n        }\n        this.post(msg);\n    }\n\n    post() {\n        throw new Error(\"post() not implemented!\");\n    }\n\n    /**\n     * Garbage collect un-needed views.\n     */\n    clear_views(client_id) {\n        for (let key of Object.keys(this._views)) {\n            if (this._views[key].client_id === client_id) {\n                try {\n                    this._views[key].delete();\n                } catch (e) {\n                    console.error(e);\n                }\n                delete this._views[key];\n            }\n        }\n        console.debug(`GC ${Object.keys(this._views).length} views in memory`);\n    }\n\n    /**\n     * Given a message, execute its instructions. This method is the dispatcher\n     * for all Perspective actions, including table/view creation, deletion, and\n     * all method calls to/from the table and view.\n     *\n     * @param {*} msg an Object containing `cmd` (a String instruction) and\n     * associated data for that instruction\n     * @param {*} client_id\n     */\n    process(msg, client_id) {\n        switch (msg.cmd) {\n            case \"init_profile_thread\":\n                this.perspective.initialize_profile_thread();\n                break;\n            case \"init\":\n                this.init(msg);\n                break;\n            case \"table\":\n                if (typeof msg.args[0] === \"undefined\") {\n                    this._tables[msg.name] = [];\n                } else {\n                    const msgs = this._tables[msg.name];\n                    this._tables[msg.name] = this.perspective.table(msg.args[0], msg.options);\n                    if (msgs) {\n                        for (const msg of msgs) {\n                            this.process(msg);\n                        }\n                    }\n                }\n                break;\n            case \"table_generate\":\n                let g;\n                eval(\"g = \" + msg.args);\n                g(function(tbl) {\n                    this._tables[msg.name] = tbl;\n                    this.post({\n                        id: msg.id,\n                        data: \"created!\"\n                    });\n                });\n                break;\n            case \"table_execute\":\n                let f;\n                eval(\"f = \" + msg.f);\n                f(this._tables[msg.name]);\n                break;\n            case \"table_method\":\n            case \"view_method\":\n                this.process_method_call(msg);\n                break;\n            case \"view\":\n                // create a new view and track it with `client_id`\n                this._views[msg.view_name] = this._tables[msg.table_name].view(msg.config);\n                this._views[msg.view_name].client_id = client_id;\n                break;\n        }\n    }\n\n    /**\n     * Send an error to the client.\n     */\n    process_error(msg, error) {\n        this.post({\n            id: msg.id,\n            error: error_to_json(error)\n        });\n    }\n\n    /**\n     * Execute a subscription to a Perspective event.\n     */\n    process_subscribe(msg, obj) {\n        try {\n            let callback;\n            if (msg.method.slice(0, 2) === \"on\") {\n                callback = ev => {\n                    let result = {\n                        id: msg.id,\n                        data: ev\n                    };\n                    try {\n                        // post transferable data for arrow\n                        if (msg.args && msg.args[0]) {\n                            if (msg.method === \"on_update\" && msg.args[0][\"mode\"] === \"row\") {\n                                this.post(result, [ev]);\n                                return;\n                            }\n                        }\n\n                        this.post(result);\n                    } catch (e) {\n                        console.error(`Removing failed callback to \\`${msg.method}()\\` (presumably due to failed connection)`);\n                        const remove_method = msg.method.substring(3);\n                        obj[`remove_${remove_method}`](callback);\n                    }\n                };\n                if (msg.callback_id) {\n                    this._callback_cache.set(msg.callback_id, callback);\n                }\n            } else if (msg.callback_id) {\n                callback = this._callback_cache.get(msg.callback_id);\n                this._callback_cache.delete(msg.callback_id);\n            }\n            if (callback) {\n                obj[msg.method](callback, ...msg.args);\n            } else {\n                console.error(`Callback not found for remote call \"${JSON.stringify(msg)}\"`);\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n\n    process_method_call_response(msg, result) {\n        if (msg.method === \"delete\") {\n            delete this._views[msg.name];\n        }\n        if (msg.method === \"to_arrow\") {\n            this.post(\n                {\n                    id: msg.id,\n                    data: result\n                },\n                [result]\n            );\n        } else {\n            this.post({\n                id: msg.id,\n                data: result\n            });\n        }\n    }\n\n    /**\n     * Given a call to a table or view method, process it.\n     *\n     * @param {Object} msg\n     */\n    process_method_call(msg) {\n        let obj, result;\n        msg.cmd === \"table_method\" ? (obj = this._tables[msg.name]) : (obj = this._views[msg.name]);\n\n        if (!obj && msg.cmd === \"view_method\") {\n            // cannot have a host without a table, but can have a host without a\n            // view\n            this.process_error(msg, {message: \"View is not initialized\"});\n            return;\n        }\n\n        if (obj && obj.push) {\n            obj.push(msg);\n            return;\n        }\n\n        try {\n            if (msg.subscribe) {\n                this.process_subscribe(msg, obj);\n                return;\n            } else {\n                result = obj[msg.method].apply(obj, msg.args);\n                if (result instanceof Promise) {\n                    result.then(result => this.process_method_call_response(msg, result)).catch(error => this.process_error(msg, error));\n                } else {\n                    this.process_method_call_response(msg, result);\n                }\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n}\n"],"file":"server.js"}