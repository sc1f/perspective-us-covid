{"version":3,"sources":["../../../src/js/config/__node.js"],"names":["NAMES","module","REQUIRE","path","fs","process","curr","candidate","root","sep","name","json","JSON","mod"],"mappings":";;;AAAA;;;;;;;;;;AASA,MAAMA,KAAK,GAAG,CAAA,uBAAA,EAAA,yBAAA,EAAd,cAAc,CAAd;;AAEAC,MAAM,CAANA,OAAAA,CAAAA,OAAAA,GAAyB,SAAA,eAAA,GAA2B;AAChD;AACA,QAAMC,OAAO,GAAG,OAAA,uBAAA,KAAA,WAAA,GAAA,uBAAA,GAA2ED,MAAM,CAAjG,OAAA;AACA,QAAME,IAAI,GAAGD,OAAO,CAApB,MAAoB,CAApB;AACA,QAAME,EAAE,GAAGF,OAAO,CAAlB,IAAkB,CAAlB;AACA,QAAM,CAAA,IAAA,EAAO,GAAP,IAAA,IAAkBG,OAAO,CAAPA,GAAAA,GAAAA,KAAAA,CAAoBF,IAAI,CAAhD,GAAwBE,CAAxB;;AACA,SAAOC,IAAI,CAAJA,MAAAA,GAAP,CAAA,EAAwB;AACpB,SAAK,MAAL,IAAA,IAAA,KAAA,EAA0B;AACtB,YAAMC,SAAS,GAAI,GAAEC,IAAK,GAAEL,IAAI,CAACM,GAAI,GAAEN,IAAI,CAAJA,IAAAA,CAAU,GAAVA,IAAAA,EAAAA,IAAAA,CAAvC,EAAA;;AACA,UAAIC,EAAE,CAAFA,UAAAA,CAAJ,SAAIA,CAAJ,EAA8B;AAC1B,YAAIM,IAAI,CAAJA,QAAAA,CAAJ,MAAIA,CAAJ,EAA2B;AACvB,gBAAMC,IAAI,GAAGC,IAAI,CAAJA,KAAAA,CAAWR,EAAE,CAAFA,YAAAA,CAAxB,SAAwBA,CAAXQ,CAAb;;AACA,cAAIF,IAAI,KAAR,cAAA,EAA6B;AACzB,gBAAIC,IAAI,CAAR,WAAA,EAAsB;AAClB,qBAAOA,IAAI,CAAX,WAAA;AACH;AAHL,WAAA,MAIO;AACH,mBAAA,IAAA;AACH;AARL,SAAA,MASO;AACH,gBAAME,GAAG,GAAGX,OAAO,CAAnB,SAAmB,CAAnB;AACA,iBAAOW,GAAG,CAAHA,OAAAA,IAAP,GAAA;AACH;AACJ;AACJ;;AACDP,IAAAA,IAAI,CAAJA,GAAAA;AACH;AA1BLL,CAAAA","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nconst NAMES = [\"perspective.config.js\", \"perspective.config.json\", \"package.json\"];\n\nmodule.exports.default = function get_config_file() {\n    // eslint-disable-next-line no-undef\n    const REQUIRE = typeof __non_webpack_require__ !== \"undefined\" ? __non_webpack_require__ : module.require;\n    const path = REQUIRE(\"path\");\n    const fs = REQUIRE(\"fs\");\n    const [root, ...curr] = process.cwd().split(path.sep);\n    while (curr.length > 0) {\n        for (const name of NAMES) {\n            const candidate = `${root}${path.sep}${path.join(...curr, name)}`;\n            if (fs.existsSync(candidate)) {\n                if (name.endsWith(\"json\")) {\n                    const json = JSON.parse(fs.readFileSync(candidate));\n                    if (name === \"package.json\") {\n                        if (json.perspective) {\n                            return json.perspective;\n                        }\n                    } else {\n                        return json;\n                    }\n                } else {\n                    const mod = REQUIRE(candidate);\n                    return mod.default || mod;\n                }\n            }\n        }\n        curr.pop();\n    }\n};\n"],"file":"__node.js"}