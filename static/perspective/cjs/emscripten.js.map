{"version":3,"sources":["../../src/js/emscripten.js"],"names":["extract_vector","extracted","i","vector","item","extract_map","keys","map","key","fill_vector"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;AASA;;;AAIO,MAAMA,cAAc,GAAG,UAAA,MAAA,EAAiB;AAC3C;AACA,MAAIC,SAAS,GAAb,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,MAAM,CAA1B,IAAoBA,EAApB,EAAmCD,CAAnC,EAAA,EAAwC;AACpC,QAAIE,IAAI,GAAGD,MAAM,CAANA,GAAAA,CAAX,CAAWA,CAAX;AACAF,IAAAA,SAAS,CAATA,IAAAA,CAAAA,IAAAA;AACH;;AACDE,EAAAA,MAAM,CAANA,MAAAA;AACA,SAAA,SAAA;AARG,CAAA;;;;AAWA,MAAME,WAAW,GAAG,UAAA,GAAA,EAAc;AACrC;AACA,MAAIJ,SAAS,GAAb,EAAA;AACA,MAAIK,IAAI,GAAGC,GAAG,CAAd,IAAWA,EAAX;;AACA,OAAK,IAAIL,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGI,IAAI,CAAxB,IAAoBA,EAApB,EAAiCJ,CAAjC,EAAA,EAAsC;AAClC,QAAIM,GAAG,GAAGF,IAAI,CAAJA,GAAAA,CAAV,CAAUA,CAAV;AACAL,IAAAA,SAAS,CAATA,GAAS,CAATA,GAAiBM,GAAG,CAAHA,GAAAA,CAAjBN,GAAiBM,CAAjBN;AACH;;AACDM,EAAAA,GAAG,CAAHA,MAAAA;AACAD,EAAAA,IAAI,CAAJA,MAAAA;AACA,SAAA,SAAA;AAVG,CAAA;AAaP;;;;;;;;;;;;;;AAUO,MAAMG,WAAW,GAAG,UAAA,MAAA,EAAA,GAAA,EAAsB;AAC7C,OAAK,MAAL,IAAA,IAAA,GAAA,EAAwB;AACpBN,IAAAA,MAAM,CAANA,SAAAA,CAAAA,IAAAA;AACH;;AACD,SAAA,MAAA;AAJG,CAAA","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/** Translation layer Interface between C++ and JS to handle conversions/data\n * structures that were previously handled in non-portable perspective.js\n */\n\nexport const extract_vector = function(vector) {\n    // handles deletion already - do not call delete() on the input vector again\n    let extracted = [];\n    for (let i = 0; i < vector.size(); i++) {\n        let item = vector.get(i);\n        extracted.push(item);\n    }\n    vector.delete();\n    return extracted;\n};\n\nexport const extract_map = function(map) {\n    // handles deletion already - do not call delete() on the input map again\n    let extracted = {};\n    let keys = map.keys();\n    for (let i = 0; i < keys.size(); i++) {\n        let key = keys.get(i);\n        extracted[key] = map.get(key);\n    }\n    map.delete();\n    keys.delete();\n    return extracted;\n};\n\n/**\n * Given a C++ vector constructed in Emscripten, fill it with data. Assume that\n * data types are already validated, thus Emscripten will throw an error if the\n * vector is filled with the wrong type of data.\n *\n * @param {*} vector the `std::vector` to be filled\n * @param {Array} arr the `Array` from which to draw data\n *\n * @private\n */\nexport const fill_vector = function(vector, arr) {\n    for (const elem of arr) {\n        vector.push_back(elem);\n    }\n    return vector;\n};\n"],"file":"emscripten.js"}