{"version":3,"sources":["../../src/js/view_formatters.js"],"names":["jsonFormatter","initDataValue","initRowValue","initColumnValue","row","setColumnValue","addColumnValue","addRow","data","formatData","slice","csvFormatter","colName","papaparse","jsonTableFormatter","new_data"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport papaparse from \"papaparse\";\n\nconst jsonFormatter = {\n    initDataValue: () => [],\n    initRowValue: () => ({}),\n    initColumnValue: (data, row, colName) => (row[colName] = []),\n    setColumnValue: (data, row, colName, value) => (row[colName] = value),\n    addColumnValue: (data, row, colName, value) => row[colName].unshift(value),\n    addRow: (data, row) => data.push(row),\n    formatData: data => data,\n    slice: (data, start) => data.slice(start)\n};\n\nconst csvFormatter = Object.assign({}, jsonFormatter, {\n    addColumnValue: (data, row, colName, value) => row[colName.split(\"|\").join(\",\")].unshift(value),\n    setColumnValue: (data, row, colName, value) => (row[colName.split(\"|\").join(\",\")] = value),\n    formatData: (data, config) => papaparse.unparse(data, config)\n});\n\nconst jsonTableFormatter = {\n    initDataValue: () => new Object(),\n    initRowValue: () => {},\n    setColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName].push(value);\n    },\n    addColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName][data[colName].length - 1].unshift(value);\n    },\n    initColumnValue: (data, row, colName) => {\n        data[colName] = data[colName] || [];\n        data[colName].push([]);\n    },\n    addRow: () => {},\n    formatData: data => data,\n    slice: (data, start) => {\n        let new_data = {};\n        for (let x in data) {\n            new_data[x] = data[x].slice(start);\n        }\n        return new_data;\n    }\n};\n\nexport default {\n    jsonFormatter,\n    jsonTableFormatter,\n    csvFormatter\n};\n"],"file":"view_formatters.js"}