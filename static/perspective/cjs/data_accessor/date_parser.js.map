{"version":3,"sources":["../../../src/js/data_accessor/date_parser.js"],"names":["DATE_PARSE_CANDIDATES","moment","constructor","parse","val","type"],"mappings":";;;;;;;;;;;;AASA;;;;AATA;;;;;;;;AAWO,MAAMA,qBAAqB,GAAG,CAACC,gBAAD,QAAA,EAAkBA,gBAAlB,QAAA,EAAA,4BAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAAA,QAAA,EAAA,aAAA,EAA9B,cAA8B,CAA9B;AAEP;;;;;;;;;;AAOO,SAAA,aAAA,CAAA,CAAA,EAA0B;AAC7B,SAAOA,qBAAM,CAANA,EAAM,qBAANA,EAAAA,IAAAA,EAAP,OAAOA,EAAP;AACH;AAED;;;;;;;;AAMO,MAAA,UAAA,CAAiB;AACpBC,EAAAA,WAAW,GAAG;AACV,SAAA,UAAA,GAAA,EAAA;AACA,SAAA,eAAA,GAAuBF,qBAAqB,CAA5C,KAAuBA,EAAvB;AACA,SAAA,eAAA,GAAA,EAAA;AACH;;AAEDG,EAAAA,KAAK,CAAA,KAAA,EAAQ;AACT,QAAI,KAAA,eAAA,CAAA,OAAA,CAAA,KAAA,IAAsC,CAA1C,CAAA,EAA8C;AAC1C,aAAA,IAAA;AADJ,KAAA,MAEO;AACH,UAAIC,GAAG,GAAP,KAAA;AACA,YAAMC,IAAI,GAAG,OAAb,GAAA;;AACA,UAAID,GAAG,CAAP,QAAA,EAAkB;AACd,eAAA,GAAA;AADJ,OAAA,MAEO,IAAIC,IAAI,KAAR,QAAA,EAAuB;AAC1BD,QAAAA,GAAG,GAAGH,qBAAM,KAANA,EAAc,KAAR,UAANA,EAANG,IAAMH,CAANG;;AACA,YAAI,CAACA,GAAG,CAAJ,OAACA,EAAD,IAAkB,KAAA,UAAA,CAAA,MAAA,KAAtB,CAAA,EAAoD;AAChD,eAAK,IAAL,SAAA,IAAsB,KAAtB,eAAA,EAA4C;AACxCA,YAAAA,GAAG,GAAGH,qBAAM,KAANA,EAAM,SAANA,EAANG,IAAMH,CAANG;;AACA,gBAAIA,GAAG,CAAP,OAAIA,EAAJ,EAAmB;AACf,mBAAA,UAAA,CAAA,IAAA,CAAA,SAAA;AACA,mBAAA,eAAA,CAAA,MAAA,CAA4B,KAAA,eAAA,CAAA,OAAA,CAA5B,SAA4B,CAA5B,EAAA,CAAA;AACA,qBAAOA,GAAG,CAAV,MAAOA,EAAP;AACH;AACJ;;AACD,eAAA,eAAA,CAAA,IAAA,CAAA,KAAA;AACA,iBAAA,IAAA;AACH;;AACD,eAAOA,GAAG,CAAV,MAAOA,EAAP;AAdG,OAAA,MAeA,IAAIC,IAAI,KAAR,QAAA,EAAuB;AAC1B,eAAO,IAAA,IAAA,CAAP,GAAO,CAAP;AACH;;AACD,YAAM,IAAA,KAAA,CAAW,oBAAmBD,GAApC,EAAM,CAAN;AACH;AACJ;;AAnCmB","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport moment from \"moment\";\n\nexport const DATE_PARSE_CANDIDATES = [moment.ISO_8601, moment.RFC_2822, \"YYYY-MM-DD\\\\DHH:mm:ss.SSSS\", \"MM-DD-YYYY\", \"MM/DD/YYYY\", \"M/D/YYYY\", \"M/D/YY\", \"DD MMM YYYY\", \"HH:mm:ss.SSS\"];\n\n/**\n *\n *\n * @export\n * @param {string} x\n * @returns\n */\nexport function is_valid_date(x) {\n    return moment(x, DATE_PARSE_CANDIDATES, true).isValid();\n}\n\n/**\n *\n *\n * @export\n * @class DateParser\n */\nexport class DateParser {\n    constructor() {\n        this.date_types = [];\n        this.date_candidates = DATE_PARSE_CANDIDATES.slice();\n        this.date_exclusions = [];\n    }\n\n    parse(input) {\n        if (this.date_exclusions.indexOf(input) > -1) {\n            return null;\n        } else {\n            let val = input;\n            const type = typeof val;\n            if (val.getMonth) {\n                return val;\n            } else if (type === \"string\") {\n                val = moment(input, this.date_types, true);\n                if (!val.isValid() || this.date_types.length === 0) {\n                    for (let candidate of this.date_candidates) {\n                        val = moment(input, candidate, true);\n                        if (val.isValid()) {\n                            this.date_types.push(candidate);\n                            this.date_candidates.splice(this.date_candidates.indexOf(candidate), 1);\n                            return val.toDate();\n                        }\n                    }\n                    this.date_exclusions.push(input);\n                    return null;\n                }\n                return val.toDate();\n            } else if (type === \"number\") {\n                return new Date(val);\n            }\n            throw new Error(`Unparseable date ${val}`);\n        }\n    }\n}\n"],"file":"date_parser.js"}