{"version":3,"sources":["../../src/js/perspective.js"],"names":["global","now","Date","self","__MODULE__","accessor","SIDES","_POOL_DEBOUNCES","setTimeout","_call_process","pool","_remove_process","_Table","limit","table_id","is_update","op","_set_process","config","view_config","sides","table","defaults","bindall","view","JSON","i","j","val","cb","hidden","sort","extracted","vector","extract_vector_scalar","item","col_path_vector_to_string","override","schema","extract_map","Object","colname","key","get_type_config","skip","depth","x","num_sides","nidx","_parse_format_options","options","max_cols","max_rows","psp_offset","viewport","start_row","end_row","Math","start_col","end_col","to_format","date_format","Intl","get_pkeys","get_ids","leaves_only","has_row_path","slice","ns","col_names","data","formatter","ridx","row_path","row","cidx","col_name","col_type","value","keys","column_to_format","num_rows","names","idx","data_slice","dtype","rst","format_function","formatters","ncols","nhidden","delta","rows","results","Number","mode","orig_callback","callback","cache","a","condition","total","filterInPlace","console","initial_length","fill_vector","filter_vector","filled","sort_vector","computed_vector","computed","length","columns","types","new_schema","name","get_column_type","computed_columns","computed_schema","type","new_types","filter","perspective","exists","_config","agg","col","vc","v","meter","_msgs","start","performance","cols","is_arrow","pdata","header","extract_vector","has_index","explicit_index","make_table","e","two_params","functions","f","__module__","Server","worker","overridden_types","data_accessor","dynamicTyping","index","constructor","post","init","wasmBinary","msg","wasmJSMethod"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as defaults from \"./config/constants.js\";\nimport {get_type_config} from \"./config/index.js\";\nimport {DataAccessor} from \"./data_accessor\";\nimport {DateParser} from \"./data_accessor/date_parser.js\";\nimport {extract_vector, extract_map, fill_vector} from \"./emscripten.js\";\nimport {bindall, get_column_type} from \"./utils.js\";\nimport {Server} from \"./api/server.js\";\n\nimport formatters from \"./view_formatters\";\nimport papaparse from \"papaparse\";\n\n// IE fix - chrono::steady_clock depends on performance.now() which does not\n// exist in IE workers\nif (global.performance === undefined) {\n    global.performance = {now: Date.now};\n}\n\nif (typeof self !== \"undefined\" && self.performance === undefined) {\n    self.performance = {now: Date.now};\n}\n\n/**\n * The main API module for `@finos/perspective`.\n *\n * For more information, see the\n * [Javascript user guide](https://perspective.finos.org/docs/md/js.html).\n *\n * @module perspective\n */\nexport default function(Module) {\n    let __MODULE__ = Module;\n    let accessor = new DataAccessor();\n    const SIDES = [\"zero\", \"one\", \"two\"];\n\n    /***************************************************************************\n     *\n     * Private\n     *\n     */\n\n    let _POOL_DEBOUNCES = {};\n\n    function _set_process(pool, table_id) {\n        if (!_POOL_DEBOUNCES[table_id]) {\n            _POOL_DEBOUNCES[table_id] = pool;\n            setTimeout(() => _call_process(table_id));\n        }\n    }\n\n    function _call_process(table_id) {\n        const pool = _POOL_DEBOUNCES[table_id];\n        if (pool) {\n            pool._process();\n            _remove_process(table_id);\n        }\n    }\n\n    function _remove_process(table_id) {\n        delete _POOL_DEBOUNCES[table_id];\n    }\n\n    /**\n     * Common logic for creating and registering a Table.\n     *\n     * @param {DataAccessor|Object[]} accessor - the data we provide to the\n     * Table\n     * @param {Object} _Table - `undefined` if a new table will be created, or\n     * an `std::shared_ptr<Table>` if updating\n     * @param {Object[]} computed - An array of computed columns to be applied\n     * to the table.\n     * @param {String} index - A column name to be used as a primary key.\n     * @param {Number} limit - an upper bound on the number of rows in the\n     * table. If set, new rows that exceed the limit start overwriting old ones\n     * from row 0.\n     * @param {t_op} op - either `OP_INSERT` or `OP_DELETE`\n     * @param {boolean} is_update - true if we are updating an already-created\n     * table\n     * @param {boolean} is_arrow - true if the dataset is in the Arrow format\n     *\n     * @private\n     * @returns {Table} An `std::shared_ptr<Table>` to a `Table` inside C++.\n     */\n    function make_table(accessor, _Table, index, limit, op, is_update, is_arrow) {\n        _Table = __MODULE__.make_table(_Table, accessor, limit || 4294967295, index, op, is_update, is_arrow);\n\n        const pool = _Table.get_pool();\n        const table_id = _Table.get_id();\n\n        if (is_update || op == __MODULE__.t_op.OP_DELETE) {\n            _set_process(pool, table_id);\n        } else {\n            pool._process();\n        }\n\n        return _Table;\n    }\n\n    /***************************************************************************\n     *\n     * View\n     *\n     */\n\n    /**\n     * A View object represents a specific transform (configuration or pivot,\n     * filter, sort, etc) configuration on an underlying\n     * {@link module:perspective~table}. A View receives all updates from the\n     * {@link module:perspective~table} from which it is derived, and can be\n     * serialized to JSON or trigger a callback when it is updated.  View\n     * objects are immutable, and will remain in memory and actively process\n     * updates until its {@link module:perspective~view#delete} method is\n     * called.\n     *\n     * <strong>Note</strong> This constructor is not public - Views are created\n     * by invoking the {@link module:perspective~table#view} method.\n     *\n     * @example\n     * // Returns a new View, pivoted in the row space by the \"name\" column.\n     * table.view({row_pivots: [\"name\"]});\n     *\n     * @class\n     * @hideconstructor\n     */\n    function view(table, sides, config, view_config, name, callbacks, overridden_types) {\n        this._View = undefined;\n        this.date_parser = new DateParser();\n        this.config = config || {};\n        this.view_config = view_config || new view_config();\n\n        if (sides === 0) {\n            this._View = __MODULE__.make_view_zero(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, this.date_parser);\n        } else if (sides === 1) {\n            this._View = __MODULE__.make_view_one(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, this.date_parser);\n        } else if (sides === 2) {\n            this._View = __MODULE__.make_view_two(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, this.date_parser);\n        }\n\n        this.table = table;\n        this.ctx = this._View.get_context();\n        this.column_only = this._View.is_column_only();\n        this.callbacks = callbacks;\n        this.name = name;\n        this.overridden_types = overridden_types;\n        this._delete_callbacks = [];\n        bindall(this);\n    }\n\n    /**\n     * A copy of the config object passed to the {@link table#view} method which\n     * created this {@link module:perspective~view}.\n     *\n     * @returns {Promise<object>} Shared the same key/values properties as\n     * {@link module:perspective~view}\n     */\n    view.prototype.get_config = function() {\n        return JSON.parse(JSON.stringify(this.config));\n    };\n\n    /**\n     * Delete this {@link module:perspective~view} and clean up all resources\n     * associated with it. View objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     *\n     * @async\n     */\n    view.prototype.delete = function() {\n        _remove_process(this.table.get_id());\n        this._View.delete();\n        this.ctx.delete();\n\n        this.table.views.splice(this.table.views.indexOf(this), 1);\n        this.table = undefined;\n        let i = 0,\n            j = 0;\n        while (i < this.callbacks.length) {\n            let val = this.callbacks[i];\n            if (val.view !== this) this.callbacks[j++] = val;\n            i++;\n        }\n        this.callbacks.length = j;\n        this._delete_callbacks.forEach(cb => cb());\n    };\n\n    /**\n     * How many pivoted sides does this view have?\n     *\n     * @private\n     * @returns {number} sides The number of sides of this `View`.\n     */\n    view.prototype.sides = function() {\n        return this._View.sides();\n    };\n\n    view.prototype._num_hidden = function() {\n        // Count hidden columns.\n        let hidden = 0;\n        for (const sort of this.config.sort) {\n            if (this.config.columns.indexOf(sort[0]) === -1) {\n                hidden++;\n            }\n        }\n        return hidden;\n    };\n\n    function col_path_vector_to_string(vector) {\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            extracted.push(__MODULE__.scalar_to_val(vector.get(i), false, true));\n        }\n        vector.delete();\n        return extracted;\n    }\n\n    const extract_vector_scalar = function(vector) {\n        // handles deletion already - do not call delete() on the input vector\n        // again\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            let item = vector.get(i);\n            extracted.push(col_path_vector_to_string(item));\n        }\n        vector.delete();\n        return extracted;\n    };\n\n    /**\n     * The schema of this {@link module:perspective~view}. A schema is an\n     * Object, the keys of which are the columns of this\n     * {@link module:perspective~view}, and the values are their string type\n     * names. If this {@link module:perspective~view} is aggregated, theses will\n     * be the aggregated types; otherwise these types will be the same as the\n     * columns in the underlying {@link module:perspective~table}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s schema.\n     */\n    view.prototype.schema = function(override = true) {\n        const schema = extract_map(this._View.schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    /**\n     * The computed column schema of this {@link module:perspective~view},\n     * containing only user-created computed columns. A schema is an Object, the\n     * keys of which are the columns of this {@link module:perspective~view},\n     * and the values are their string type names. If this\n     * {@link module:perspective~view} is aggregated, theses will be the\n     * aggregated types; otherwise these types will be the same as the columns\n     * in the underlying {@link module:perspective~table}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s computed column schema.\n     */\n    view.prototype.computed_schema = function(override = true) {\n        const schema = extract_map(this._View.computed_schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    view.prototype._column_names = function(skip = false, depth = 0) {\n        return extract_vector_scalar(this._View.column_names(skip, depth)).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    /**\n     * Returns an array of strings containing the column paths of the View\n     * without any of the source columns.\n     *\n     * A column path shows the columns that a given cell belongs to after pivots\n     * are applied.\n     */\n    view.prototype.column_paths = function() {\n        return extract_vector_scalar(this._View.column_paths()).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    view.prototype.get_data_slice = function(start_row, end_row, start_col, end_col) {\n        const num_sides = this.sides();\n        const nidx = SIDES[num_sides];\n        return __MODULE__[`get_data_slice_${nidx}`](this._View, start_row, end_row, start_col, end_col);\n    };\n\n    /**\n     * Given an `options` Object, calculate the correct start/end rows and\n     * columns, as well as other metadata required by the data formatter.\n     *\n     * @private\n     * @param {Object} options User-provided options for `to_format`.\n     * @returns {Object} an Object containing the parsed options.\n     */\n    const _parse_format_options = function(options) {\n        options = options || {};\n        const max_cols = this._View.num_columns() + (this.sides() === 0 ? 0 : 1);\n        const max_rows = this._View.num_rows();\n        const hidden = this._num_hidden();\n        const psp_offset = this.sides() > 0 || this.column_only ? 1 : 0;\n\n        const viewport = this.config.viewport ? this.config.viewport : {};\n        const start_row = options.start_row || (viewport.top ? viewport.top : 0);\n        const end_row = Math.min(max_rows, options.end_row !== undefined ? options.end_row : viewport.height ? start_row + viewport.height : max_rows);\n        const start_col = options.start_col || (viewport.left ? viewport.left : 0);\n        const end_col = Math.min(max_cols, (options.end_col !== undefined ? options.end_col + psp_offset : viewport.width ? start_col + viewport.width : max_cols) * (hidden + 1));\n\n        // Return the calculated values\n        options.start_row = start_row;\n        options.end_row = end_row;\n        options.start_col = start_col;\n        options.end_col = end_col;\n\n        return options;\n    };\n\n    /**\n     * Generic base function from which `to_json`, `to_columns` etc. derives.\n     *\n     * @private\n     */\n    const to_format = function(options, formatter) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const hidden = this._num_hidden();\n\n        let date_format;\n        if (options.date_format) {\n            date_format = new Intl.DateTimeFormat(options.date_format);\n        }\n\n        const get_pkeys = !!options.index;\n        const get_ids = !!options.id;\n        const leaves_only = !!options.leaves_only;\n        const num_sides = this.sides();\n        const has_row_path = num_sides !== 0 && !this.column_only;\n        const nidx = SIDES[num_sides];\n\n        const slice = this.get_data_slice(start_row, end_row, start_col, end_col);\n        const ns = slice.get_column_names();\n        const col_names = extract_vector_scalar(ns).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n        const schema = this.schema();\n\n        let data = formatter.initDataValue();\n\n        for (let ridx = start_row; ridx < end_row; ridx++) {\n            let row_path = has_row_path ? slice.get_row_path(ridx) : undefined;\n            if (has_row_path && leaves_only && row_path.size() < this.config.row_pivots.length) {\n                row_path.delete();\n                continue;\n            }\n            let row = formatter.initRowValue();\n\n            if (get_ids) {\n                formatter.initColumnValue(data, row, \"__ID__\");\n            }\n\n            for (let cidx = start_col; cidx < end_col; cidx++) {\n                const col_name = col_names[cidx];\n                const col_type = schema[col_name];\n                if (cidx === start_col && num_sides !== 0) {\n                    if (!this.column_only) {\n                        formatter.initColumnValue(data, row, \"__ROW_PATH__\");\n                        for (let i = 0; i < row_path.size(); i++) {\n                            const value = __MODULE__.scalar_to_val(row_path.get(i), false, false);\n                            formatter.addColumnValue(data, row, \"__ROW_PATH__\", value);\n                            if (get_ids) {\n                                formatter.addColumnValue(data, row, \"__ID__\", value);\n                            }\n                        }\n                    }\n                } else if ((cidx - (num_sides > 0 ? 1 : 0)) % (this.config.columns.length + hidden) >= this.config.columns.length) {\n                    // Hidden columns are always at the end, so don't emit\n                    // these.\n                    continue;\n                } else {\n                    let value = __MODULE__[`get_from_data_slice_${nidx}`](slice, ridx, cidx);\n                    if ((col_type === \"datetime\" || col_type === \"date\") && value !== undefined) {\n                        if (date_format) {\n                            value = new Date(value);\n                            value = date_format.format(value);\n                        }\n                    }\n                    formatter.setColumnValue(data, row, col_name, value);\n                }\n            }\n\n            if (get_pkeys) {\n                const keys = slice.get_pkeys(ridx, 0);\n                formatter.initColumnValue(data, row, \"__INDEX__\");\n                for (let i = 0; i < keys.size(); i++) {\n                    // TODO: if __INDEX__ and set index have the same value,\n                    // don't we need to make sure that it only emits one?\n                    const value = __MODULE__.scalar_to_val(keys.get(i), false, false);\n                    formatter.addColumnValue(data, row, \"__INDEX__\", value);\n                }\n            }\n\n            // we could add an api to just clone the index column if\n            // it's already calculated\n            if (get_ids && num_sides === 0) {\n                const keys = slice.get_pkeys(ridx, 0);\n                for (let i = 0; i < keys.size(); i++) {\n                    const value = __MODULE__.scalar_to_val(keys.get(i), false, false);\n                    formatter.addColumnValue(data, row, \"__ID__\", value);\n                }\n            }\n\n            if (row_path) {\n                row_path.delete();\n            }\n            formatter.addRow(data, row);\n        }\n\n        slice.delete();\n        return formatter.formatData(data, options.config);\n    };\n\n    /**\n     * Generic base function for returning serialized data for a single column.\n     *\n     * @private\n     */\n    const column_to_format = function(col_name, options, format_function) {\n        const num_rows = this.num_rows();\n        const start_row = options.start_row || 0;\n        const end_row = options.end_row || num_rows;\n        const names = this._column_names();\n        let idx = names.indexOf(col_name);\n\n        if (idx === -1) {\n            return undefined;\n        }\n\n        // mutate the column index if necessary: in pivoted views, columns start\n        // at 1\n        const num_sides = this.sides();\n        if (num_sides > 0) {\n            idx++;\n        }\n\n        // use a specified data slice, if provided\n        let slice, data_slice;\n\n        if (!options.data_slice) {\n            data_slice = this.get_data_slice(start_row, end_row, idx, idx + 1);\n            slice = data_slice.get_slice();\n        } else {\n            slice = options.data_slice.get_column_slice(idx);\n        }\n\n        const dtype = this._View.get_column_dtype(idx);\n\n        const rst = format_function(slice, dtype, idx);\n        slice.delete();\n        if (data_slice) {\n            data_slice.delete();\n        }\n        return rst;\n    };\n\n    /**\n     * Serializes this view to JSON data in a column-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @param {boolean} [config.index=false] Should the index from the\n     * underlying {@link module:perspective~table} be in the output (as\n     * `\"__INDEX__\"`).\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_columns = function(options) {\n        return to_format.call(this, options, formatters.jsonTableFormatter);\n    };\n\n    /**\n     * Serializes this view to JSON data in a row-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_json = function(options) {\n        return to_format.call(this, options, formatters.jsonFormatter);\n    };\n\n    /**\n     * Serializes this view to CSV data in a standard format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @param {Object} options.config A config object for the Papaparse\n     * {@link https://www.papaparse.com/docs#json-to-csv} config object.\n     *\n     * @returns {Promise<string>} A Promise resolving to a string in CSV format\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row will have prepended those values\n     * specified by this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_csv = function(options) {\n        return to_format.call(this, options, formatters.csvFormatter);\n    };\n\n    /**\n     * Serializes a view column into a TypedArray.\n     *\n     * @async\n     *\n     * @param {string} column_name The name of the column to serialize.\n     *\n     * @param {Object} options An optional configuration object.\n     *\n     * @param {*} options.data_slice A data slice object from which to\n     * serialize.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     *\n     * @returns {Promise<TypedArray>} A promise resolving to a TypedArray\n     * representing the data of the column as retrieved from the\n     * {@link module:perspective~view} - all pivots, aggregates, sorts, and\n     * filters have been applied onto the values inside the TypedArray. The\n     * TypedArray will be constructed based on data type - integers will resolve\n     * to Int8Array, Int16Array, or Int32Array. Floats resolve to Float32Array\n     * or Float64Array. If the column cannot be found, or is not of an\n     * integer/float type, the Promise returns undefined.\n     */\n    view.prototype.col_to_js_typed_array = function(col_name, options = {}) {\n        const format_function = __MODULE__[`col_to_js_typed_array`];\n        return column_to_format.call(this, col_name, options, format_function);\n    };\n\n    /**\n     * Serializes a view to the Apache Arrow data format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     *\n     * @param {*} options.data_slice A data slice object from which to\n     * serialize.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<ArrayBuffer>} An `ArrayBuffer` in the Apache Arrow\n     * format containing data from the view.\n     */\n    view.prototype.to_arrow = function(options = {}) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const sides = this.sides();\n\n        if (sides === 0) {\n            return __MODULE__.to_arrow_zero(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 1) {\n            return __MODULE__.to_arrow_one(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 2) {\n            return __MODULE__.to_arrow_two(this._View, start_row, end_row, start_col, end_col);\n        }\n    };\n\n    /**\n     * The number of aggregated rows in this {@link module:perspective~view}.\n     * This is affected by the \"row_pivots\" configuration parameter supplied to\n     * this {@link module:perspective~view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated rows.\n     */\n    view.prototype.num_rows = function() {\n        return this._View.num_rows();\n    };\n\n    /**\n     * The number of aggregated columns in this {@link view}.  This is affected\n     * by the \"column_pivots\" configuration parameter supplied to this\n     * {@link view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated columns.\n     */\n    view.prototype.num_columns = function() {\n        const ncols = this._View.num_columns();\n        const nhidden = this._num_hidden();\n        return ncols - (ncols / (this.config.columns.length + nhidden)) * nhidden;\n    };\n\n    /**\n     * Whether this row at index `idx` is in an expanded or collapsed state.\n     *\n     * @async\n     *\n     * @returns {Promise<bool>} Whether this row is expanded.\n     */\n    view.prototype.get_row_expanded = function(idx) {\n        return this._View.get_row_expanded(idx);\n    };\n\n    /**\n     * Expands the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.expand = function(idx) {\n        return this._View.expand(idx, this.config.row_pivots.length);\n    };\n\n    /**\n     * Collapses the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.collapse = function(idx) {\n        return this._View.collapse(idx);\n    };\n\n    /**\n     * Set expansion `depth` of the pivot tree.\n     *\n     */\n    view.prototype.set_depth = function(depth) {\n        return this._View.set_depth(depth, this.config.row_pivots.length);\n    };\n\n    /**\n     * Returns the data of all changed rows in JSON format, or for 1+ sided\n     * contexts the entire dataset of the view.\n     * @private\n     */\n    view.prototype._get_step_delta = async function() {\n        let delta = this._View.get_step_delta(0, 2147483647);\n        let data;\n        if (delta.cells.size() === 0) {\n            // FIXME This is currently not implemented for 1+ sided contexts.\n            data = this.to_json();\n        } else {\n            let rows = {};\n            for (let x = 0; x < delta.cells.size(); x++) {\n                rows[delta.cells.get(x).row] = true;\n            }\n            rows = Object.keys(rows);\n            const results = rows.map(row =>\n                this.to_json({\n                    start_row: Number.parseInt(row),\n                    end_row: Number.parseInt(row) + 1\n                })\n            );\n            data = [].concat.apply([], results);\n        }\n        delta.cells.delete();\n        return data;\n    };\n\n    /**\n     * Returns an Arrow-serialized dataset that contains the data from updated\n     * rows. Do not call this function directly, instead use the\n     * {@link module:perspective~view}'s `on_update` method with `{mode: \"row\"}`\n     * in order to access the row deltas.\n     *\n     * @private\n     */\n    view.prototype._get_row_delta = async function() {\n        const sides = this.sides();\n        const nidx = SIDES[sides];\n        return __MODULE__[`get_row_delta_${nidx}`](this._View);\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}.  Whenever\n     * the {@link module:perspective~view}'s underlying table emits an update,\n     * this callback will be invoked with the aggregated row deltas.\n     *\n     * @param {function} callback A callback function invoked on update.  The\n     * parameter to this callback is dependent on the `mode` parameter:\n     *     - \"none\" (default): The callback is invoked without an argument.\n     *     - \"cell\": The callback is invoked with the new data for each updated\n     *           cell, serialized to JSON format.\n     *     - \"row\": The callback is invoked with an Arrow of the updated rows.\n     */\n    view.prototype.on_update = function(callback, {mode = \"none\"} = {}) {\n        _call_process(this.table.get_id());\n        if ([\"none\", \"cell\", \"row\"].indexOf(mode) === -1) {\n            throw new Error(`Invalid update mode \"${mode}\" - valid modes are \"none\", \"cell\" and \"row\".`);\n        }\n        if (mode === \"cell\" || mode === \"row\") {\n            // Enable deltas only if needed by callback\n            if (!this._View._get_deltas_enabled()) {\n                this._View._set_deltas_enabled(true);\n            }\n        }\n        this.callbacks.push({\n            view: this,\n            orig_callback: callback,\n            callback: async cache => {\n                switch (mode) {\n                    case \"cell\":\n                        {\n                            if (cache.step_delta === undefined) {\n                                cache.step_delta = await this._get_step_delta();\n                            }\n                            callback(cache.step_delta);\n                        }\n                        break;\n                    case \"row\":\n                        {\n                            if (cache.row_delta === undefined) {\n                                cache.row_delta = await this._get_row_delta();\n                            }\n                            callback(cache.row_delta);\n                        }\n                        break;\n                    default: {\n                        callback();\n                    }\n                }\n            }\n        });\n    };\n\n    function filterInPlace(a, condition) {\n        let i = 0,\n            j = 0;\n\n        while (i < a.length) {\n            const val = a[i];\n            if (condition(val, i, a)) a[j++] = val;\n            i++;\n        }\n\n        a.length = j;\n        return a;\n    }\n\n    view.prototype.remove_update = function(callback) {\n        _call_process(this.table.get_id());\n        const total = this.callbacks.length;\n        filterInPlace(this.callbacks, x => x.orig_callback !== callback);\n        console.assert(total > this.callbacks.length, `\"callback\" does not match a registered updater`);\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}.  Whenever\n     * the {@link module:perspective~view} is deleted, this callback will be\n     * invoked.\n     *\n     * @param {function} callback A callback function invoked on delete.\n     */\n    view.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~view}.\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    view.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * A view config is a set of options that configures the underlying\n     * {@link module:perspective~view}, specifying its pivots, columns to show,\n     * aggregates, filters, and sorts.\n     *\n     * The view config receives an `Object` containing configuration options,\n     * and the `view_config` transforms it into a canonical format for\n     * interfacing with the core engine.\n     *\n     * <strong>Note</strong> This constructor is not public - view config\n     * objects should be created using standard Javascript `Object`s in the\n     * {@link module:perspective~table#view} method, which has an `options`\n     * parameter.\n     *\n     * @param {Object} config the configuration `Object` passed by the user to\n     * the {@link module:perspective~table#view} method.\n     * @private\n     * @class\n     * @hideconstructor\n     */\n    function view_config(config) {\n        this.row_pivots = config.row_pivots || [];\n        this.column_pivots = config.column_pivots || [];\n        this.aggregates = config.aggregates || {};\n        this.columns = config.columns;\n        this.filter = config.filter || [];\n        this.sort = config.sort || [];\n        this.computed_columns = config.computed_columns || [];\n        this.filter_op = config.filter_op || \"and\";\n        this.row_pivot_depth = config.row_pivot_depth;\n        this.column_pivot_depth = config.column_pivot_depth;\n    }\n\n    /**\n     * Transform configuration items into `std::vector` objects for interface\n     * with C++. `this.aggregates` is not transformed into a C++ map, as the use\n     * of `ordered_map` in the engine makes binding more difficult.\n     *\n     * @private\n     */\n    view_config.prototype.get_row_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.row_pivots);\n    };\n\n    view_config.prototype.get_column_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.column_pivots);\n    };\n\n    view_config.prototype.get_columns = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.columns);\n    };\n\n    view_config.prototype.get_filter = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let filter of this.filter) {\n            let filter_vector = __MODULE__.make_val_vector();\n            let filled = fill_vector(filter_vector, filter);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_sort = function() {\n        let vector = __MODULE__.make_2d_string_vector();\n        for (let sort of this.sort) {\n            let sort_vector = __MODULE__.make_string_vector();\n            let filled = fill_vector(sort_vector, sort);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_computed_columns = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let computed of this.computed_columns) {\n            let computed_vector = __MODULE__.make_val_vector();\n            computed_vector.push_back(computed.column);\n            computed_vector.push_back(computed.computed_function_name);\n            // make this input_columns\n            computed_vector.push_back(computed.inputs);\n            vector.push_back(computed_vector);\n        }\n        return vector;\n    };\n\n    /***************************************************************************\n     *\n     * Table\n     *\n     */\n\n    /**\n     * A Table object is the basic data container in Perspective.  Tables are\n     * typed - they have an immutable set of column names, and a known type for\n     * each.\n     *\n     * <strong>Note</strong> This constructor is not public - Tables are created\n     * by invoking the {@link module:perspective~table} factory method, either\n     * on the perspective module object, or an a\n     * {@link module:perspective~worker} instance.\n     *\n     * @class\n     * @hideconstructor\n     */\n    function table(_Table, index, computed, limit, overridden_types) {\n        this._Table = _Table;\n        this.gnode_id = this._Table.get_gnode().get_id();\n        this.name = Math.random() + \"\";\n        this.initialized = false;\n        this.index = index;\n        this._Table.get_pool().set_update_delegate(this);\n        this.computed = computed || [];\n        this.callbacks = [];\n        this.views = [];\n        this.limit = limit;\n        this.overridden_types = overridden_types;\n        this._delete_callbacks = [];\n        bindall(this);\n    }\n\n    table.prototype.compute = function() {\n        return true;\n    };\n\n    table.prototype.get_id = function() {\n        return this._Table.get_id();\n    };\n\n    table.prototype.get_pool = function() {\n        return this._Table.get_pool();\n    };\n\n    table.prototype._update_callback = function() {\n        let cache = {};\n        for (let e in this.callbacks) {\n            this.callbacks[e].callback(cache);\n        }\n    };\n\n    /**\n     * Remove all rows in this {@link module:perspective~table} while preserving\n     * the schema and construction options.\n     */\n    table.prototype.clear = function() {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n    };\n\n    /**\n     * Replace all rows in this {@link module:perspective~table} the input data.\n     */\n    table.prototype.replace = function(data) {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n        this.update(data);\n        _call_process(this.get_id());\n    };\n\n    /**\n     * Delete this {@link module:perspective~table} and clean up all resources\n     * associated with it. Table objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     */\n    table.prototype.delete = function() {\n        if (this.views.length > 0) {\n            throw `Cannot delete Table as it still has ${this.views.length} registered View(s).`;\n        }\n        _remove_process(this.get_id());\n        this._Table.unregister_gnode(this.gnode_id);\n        this._Table.delete();\n        this._delete_callbacks.forEach(callback => callback());\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~table}.  Whenever\n     * the {@link module:perspective~table} is deleted, this callback will be\n     * invoked.\n     *\n     * @param {function} callback A callback function invoked on delete.  The\n     *     parameter to this callback shares a structure with the return type of\n     *     {@link module:perspective~table#to_json}.\n     */\n    table.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~table}.\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    table.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * The number of accumulated rows in this {@link module:perspective~table}.\n     * This is affected by the \"index\" configuration parameter supplied to this\n     * {@link module:perspective~view}'s contructor - as rows will be\n     * overwritten when they share an idnex column.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of accumulated rows.\n     */\n    table.prototype.size = function() {\n        _call_process(this._Table.get_id());\n        return this._Table.size();\n    };\n\n    /**\n     * The schema of this {@link module:perspective~table}.  A schema is an\n     * Object whose keys are the columns of this\n     * {@link module:perspective~table}, and whose values are their string type\n     * names.\n     *\n     * @async\n     * @param {boolean} computed Should computed columns be included? (default\n     * false)\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~table}'s schema.\n     */\n    table.prototype.schema = function(override = true) {\n        let schema = this._Table.get_schema();\n        let columns = schema.columns();\n        let types = schema.types();\n        let new_schema = {};\n        for (let key = 0; key < columns.size(); key++) {\n            const name = columns.get(key);\n            if (name === \"psp_okey\") {\n                continue;\n            }\n            if (override && this.overridden_types[name]) {\n                new_schema[name] = this.overridden_types[name];\n            } else {\n                new_schema[name] = get_column_type(types.get(key).value);\n            }\n        }\n        schema.delete();\n        columns.delete();\n        types.delete();\n        return new_schema;\n    };\n\n    /**\n     * Given an array of computed column definitions, perform type lookups to\n     * create a schema for the computed column without calculating or\n     * constructing any new columns.\n     *\n     * @async\n     * @param {Array<Object>} computed_columns an array of computed column\n     * definitions.\n     *\n     * @returns {Promise<Object>} A Promise that resolves to a computed schema\n     * based on the computed column definitions provided.\n     */\n    table.prototype.computed_schema = function(computed_columns, override = true) {\n        const new_schema = {};\n\n        if (!computed_columns || computed_columns.length === 0) return new_schema;\n\n        // Before passing into C++, transform array of objects into vector of\n        // Tuples expected by the Emscripten binding function.\n        let vector = __MODULE__.make_2d_val_vector();\n\n        for (let computed of computed_columns) {\n            let computed_vector = __MODULE__.make_val_vector();\n            computed_vector.push_back(computed.column);\n            computed_vector.push_back(computed.computed_function_name);\n            computed_vector.push_back(computed.inputs);\n            vector.push_back(computed_vector);\n        }\n\n        let computed_schema = __MODULE__.get_table_computed_schema(this._Table, vector);\n        let columns = computed_schema.columns();\n        let types = computed_schema.types();\n\n        for (let key = 0; key < columns.size(); key++) {\n            const name = columns.get(key);\n            const type = types.get(key);\n            if (override && this.overridden_types[name]) {\n                new_schema[name] = this.overridden_types[name];\n            } else {\n                new_schema[name] = get_column_type(type.value);\n            }\n        }\n\n        computed_schema.delete();\n        columns.delete();\n        types.delete();\n\n        return new_schema;\n    };\n\n    /**\n     * Given a computed function name, return an array of strings containing\n     * the expected input column types for the computed function.\n     *\n     * @private\n     * @async\n     * @param {String} computed_function_name\n     * @returns {Promise<Array<String>>}\n     */\n    table.prototype.get_computation_input_types = function(computed_function_name) {\n        const types = __MODULE__.get_computation_input_types(computed_function_name);\n        const new_types = [];\n\n        for (let i = 0; i < types.size(); i++) {\n            const type = types.get(i);\n            new_types.push(get_column_type(type.value));\n        }\n\n        return new_types;\n    };\n\n    /**\n     * Validates a filter configuration, i.e. that the value to filter by is not\n     * null or undefined.\n     *\n     * @param {Array<string>} [filter] a filter configuration to test.\n     */\n    table.prototype.is_valid_filter = function(filter) {\n        // isNull and isNotNull filter operators are always valid and apply to\n        // all schema types\n        if (filter[1] === perspective.FILTER_OPERATORS.isNull || filter[1] === perspective.FILTER_OPERATORS.isNotNull) {\n            return true;\n        }\n\n        let value = filter[2];\n        if (value === null) {\n            return false;\n        }\n\n        const schema = this.schema();\n        const exists = schema[filter[0]];\n        if (exists && (schema[filter[0]] === \"date\" || schema[filter[0]] === \"datetime\")) {\n            value = new DateParser().parse(value);\n        }\n\n        return typeof value !== \"undefined\" && value !== null;\n    };\n\n    /* eslint-disable max-len */\n\n    /**\n     * Create a new {@link module:perspective~view} from this table with a\n     * specified configuration. For a conceptual understanding of the\n     * configuration options, see the [Conceptual Overview](https://perspective.finos.org/docs/md/installation.html).\n     *\n     * @param {Object} [config] The configuration object for this\n     * {@link module:perspective~view}.\n     * @param {Array<string>} [config.row_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Row_labels Row Pivots}.\n     * @param {Array<string>} [config.column_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Column_labels Column Pivots}.\n     * @param {Array<Object>} [config.columns] An array of column names for the\n     * output columns. If none are provided, all columns are output.\n     * @param {Object} [config.aggregates] An object, the keys of which are\n     * column names, and their respective values are the aggregates calculations\n     * to use when this view has `row_pivots`. A column provided to\n     * `config.columns` without an aggregate in this object, will use the\n     * default aggregate calculation for its type.\n     * @param {Array<Array<string>>} [config.filter] An Array of Filter\n     * configurations to apply. A filter configuration is an array of 3\n     * elements: A column name, a supported filter comparison string (e.g.\n     * '===', '>'), and a value to compare.\n     * @param {Array<string>} [config.sort] An Array of Sort configurations to\n     * apply. A sort configuration is an array of 2 elements: A column name, and\n     * a sort direction, which are: \"none\", \"asc\", \"desc\", \"col asc\", \"col\n     * desc\", \"asc abs\", \"desc abs\", \"col asc abs\", \"col desc abs\".\n     *\n     * @example\n     * var view = table.view({\n     *      row_pivots: [\"region\"],\n     *      columns: [\"region\"],\n     *      aggregates: {\"region\": \"dominant\"},\n     *      filter: [[\"client\", \"contains\", \"fred\"]],\n     *      sort: [[\"value\", \"asc\"]]\n     * });\n     *\n     * @returns {view} A new {@link module:perspective~view} object for the\n     * supplied configuration, bound to this table\n     */\n    table.prototype.view = function(_config = {}) {\n        _call_process(this._Table.get_id());\n        let config = {};\n        for (const key of Object.keys(_config)) {\n            if (defaults.CONFIG_ALIASES[key]) {\n                if (!config[defaults.CONFIG_ALIASES[key]]) {\n                    console.warn(`Deprecated: \"${key}\" config parameter, please use \"${defaults.CONFIG_ALIASES[key]}\" instead`);\n                    config[defaults.CONFIG_ALIASES[key]] = _config[key];\n                } else {\n                    throw new Error(`Duplicate configuration parameter \"${key}\"`);\n                }\n            } else if (key === \"aggregate\") {\n                console.warn(`Deprecated: \"aggregate\" config parameter has been replaced by \"aggregates\" and \"columns\"`);\n                // backwards compatibility: deconstruct `aggregate` into\n                // `aggregates` and `columns`\n                config[\"aggregates\"] = {};\n                config[\"columns\"] = [];\n                for (const agg of _config[\"aggregate\"]) {\n                    config[\"aggregates\"][agg[\"column\"]] = agg[\"op\"];\n                    config[\"columns\"].push(agg[\"column\"]);\n                }\n            } else if (defaults.CONFIG_VALID_KEYS.indexOf(key) > -1) {\n                config[key] = _config[key];\n            } else {\n                throw new Error(`Unrecognized config parameter \"${key}\"`);\n            }\n        }\n\n        config.row_pivots = config.row_pivots || [];\n        config.column_pivots = config.column_pivots || [];\n        config.aggregates = config.aggregates || {};\n        config.filter = config.filter || [];\n        config.sort = config.sort || [];\n        config.computed_columns = config.computed_columns || [];\n\n        if (config.columns === undefined) {\n            // If columns are not provided, use all columns\n            config.columns = this.columns();\n            if (config.computed_columns.length > 0) {\n                for (let col of config.computed_columns) {\n                    config.columns.push(col.column);\n                }\n            }\n        }\n\n        let name = Math.random() + \"\";\n        let sides;\n\n        if (config.row_pivots.length > 0 || config.column_pivots.length > 0) {\n            if (config.column_pivots && config.column_pivots.length > 0) {\n                sides = 2;\n            } else {\n                sides = 1;\n            }\n        } else {\n            sides = 0;\n        }\n\n        let vc = new view_config(config);\n        let v = new view(this, sides, config, vc, name, this.callbacks, this.overridden_types);\n        this.views.push(v);\n        return v;\n    };\n\n    /* eslint-enable max-len */\n\n    let meter;\n\n    function initialize_profile_thread() {\n        if (meter === undefined) {\n            let _msgs = 0;\n            let start = performance.now();\n            setTimeout(function poll() {\n                let now = performance.now();\n                console.log(`${((1000 * _msgs) / (now - start)).toFixed(2)} msgs/sec`);\n                _msgs = 0;\n                start = now;\n                setTimeout(poll, 5000);\n            }, 5000);\n            meter = function update(x) {\n                _msgs += x;\n            };\n            console.log(\"Profiling initialized\");\n        }\n    }\n\n    /**\n     * Updates the rows of a {@link module:perspective~table}. Updated rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Object<string, Array>|Array<Object>|string} data The input data\n     * for this table. {@link module:perspective~table}s are immutable after\n     * creation, so this method cannot be called with a schema.\n     *\n     * Otherwise, the supported input types are the same as the\n     * {@link module:perspective~table} constructor.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.update = function(data) {\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n\n        pdata = accessor;\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else if (typeof data === \"string\") {\n            if (data[0] === \",\") {\n                data = \"_\" + data;\n            }\n            accessor.init(papaparse.parse(data.trim(), {header: true}).data);\n            accessor.names = cols.concat(accessor.names.filter(x => x === \"__INDEX__\"));\n            accessor.types = extract_vector(types).slice(0, accessor.names.length);\n\n            if (meter) {\n                meter(accessor.row_count);\n            }\n        } else {\n            accessor.init(data);\n            accessor.names = cols.concat(accessor.names.filter(x => x === \"__INDEX__\"));\n            accessor.types = extract_vector(types).slice(0, cols.length);\n\n            if (meter) {\n                meter(accessor.row_count);\n            }\n        }\n\n        if (!is_arrow) {\n            if (pdata.row_count === 0) {\n                console.warn(\"table.update called with no data - ignoring\");\n                return;\n            }\n\n            // process implicit index column\n            const has_index = accessor.names.indexOf(\"__INDEX__\");\n            if (has_index != -1) {\n                const explicit_index = !!this.index;\n                if (explicit_index) {\n                    // find the type of the index column\n                    accessor.types.push(accessor.types[accessor.names.indexOf(this.index)]);\n                } else {\n                    // default index is an integer\n                    accessor.types.push(__MODULE__.t_dtype.DTYPE_INT32);\n                }\n            }\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_INSERT;\n            // update the Table in C++, but don't keep the returned Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index || \"\", this.limit, op, true, is_arrow);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Update failed: ${e}`);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * Removes the rows of a {@link module:perspective~table}. Removed rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Array<Object>} data An array of primary keys to remove.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.remove = function(data) {\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n\n        data = data.map(idx => ({[this.index]: idx}));\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else {\n            accessor.init(data);\n            accessor.names = [this.index];\n            accessor.types = [extract_vector(types)[cols.indexOf(this.index)]];\n            pdata = accessor;\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_DELETE;\n            // update the Table in C++, but don't keep the returned Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index || \"\", this.limit, op, false, is_arrow);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Remove failed`, e);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * Return an Object containing computed function metadata. Keys are strings,\n     * and each value is an Object containing the following metadata:\n     *\n     * - computed_function_name: the name of the computed function\n     * - input_type: the type of its input columns (all input columns are of\n     * the same type)\n     * - return_type: the return type of its output column\n     * - group: a category for the function\n     * - num_params: the number of input parameters\n     * - format_function: an anonymous function used for naming new columns\n     */\n    table.prototype.get_computed_functions = function() {\n        const two_params = [\"add\", \"subtract\", \"multiply\", \"divide\", \"percent_a_of_b\", \"concat_space\", \"concat_comma\"];\n        let functions = extract_map(__MODULE__.get_computed_functions());\n        for (const f in functions) {\n            if (functions.hasOwnProperty(f)) {\n                functions[f] = extract_map(functions[f]);\n                functions[f][\"num_params\"] = two_params.includes(f) ? 2 : 1;\n            }\n        }\n        console.log(functions);\n        return functions;\n    };\n\n    /**\n     * The column names of this table.\n     *\n     * @async\n     * @param {boolean} computed Should computed columns be included? (default\n     * false)\n     * @returns {Promise<Array<string>>} An array of column names for this\n     * table.\n     */\n    table.prototype.columns = function() {\n        let schema = this._Table.get_schema();\n        let cols = schema.columns();\n        let names = [];\n        for (let cidx = 0; cidx < cols.size(); cidx++) {\n            let name = cols.get(cidx);\n            if (name !== \"psp_okey\") {\n                names.push(name);\n            }\n        }\n        schema.delete();\n        cols.delete();\n        return names;\n    };\n\n    table.prototype.execute = function(f) {\n        f(this);\n    };\n\n    /***************************************************************************\n     *\n     * Perspective\n     *\n     */\n\n    const perspective = {\n        __module__: __MODULE__,\n\n        Server,\n\n        worker: function() {\n            return this;\n        },\n\n        initialize_profile_thread,\n\n        /**\n         * A factory method for constructing {@link module:perspective~table}s.\n         *\n         * @example\n         * // Creating a table directly from node\n         * var table = perspective.table([{x: 1}, {x: 2}]);\n         *\n         * @example\n         * // Creating a table from a Web Worker (instantiated via the worker()\n         * method).\n         * var table = worker.table([{x: 1}, {x: 2}]);\n         *\n         * @param {Object<string, Array>|Object<string,\n         *     string>|Array<Object>|string} data The input data for this table.\n         *     When supplied an Object with string values, an empty table is\n         *     returned using this Object as a schema. When an Object with\n         *     Array values is supplied, a table is returned using this object's\n         *     key/value pairs as name/columns respectively. When an Array is\n         *     supplied, a table is constructed using this Array's objects as\n         *     rows. When a string is supplied, the parameter as parsed as a\n         *     CSV.\n         * @param {Object} [options] An optional options dictionary.\n         * @param {string} options.index The name of the column in the resulting\n         *     table to treat as an index. When updating this table, rows\n         *     sharing an index of a new row will be overwritten. `index` is\n         *     mutually exclusive to `limit`.\n         * @param {integer} options.limit The maximum number of rows that can be\n         *     added to this table. When exceeded, old rows will be overwritten\n         *     in the order they were inserted. `limit` is mutually exclusive\n         *     to `index`.\n         *\n         * @returns {table} A new {@link module:perspective~table} object.\n         */\n        table: function(data, options) {\n            options = options || {};\n            options.index = options.index || \"\";\n\n            let data_accessor;\n            let is_arrow = false;\n            let overridden_types = {};\n\n            if (data instanceof ArrayBuffer || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\n                data_accessor = new Uint8Array(data);\n                is_arrow = true;\n            } else {\n                if (typeof data === \"string\") {\n                    if (data[0] === \",\") {\n                        data = \"_\" + data;\n                    }\n                    data = papaparse.parse(data.trim(), {dynamicTyping: true, header: true}).data;\n                }\n\n                accessor.clean();\n                overridden_types = accessor.init(data);\n                data_accessor = accessor;\n            }\n\n            if (options.index && options.limit) {\n                throw `Cannot specify both index '${options.index}' and limit '${options.limit}'.`;\n            }\n\n            let _Table;\n\n            try {\n                const op = __MODULE__.t_op.OP_INSERT;\n                _Table = make_table(data_accessor, undefined, options.index, options.limit, op, false, is_arrow);\n                return new table(_Table, options.index, undefined, options.limit, overridden_types);\n            } catch (e) {\n                if (_Table) {\n                    _Table.delete();\n                }\n                console.error(`Table initialization failed: ${e}`);\n                throw e;\n            }\n        }\n    };\n\n    for (let prop of Object.keys(defaults)) {\n        perspective[prop] = defaults[prop];\n    }\n\n    /**\n     * Hosting Perspective\n     *\n     * Create a WebWorker API that loads perspective in `init` and extends\n     * `post` using the worker's `postMessage` method.\n     *\n     * If Perspective is running inside a Web Worker, use the WebSorkerServer as\n     * default.\n     *\n     * @extends Server\n     * @private\n     */\n    class WebWorkerServer extends Server {\n        /**\n         * On initialization, listen for messages posted from the client and\n         * send it to `Server.process()`.\n         *\n         * @param perspective a reference to the Perspective module, allowing\n         * the `Server` to access Perspective methods.\n         */\n        constructor(perspective) {\n            super(perspective);\n            self.addEventListener(\"message\", e => this.process(e.data), false);\n        }\n\n        /**\n         * Implements the `Server`'s `post()` method using the Web Worker\n         * `postMessage()` API.\n         *\n         * @param {Object} msg a message to pass to the client\n         * @param {*} transfer a transferable object to pass to the client, if\n         * needed\n         */\n        post(msg, transfer) {\n            self.postMessage(msg, transfer);\n        }\n\n        /**\n         * When initialized, replace Perspective's internal `__MODULE` variable\n         * with the WASM binary.\n         *\n         * @param {ArrayBuffer} buffer an ArrayBuffer or Buffer containing the\n         * Perspective WASM code\n         */\n        init(msg) {\n            if (typeof WebAssembly === \"undefined\") {\n                throw new Error(\"WebAssembly not supported\");\n            } else {\n                console.log(\"Loading wasm\");\n                __MODULE__ = __MODULE__({\n                    wasmBinary: msg.buffer,\n                    wasmJSMethod: \"native-wasm\"\n                }).then(() => super.init(msg));\n            }\n        }\n    }\n\n    /**\n     * Use WebSorkerServer as default inside a Web Worker, where `window` is\n     * replaced with `self`.\n     */\n    if (typeof self !== \"undefined\" && self.addEventListener) {\n        new WebWorkerServer(perspective);\n    }\n\n    return perspective;\n}\n"],"file":"perspective.js"}