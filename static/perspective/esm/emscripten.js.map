{"version":3,"sources":["../../src/js/emscripten.js"],"names":["extract_vector","vector","extracted","i","size","item","get","push","delete","extract_map","map","keys","key","fill_vector","arr","elem","push_back"],"mappings":";;AAAA;;;;;;;;;AASA;;;AAIA,OAAO,MAAMA,cAAc,GAAG,UAASC,MAAT,EAAiB;AAC3C;AACA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,IAAP,EAApB,EAAmCD,CAAC,EAApC,EAAwC;AACpC,QAAIE,IAAI,GAAGJ,MAAM,CAACK,GAAP,CAAWH,CAAX,CAAX;AACAD,IAAAA,SAAS,CAACK,IAAV,CAAeF,IAAf;AACH;;AACDJ,EAAAA,MAAM,CAACO,MAAP;AACA,SAAON,SAAP;AACH,CATM;AAWP,OAAO,MAAMO,WAAW,GAAG,UAASC,GAAT,EAAc;AACrC;AACA,MAAIR,SAAS,GAAG,EAAhB;AACA,MAAIS,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAX;;AACA,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,IAAI,CAACP,IAAL,EAApB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIS,GAAG,GAAGD,IAAI,CAACL,GAAL,CAASH,CAAT,CAAV;AACAD,IAAAA,SAAS,CAACU,GAAD,CAAT,GAAiBF,GAAG,CAACJ,GAAJ,CAAQM,GAAR,CAAjB;AACH;;AACDF,EAAAA,GAAG,CAACF,MAAJ;AACAG,EAAAA,IAAI,CAACH,MAAL;AACA,SAAON,SAAP;AACH,CAXM;AAaP;;;;;;;;;;;AAUA,OAAO,MAAMW,WAAW,GAAG,UAASZ,MAAT,EAAiBa,GAAjB,EAAsB;AAC7C,OAAK,MAAMC,IAAX,IAAmBD,GAAnB,EAAwB;AACpBb,IAAAA,MAAM,CAACe,SAAP,CAAiBD,IAAjB;AACH;;AACD,SAAOd,MAAP;AACH,CALM","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/** Translation layer Interface between C++ and JS to handle conversions/data\n * structures that were previously handled in non-portable perspective.js\n */\n\nexport const extract_vector = function(vector) {\n    // handles deletion already - do not call delete() on the input vector again\n    let extracted = [];\n    for (let i = 0; i < vector.size(); i++) {\n        let item = vector.get(i);\n        extracted.push(item);\n    }\n    vector.delete();\n    return extracted;\n};\n\nexport const extract_map = function(map) {\n    // handles deletion already - do not call delete() on the input map again\n    let extracted = {};\n    let keys = map.keys();\n    for (let i = 0; i < keys.size(); i++) {\n        let key = keys.get(i);\n        extracted[key] = map.get(key);\n    }\n    map.delete();\n    keys.delete();\n    return extracted;\n};\n\n/**\n * Given a C++ vector constructed in Emscripten, fill it with data. Assume that\n * data types are already validated, thus Emscripten will throw an error if the\n * vector is filled with the wrong type of data.\n *\n * @param {*} vector the `std::vector` to be filled\n * @param {Array} arr the `Array` from which to draw data\n *\n * @private\n */\nexport const fill_vector = function(vector, arr) {\n    for (const elem of arr) {\n        vector.push_back(elem);\n    }\n    return vector;\n};\n"],"file":"emscripten.js"}