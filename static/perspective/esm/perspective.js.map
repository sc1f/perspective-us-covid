{"version":3,"sources":["../../src/js/perspective.js"],"names":["defaults","get_type_config","DataAccessor","DateParser","extract_vector","extract_map","fill_vector","bindall","get_column_type","Server","formatters","papaparse","global","performance","undefined","now","Date","self","Module","__MODULE__","accessor","SIDES","_POOL_DEBOUNCES","_set_process","pool","table_id","setTimeout","_call_process","_process","_remove_process","make_table","_Table","index","limit","op","is_update","is_arrow","get_pool","get_id","t_op","OP_DELETE","view","table","sides","config","view_config","name","callbacks","overridden_types","_View","date_parser","make_view_zero","COLUMN_SEPARATOR_STRING","make_view_one","make_view_two","ctx","get_context","column_only","is_column_only","_delete_callbacks","prototype","get_config","JSON","parse","stringify","delete","views","splice","indexOf","i","j","length","val","forEach","cb","_num_hidden","hidden","sort","columns","col_path_vector_to_string","vector","extracted","size","push","scalar_to_val","get","extract_vector_scalar","item","schema","override","key","Object","keys","colname","split","type","computed_schema","_column_names","skip","depth","column_names","map","x","join","column_paths","get_data_slice","start_row","end_row","start_col","end_col","num_sides","nidx","_parse_format_options","options","max_cols","num_columns","max_rows","num_rows","psp_offset","viewport","top","Math","min","height","left","width","to_format","formatter","bind","date_format","Intl","DateTimeFormat","get_pkeys","get_ids","id","leaves_only","has_row_path","slice","ns","get_column_names","col_names","data","initDataValue","ridx","row_path","get_row_path","row_pivots","row","initRowValue","initColumnValue","cidx","col_name","col_type","value","addColumnValue","format","setColumnValue","addRow","formatData","column_to_format","format_function","names","idx","data_slice","get_slice","get_column_slice","dtype","get_column_dtype","rst","to_columns","call","jsonTableFormatter","to_json","jsonFormatter","to_csv","csvFormatter","col_to_js_typed_array","to_arrow","to_arrow_zero","to_arrow_one","to_arrow_two","ncols","nhidden","get_row_expanded","expand","collapse","set_depth","_get_step_delta","delta","get_step_delta","cells","rows","results","Number","parseInt","concat","apply","_get_row_delta","on_update","callback","mode","Error","_get_deltas_enabled","_set_deltas_enabled","orig_callback","cache","step_delta","row_delta","filterInPlace","a","condition","remove_update","total","console","assert","on_delete","remove_delete","initial_length","column_pivots","aggregates","filter","computed_columns","filter_op","row_pivot_depth","column_pivot_depth","get_row_pivots","make_string_vector","get_column_pivots","get_columns","get_filter","make_2d_val_vector","filter_vector","make_val_vector","filled","push_back","get_sort","make_2d_string_vector","sort_vector","get_computed_columns","computed","computed_vector","column","computed_function_name","inputs","gnode_id","get_gnode","random","initialized","set_update_delegate","compute","_update_callback","e","clear","reset_gnode","replace","update","unregister_gnode","get_schema","types","new_schema","get_table_computed_schema","get_computation_input_types","new_types","is_valid_filter","perspective","FILTER_OPERATORS","isNull","isNotNull","exists","_config","CONFIG_ALIASES","warn","agg","CONFIG_VALID_KEYS","col","vc","v","meter","initialize_profile_thread","_msgs","start","poll","log","toFixed","pdata","cols","ArrayBuffer","Uint8Array","init","trim","header","row_count","has_index","explicit_index","t_dtype","DTYPE_INT32","OP_INSERT","error","remove","get_computed_functions","two_params","functions","f","hasOwnProperty","includes","execute","__module__","worker","data_accessor","Buffer","dynamicTyping","clean","prop","WebWorkerServer","constructor","addEventListener","process","post","msg","transfer","postMessage","WebAssembly","wasmBinary","buffer","wasmJSMethod","then"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as defaults from \"./config/constants.js\";\nimport {get_type_config} from \"./config/index.js\";\nimport {DataAccessor} from \"./data_accessor\";\nimport {DateParser} from \"./data_accessor/date_parser.js\";\nimport {extract_vector, extract_map, fill_vector} from \"./emscripten.js\";\nimport {bindall, get_column_type} from \"./utils.js\";\nimport {Server} from \"./api/server.js\";\n\nimport formatters from \"./view_formatters\";\nimport papaparse from \"papaparse\";\n\n// IE fix - chrono::steady_clock depends on performance.now() which does not\n// exist in IE workers\nif (global.performance === undefined) {\n    global.performance = {now: Date.now};\n}\n\nif (typeof self !== \"undefined\" && self.performance === undefined) {\n    self.performance = {now: Date.now};\n}\n\n/**\n * The main API module for `@finos/perspective`.\n *\n * For more information, see the\n * [Javascript user guide](https://perspective.finos.org/docs/md/js.html).\n *\n * @module perspective\n */\nexport default function(Module) {\n    let __MODULE__ = Module;\n    let accessor = new DataAccessor();\n    const SIDES = [\"zero\", \"one\", \"two\"];\n\n    /***************************************************************************\n     *\n     * Private\n     *\n     */\n\n    let _POOL_DEBOUNCES = {};\n\n    function _set_process(pool, table_id) {\n        if (!_POOL_DEBOUNCES[table_id]) {\n            _POOL_DEBOUNCES[table_id] = pool;\n            setTimeout(() => _call_process(table_id));\n        }\n    }\n\n    function _call_process(table_id) {\n        const pool = _POOL_DEBOUNCES[table_id];\n        if (pool) {\n            pool._process();\n            _remove_process(table_id);\n        }\n    }\n\n    function _remove_process(table_id) {\n        delete _POOL_DEBOUNCES[table_id];\n    }\n\n    /**\n     * Common logic for creating and registering a Table.\n     *\n     * @param {DataAccessor|Object[]} accessor - the data we provide to the\n     * Table\n     * @param {Object} _Table - `undefined` if a new table will be created, or\n     * an `std::shared_ptr<Table>` if updating\n     * @param {Object[]} computed - An array of computed columns to be applied\n     * to the table.\n     * @param {String} index - A column name to be used as a primary key.\n     * @param {Number} limit - an upper bound on the number of rows in the\n     * table. If set, new rows that exceed the limit start overwriting old ones\n     * from row 0.\n     * @param {t_op} op - either `OP_INSERT` or `OP_DELETE`\n     * @param {boolean} is_update - true if we are updating an already-created\n     * table\n     * @param {boolean} is_arrow - true if the dataset is in the Arrow format\n     *\n     * @private\n     * @returns {Table} An `std::shared_ptr<Table>` to a `Table` inside C++.\n     */\n    function make_table(accessor, _Table, index, limit, op, is_update, is_arrow) {\n        _Table = __MODULE__.make_table(_Table, accessor, limit || 4294967295, index, op, is_update, is_arrow);\n\n        const pool = _Table.get_pool();\n        const table_id = _Table.get_id();\n\n        if (is_update || op == __MODULE__.t_op.OP_DELETE) {\n            _set_process(pool, table_id);\n        } else {\n            pool._process();\n        }\n\n        return _Table;\n    }\n\n    /***************************************************************************\n     *\n     * View\n     *\n     */\n\n    /**\n     * A View object represents a specific transform (configuration or pivot,\n     * filter, sort, etc) configuration on an underlying\n     * {@link module:perspective~table}. A View receives all updates from the\n     * {@link module:perspective~table} from which it is derived, and can be\n     * serialized to JSON or trigger a callback when it is updated.  View\n     * objects are immutable, and will remain in memory and actively process\n     * updates until its {@link module:perspective~view#delete} method is\n     * called.\n     *\n     * <strong>Note</strong> This constructor is not public - Views are created\n     * by invoking the {@link module:perspective~table#view} method.\n     *\n     * @example\n     * // Returns a new View, pivoted in the row space by the \"name\" column.\n     * table.view({row_pivots: [\"name\"]});\n     *\n     * @class\n     * @hideconstructor\n     */\n    function view(table, sides, config, view_config, name, callbacks, overridden_types) {\n        this._View = undefined;\n        this.date_parser = new DateParser();\n        this.config = config || {};\n        this.view_config = view_config || new view_config();\n\n        if (sides === 0) {\n            this._View = __MODULE__.make_view_zero(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, this.date_parser);\n        } else if (sides === 1) {\n            this._View = __MODULE__.make_view_one(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, this.date_parser);\n        } else if (sides === 2) {\n            this._View = __MODULE__.make_view_two(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, this.date_parser);\n        }\n\n        this.table = table;\n        this.ctx = this._View.get_context();\n        this.column_only = this._View.is_column_only();\n        this.callbacks = callbacks;\n        this.name = name;\n        this.overridden_types = overridden_types;\n        this._delete_callbacks = [];\n        bindall(this);\n    }\n\n    /**\n     * A copy of the config object passed to the {@link table#view} method which\n     * created this {@link module:perspective~view}.\n     *\n     * @returns {Promise<object>} Shared the same key/values properties as\n     * {@link module:perspective~view}\n     */\n    view.prototype.get_config = function() {\n        return JSON.parse(JSON.stringify(this.config));\n    };\n\n    /**\n     * Delete this {@link module:perspective~view} and clean up all resources\n     * associated with it. View objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     *\n     * @async\n     */\n    view.prototype.delete = function() {\n        _remove_process(this.table.get_id());\n        this._View.delete();\n        this.ctx.delete();\n\n        this.table.views.splice(this.table.views.indexOf(this), 1);\n        this.table = undefined;\n        let i = 0,\n            j = 0;\n        while (i < this.callbacks.length) {\n            let val = this.callbacks[i];\n            if (val.view !== this) this.callbacks[j++] = val;\n            i++;\n        }\n        this.callbacks.length = j;\n        this._delete_callbacks.forEach(cb => cb());\n    };\n\n    /**\n     * How many pivoted sides does this view have?\n     *\n     * @private\n     * @returns {number} sides The number of sides of this `View`.\n     */\n    view.prototype.sides = function() {\n        return this._View.sides();\n    };\n\n    view.prototype._num_hidden = function() {\n        // Count hidden columns.\n        let hidden = 0;\n        for (const sort of this.config.sort) {\n            if (this.config.columns.indexOf(sort[0]) === -1) {\n                hidden++;\n            }\n        }\n        return hidden;\n    };\n\n    function col_path_vector_to_string(vector) {\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            extracted.push(__MODULE__.scalar_to_val(vector.get(i), false, true));\n        }\n        vector.delete();\n        return extracted;\n    }\n\n    const extract_vector_scalar = function(vector) {\n        // handles deletion already - do not call delete() on the input vector\n        // again\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            let item = vector.get(i);\n            extracted.push(col_path_vector_to_string(item));\n        }\n        vector.delete();\n        return extracted;\n    };\n\n    /**\n     * The schema of this {@link module:perspective~view}. A schema is an\n     * Object, the keys of which are the columns of this\n     * {@link module:perspective~view}, and the values are their string type\n     * names. If this {@link module:perspective~view} is aggregated, theses will\n     * be the aggregated types; otherwise these types will be the same as the\n     * columns in the underlying {@link module:perspective~table}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s schema.\n     */\n    view.prototype.schema = function(override = true) {\n        const schema = extract_map(this._View.schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    /**\n     * The computed column schema of this {@link module:perspective~view},\n     * containing only user-created computed columns. A schema is an Object, the\n     * keys of which are the columns of this {@link module:perspective~view},\n     * and the values are their string type names. If this\n     * {@link module:perspective~view} is aggregated, theses will be the\n     * aggregated types; otherwise these types will be the same as the columns\n     * in the underlying {@link module:perspective~table}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s computed column schema.\n     */\n    view.prototype.computed_schema = function(override = true) {\n        const schema = extract_map(this._View.computed_schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    view.prototype._column_names = function(skip = false, depth = 0) {\n        return extract_vector_scalar(this._View.column_names(skip, depth)).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    /**\n     * Returns an array of strings containing the column paths of the View\n     * without any of the source columns.\n     *\n     * A column path shows the columns that a given cell belongs to after pivots\n     * are applied.\n     */\n    view.prototype.column_paths = function() {\n        return extract_vector_scalar(this._View.column_paths()).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    view.prototype.get_data_slice = function(start_row, end_row, start_col, end_col) {\n        const num_sides = this.sides();\n        const nidx = SIDES[num_sides];\n        return __MODULE__[`get_data_slice_${nidx}`](this._View, start_row, end_row, start_col, end_col);\n    };\n\n    /**\n     * Given an `options` Object, calculate the correct start/end rows and\n     * columns, as well as other metadata required by the data formatter.\n     *\n     * @private\n     * @param {Object} options User-provided options for `to_format`.\n     * @returns {Object} an Object containing the parsed options.\n     */\n    const _parse_format_options = function(options) {\n        options = options || {};\n        const max_cols = this._View.num_columns() + (this.sides() === 0 ? 0 : 1);\n        const max_rows = this._View.num_rows();\n        const hidden = this._num_hidden();\n        const psp_offset = this.sides() > 0 || this.column_only ? 1 : 0;\n\n        const viewport = this.config.viewport ? this.config.viewport : {};\n        const start_row = options.start_row || (viewport.top ? viewport.top : 0);\n        const end_row = Math.min(max_rows, options.end_row !== undefined ? options.end_row : viewport.height ? start_row + viewport.height : max_rows);\n        const start_col = options.start_col || (viewport.left ? viewport.left : 0);\n        const end_col = Math.min(max_cols, (options.end_col !== undefined ? options.end_col + psp_offset : viewport.width ? start_col + viewport.width : max_cols) * (hidden + 1));\n\n        // Return the calculated values\n        options.start_row = start_row;\n        options.end_row = end_row;\n        options.start_col = start_col;\n        options.end_col = end_col;\n\n        return options;\n    };\n\n    /**\n     * Generic base function from which `to_json`, `to_columns` etc. derives.\n     *\n     * @private\n     */\n    const to_format = function(options, formatter) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const hidden = this._num_hidden();\n\n        let date_format;\n        if (options.date_format) {\n            date_format = new Intl.DateTimeFormat(options.date_format);\n        }\n\n        const get_pkeys = !!options.index;\n        const get_ids = !!options.id;\n        const leaves_only = !!options.leaves_only;\n        const num_sides = this.sides();\n        const has_row_path = num_sides !== 0 && !this.column_only;\n        const nidx = SIDES[num_sides];\n\n        const slice = this.get_data_slice(start_row, end_row, start_col, end_col);\n        const ns = slice.get_column_names();\n        const col_names = extract_vector_scalar(ns).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n        const schema = this.schema();\n\n        let data = formatter.initDataValue();\n\n        for (let ridx = start_row; ridx < end_row; ridx++) {\n            let row_path = has_row_path ? slice.get_row_path(ridx) : undefined;\n            if (has_row_path && leaves_only && row_path.size() < this.config.row_pivots.length) {\n                row_path.delete();\n                continue;\n            }\n            let row = formatter.initRowValue();\n\n            if (get_ids) {\n                formatter.initColumnValue(data, row, \"__ID__\");\n            }\n\n            for (let cidx = start_col; cidx < end_col; cidx++) {\n                const col_name = col_names[cidx];\n                const col_type = schema[col_name];\n                if (cidx === start_col && num_sides !== 0) {\n                    if (!this.column_only) {\n                        formatter.initColumnValue(data, row, \"__ROW_PATH__\");\n                        for (let i = 0; i < row_path.size(); i++) {\n                            const value = __MODULE__.scalar_to_val(row_path.get(i), false, false);\n                            formatter.addColumnValue(data, row, \"__ROW_PATH__\", value);\n                            if (get_ids) {\n                                formatter.addColumnValue(data, row, \"__ID__\", value);\n                            }\n                        }\n                    }\n                } else if ((cidx - (num_sides > 0 ? 1 : 0)) % (this.config.columns.length + hidden) >= this.config.columns.length) {\n                    // Hidden columns are always at the end, so don't emit\n                    // these.\n                    continue;\n                } else {\n                    let value = __MODULE__[`get_from_data_slice_${nidx}`](slice, ridx, cidx);\n                    if ((col_type === \"datetime\" || col_type === \"date\") && value !== undefined) {\n                        if (date_format) {\n                            value = new Date(value);\n                            value = date_format.format(value);\n                        }\n                    }\n                    formatter.setColumnValue(data, row, col_name, value);\n                }\n            }\n\n            if (get_pkeys) {\n                const keys = slice.get_pkeys(ridx, 0);\n                formatter.initColumnValue(data, row, \"__INDEX__\");\n                for (let i = 0; i < keys.size(); i++) {\n                    // TODO: if __INDEX__ and set index have the same value,\n                    // don't we need to make sure that it only emits one?\n                    const value = __MODULE__.scalar_to_val(keys.get(i), false, false);\n                    formatter.addColumnValue(data, row, \"__INDEX__\", value);\n                }\n            }\n\n            // we could add an api to just clone the index column if\n            // it's already calculated\n            if (get_ids && num_sides === 0) {\n                const keys = slice.get_pkeys(ridx, 0);\n                for (let i = 0; i < keys.size(); i++) {\n                    const value = __MODULE__.scalar_to_val(keys.get(i), false, false);\n                    formatter.addColumnValue(data, row, \"__ID__\", value);\n                }\n            }\n\n            if (row_path) {\n                row_path.delete();\n            }\n            formatter.addRow(data, row);\n        }\n\n        slice.delete();\n        return formatter.formatData(data, options.config);\n    };\n\n    /**\n     * Generic base function for returning serialized data for a single column.\n     *\n     * @private\n     */\n    const column_to_format = function(col_name, options, format_function) {\n        const num_rows = this.num_rows();\n        const start_row = options.start_row || 0;\n        const end_row = options.end_row || num_rows;\n        const names = this._column_names();\n        let idx = names.indexOf(col_name);\n\n        if (idx === -1) {\n            return undefined;\n        }\n\n        // mutate the column index if necessary: in pivoted views, columns start\n        // at 1\n        const num_sides = this.sides();\n        if (num_sides > 0) {\n            idx++;\n        }\n\n        // use a specified data slice, if provided\n        let slice, data_slice;\n\n        if (!options.data_slice) {\n            data_slice = this.get_data_slice(start_row, end_row, idx, idx + 1);\n            slice = data_slice.get_slice();\n        } else {\n            slice = options.data_slice.get_column_slice(idx);\n        }\n\n        const dtype = this._View.get_column_dtype(idx);\n\n        const rst = format_function(slice, dtype, idx);\n        slice.delete();\n        if (data_slice) {\n            data_slice.delete();\n        }\n        return rst;\n    };\n\n    /**\n     * Serializes this view to JSON data in a column-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @param {boolean} [config.index=false] Should the index from the\n     * underlying {@link module:perspective~table} be in the output (as\n     * `\"__INDEX__\"`).\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_columns = function(options) {\n        return to_format.call(this, options, formatters.jsonTableFormatter);\n    };\n\n    /**\n     * Serializes this view to JSON data in a row-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_json = function(options) {\n        return to_format.call(this, options, formatters.jsonFormatter);\n    };\n\n    /**\n     * Serializes this view to CSV data in a standard format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @param {Object} options.config A config object for the Papaparse\n     * {@link https://www.papaparse.com/docs#json-to-csv} config object.\n     *\n     * @returns {Promise<string>} A Promise resolving to a string in CSV format\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row will have prepended those values\n     * specified by this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_csv = function(options) {\n        return to_format.call(this, options, formatters.csvFormatter);\n    };\n\n    /**\n     * Serializes a view column into a TypedArray.\n     *\n     * @async\n     *\n     * @param {string} column_name The name of the column to serialize.\n     *\n     * @param {Object} options An optional configuration object.\n     *\n     * @param {*} options.data_slice A data slice object from which to\n     * serialize.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     *\n     * @returns {Promise<TypedArray>} A promise resolving to a TypedArray\n     * representing the data of the column as retrieved from the\n     * {@link module:perspective~view} - all pivots, aggregates, sorts, and\n     * filters have been applied onto the values inside the TypedArray. The\n     * TypedArray will be constructed based on data type - integers will resolve\n     * to Int8Array, Int16Array, or Int32Array. Floats resolve to Float32Array\n     * or Float64Array. If the column cannot be found, or is not of an\n     * integer/float type, the Promise returns undefined.\n     */\n    view.prototype.col_to_js_typed_array = function(col_name, options = {}) {\n        const format_function = __MODULE__[`col_to_js_typed_array`];\n        return column_to_format.call(this, col_name, options, format_function);\n    };\n\n    /**\n     * Serializes a view to the Apache Arrow data format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     *\n     * @param {*} options.data_slice A data slice object from which to\n     * serialize.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<ArrayBuffer>} An `ArrayBuffer` in the Apache Arrow\n     * format containing data from the view.\n     */\n    view.prototype.to_arrow = function(options = {}) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const sides = this.sides();\n\n        if (sides === 0) {\n            return __MODULE__.to_arrow_zero(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 1) {\n            return __MODULE__.to_arrow_one(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 2) {\n            return __MODULE__.to_arrow_two(this._View, start_row, end_row, start_col, end_col);\n        }\n    };\n\n    /**\n     * The number of aggregated rows in this {@link module:perspective~view}.\n     * This is affected by the \"row_pivots\" configuration parameter supplied to\n     * this {@link module:perspective~view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated rows.\n     */\n    view.prototype.num_rows = function() {\n        return this._View.num_rows();\n    };\n\n    /**\n     * The number of aggregated columns in this {@link view}.  This is affected\n     * by the \"column_pivots\" configuration parameter supplied to this\n     * {@link view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated columns.\n     */\n    view.prototype.num_columns = function() {\n        const ncols = this._View.num_columns();\n        const nhidden = this._num_hidden();\n        return ncols - (ncols / (this.config.columns.length + nhidden)) * nhidden;\n    };\n\n    /**\n     * Whether this row at index `idx` is in an expanded or collapsed state.\n     *\n     * @async\n     *\n     * @returns {Promise<bool>} Whether this row is expanded.\n     */\n    view.prototype.get_row_expanded = function(idx) {\n        return this._View.get_row_expanded(idx);\n    };\n\n    /**\n     * Expands the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.expand = function(idx) {\n        return this._View.expand(idx, this.config.row_pivots.length);\n    };\n\n    /**\n     * Collapses the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.collapse = function(idx) {\n        return this._View.collapse(idx);\n    };\n\n    /**\n     * Set expansion `depth` of the pivot tree.\n     *\n     */\n    view.prototype.set_depth = function(depth) {\n        return this._View.set_depth(depth, this.config.row_pivots.length);\n    };\n\n    /**\n     * Returns the data of all changed rows in JSON format, or for 1+ sided\n     * contexts the entire dataset of the view.\n     * @private\n     */\n    view.prototype._get_step_delta = async function() {\n        let delta = this._View.get_step_delta(0, 2147483647);\n        let data;\n        if (delta.cells.size() === 0) {\n            // FIXME This is currently not implemented for 1+ sided contexts.\n            data = this.to_json();\n        } else {\n            let rows = {};\n            for (let x = 0; x < delta.cells.size(); x++) {\n                rows[delta.cells.get(x).row] = true;\n            }\n            rows = Object.keys(rows);\n            const results = rows.map(row =>\n                this.to_json({\n                    start_row: Number.parseInt(row),\n                    end_row: Number.parseInt(row) + 1\n                })\n            );\n            data = [].concat.apply([], results);\n        }\n        delta.cells.delete();\n        return data;\n    };\n\n    /**\n     * Returns an Arrow-serialized dataset that contains the data from updated\n     * rows. Do not call this function directly, instead use the\n     * {@link module:perspective~view}'s `on_update` method with `{mode: \"row\"}`\n     * in order to access the row deltas.\n     *\n     * @private\n     */\n    view.prototype._get_row_delta = async function() {\n        const sides = this.sides();\n        const nidx = SIDES[sides];\n        return __MODULE__[`get_row_delta_${nidx}`](this._View);\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}.  Whenever\n     * the {@link module:perspective~view}'s underlying table emits an update,\n     * this callback will be invoked with the aggregated row deltas.\n     *\n     * @param {function} callback A callback function invoked on update.  The\n     * parameter to this callback is dependent on the `mode` parameter:\n     *     - \"none\" (default): The callback is invoked without an argument.\n     *     - \"cell\": The callback is invoked with the new data for each updated\n     *           cell, serialized to JSON format.\n     *     - \"row\": The callback is invoked with an Arrow of the updated rows.\n     */\n    view.prototype.on_update = function(callback, {mode = \"none\"} = {}) {\n        _call_process(this.table.get_id());\n        if ([\"none\", \"cell\", \"row\"].indexOf(mode) === -1) {\n            throw new Error(`Invalid update mode \"${mode}\" - valid modes are \"none\", \"cell\" and \"row\".`);\n        }\n        if (mode === \"cell\" || mode === \"row\") {\n            // Enable deltas only if needed by callback\n            if (!this._View._get_deltas_enabled()) {\n                this._View._set_deltas_enabled(true);\n            }\n        }\n        this.callbacks.push({\n            view: this,\n            orig_callback: callback,\n            callback: async cache => {\n                switch (mode) {\n                    case \"cell\":\n                        {\n                            if (cache.step_delta === undefined) {\n                                cache.step_delta = await this._get_step_delta();\n                            }\n                            callback(cache.step_delta);\n                        }\n                        break;\n                    case \"row\":\n                        {\n                            if (cache.row_delta === undefined) {\n                                cache.row_delta = await this._get_row_delta();\n                            }\n                            callback(cache.row_delta);\n                        }\n                        break;\n                    default: {\n                        callback();\n                    }\n                }\n            }\n        });\n    };\n\n    function filterInPlace(a, condition) {\n        let i = 0,\n            j = 0;\n\n        while (i < a.length) {\n            const val = a[i];\n            if (condition(val, i, a)) a[j++] = val;\n            i++;\n        }\n\n        a.length = j;\n        return a;\n    }\n\n    view.prototype.remove_update = function(callback) {\n        _call_process(this.table.get_id());\n        const total = this.callbacks.length;\n        filterInPlace(this.callbacks, x => x.orig_callback !== callback);\n        console.assert(total > this.callbacks.length, `\"callback\" does not match a registered updater`);\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}.  Whenever\n     * the {@link module:perspective~view} is deleted, this callback will be\n     * invoked.\n     *\n     * @param {function} callback A callback function invoked on delete.\n     */\n    view.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~view}.\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    view.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * A view config is a set of options that configures the underlying\n     * {@link module:perspective~view}, specifying its pivots, columns to show,\n     * aggregates, filters, and sorts.\n     *\n     * The view config receives an `Object` containing configuration options,\n     * and the `view_config` transforms it into a canonical format for\n     * interfacing with the core engine.\n     *\n     * <strong>Note</strong> This constructor is not public - view config\n     * objects should be created using standard Javascript `Object`s in the\n     * {@link module:perspective~table#view} method, which has an `options`\n     * parameter.\n     *\n     * @param {Object} config the configuration `Object` passed by the user to\n     * the {@link module:perspective~table#view} method.\n     * @private\n     * @class\n     * @hideconstructor\n     */\n    function view_config(config) {\n        this.row_pivots = config.row_pivots || [];\n        this.column_pivots = config.column_pivots || [];\n        this.aggregates = config.aggregates || {};\n        this.columns = config.columns;\n        this.filter = config.filter || [];\n        this.sort = config.sort || [];\n        this.computed_columns = config.computed_columns || [];\n        this.filter_op = config.filter_op || \"and\";\n        this.row_pivot_depth = config.row_pivot_depth;\n        this.column_pivot_depth = config.column_pivot_depth;\n    }\n\n    /**\n     * Transform configuration items into `std::vector` objects for interface\n     * with C++. `this.aggregates` is not transformed into a C++ map, as the use\n     * of `ordered_map` in the engine makes binding more difficult.\n     *\n     * @private\n     */\n    view_config.prototype.get_row_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.row_pivots);\n    };\n\n    view_config.prototype.get_column_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.column_pivots);\n    };\n\n    view_config.prototype.get_columns = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.columns);\n    };\n\n    view_config.prototype.get_filter = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let filter of this.filter) {\n            let filter_vector = __MODULE__.make_val_vector();\n            let filled = fill_vector(filter_vector, filter);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_sort = function() {\n        let vector = __MODULE__.make_2d_string_vector();\n        for (let sort of this.sort) {\n            let sort_vector = __MODULE__.make_string_vector();\n            let filled = fill_vector(sort_vector, sort);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_computed_columns = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let computed of this.computed_columns) {\n            let computed_vector = __MODULE__.make_val_vector();\n            computed_vector.push_back(computed.column);\n            computed_vector.push_back(computed.computed_function_name);\n            // make this input_columns\n            computed_vector.push_back(computed.inputs);\n            vector.push_back(computed_vector);\n        }\n        return vector;\n    };\n\n    /***************************************************************************\n     *\n     * Table\n     *\n     */\n\n    /**\n     * A Table object is the basic data container in Perspective.  Tables are\n     * typed - they have an immutable set of column names, and a known type for\n     * each.\n     *\n     * <strong>Note</strong> This constructor is not public - Tables are created\n     * by invoking the {@link module:perspective~table} factory method, either\n     * on the perspective module object, or an a\n     * {@link module:perspective~worker} instance.\n     *\n     * @class\n     * @hideconstructor\n     */\n    function table(_Table, index, computed, limit, overridden_types) {\n        this._Table = _Table;\n        this.gnode_id = this._Table.get_gnode().get_id();\n        this.name = Math.random() + \"\";\n        this.initialized = false;\n        this.index = index;\n        this._Table.get_pool().set_update_delegate(this);\n        this.computed = computed || [];\n        this.callbacks = [];\n        this.views = [];\n        this.limit = limit;\n        this.overridden_types = overridden_types;\n        this._delete_callbacks = [];\n        bindall(this);\n    }\n\n    table.prototype.compute = function() {\n        return true;\n    };\n\n    table.prototype.get_id = function() {\n        return this._Table.get_id();\n    };\n\n    table.prototype.get_pool = function() {\n        return this._Table.get_pool();\n    };\n\n    table.prototype._update_callback = function() {\n        let cache = {};\n        for (let e in this.callbacks) {\n            this.callbacks[e].callback(cache);\n        }\n    };\n\n    /**\n     * Remove all rows in this {@link module:perspective~table} while preserving\n     * the schema and construction options.\n     */\n    table.prototype.clear = function() {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n    };\n\n    /**\n     * Replace all rows in this {@link module:perspective~table} the input data.\n     */\n    table.prototype.replace = function(data) {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n        this.update(data);\n        _call_process(this.get_id());\n    };\n\n    /**\n     * Delete this {@link module:perspective~table} and clean up all resources\n     * associated with it. Table objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     */\n    table.prototype.delete = function() {\n        if (this.views.length > 0) {\n            throw `Cannot delete Table as it still has ${this.views.length} registered View(s).`;\n        }\n        _remove_process(this.get_id());\n        this._Table.unregister_gnode(this.gnode_id);\n        this._Table.delete();\n        this._delete_callbacks.forEach(callback => callback());\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~table}.  Whenever\n     * the {@link module:perspective~table} is deleted, this callback will be\n     * invoked.\n     *\n     * @param {function} callback A callback function invoked on delete.  The\n     *     parameter to this callback shares a structure with the return type of\n     *     {@link module:perspective~table#to_json}.\n     */\n    table.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~table}.\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    table.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * The number of accumulated rows in this {@link module:perspective~table}.\n     * This is affected by the \"index\" configuration parameter supplied to this\n     * {@link module:perspective~view}'s contructor - as rows will be\n     * overwritten when they share an idnex column.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of accumulated rows.\n     */\n    table.prototype.size = function() {\n        _call_process(this._Table.get_id());\n        return this._Table.size();\n    };\n\n    /**\n     * The schema of this {@link module:perspective~table}.  A schema is an\n     * Object whose keys are the columns of this\n     * {@link module:perspective~table}, and whose values are their string type\n     * names.\n     *\n     * @async\n     * @param {boolean} computed Should computed columns be included? (default\n     * false)\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~table}'s schema.\n     */\n    table.prototype.schema = function(override = true) {\n        let schema = this._Table.get_schema();\n        let columns = schema.columns();\n        let types = schema.types();\n        let new_schema = {};\n        for (let key = 0; key < columns.size(); key++) {\n            const name = columns.get(key);\n            if (name === \"psp_okey\") {\n                continue;\n            }\n            if (override && this.overridden_types[name]) {\n                new_schema[name] = this.overridden_types[name];\n            } else {\n                new_schema[name] = get_column_type(types.get(key).value);\n            }\n        }\n        schema.delete();\n        columns.delete();\n        types.delete();\n        return new_schema;\n    };\n\n    /**\n     * Given an array of computed column definitions, perform type lookups to\n     * create a schema for the computed column without calculating or\n     * constructing any new columns.\n     *\n     * @async\n     * @param {Array<Object>} computed_columns an array of computed column\n     * definitions.\n     *\n     * @returns {Promise<Object>} A Promise that resolves to a computed schema\n     * based on the computed column definitions provided.\n     */\n    table.prototype.computed_schema = function(computed_columns, override = true) {\n        const new_schema = {};\n\n        if (!computed_columns || computed_columns.length === 0) return new_schema;\n\n        // Before passing into C++, transform array of objects into vector of\n        // Tuples expected by the Emscripten binding function.\n        let vector = __MODULE__.make_2d_val_vector();\n\n        for (let computed of computed_columns) {\n            let computed_vector = __MODULE__.make_val_vector();\n            computed_vector.push_back(computed.column);\n            computed_vector.push_back(computed.computed_function_name);\n            computed_vector.push_back(computed.inputs);\n            vector.push_back(computed_vector);\n        }\n\n        let computed_schema = __MODULE__.get_table_computed_schema(this._Table, vector);\n        let columns = computed_schema.columns();\n        let types = computed_schema.types();\n\n        for (let key = 0; key < columns.size(); key++) {\n            const name = columns.get(key);\n            const type = types.get(key);\n            if (override && this.overridden_types[name]) {\n                new_schema[name] = this.overridden_types[name];\n            } else {\n                new_schema[name] = get_column_type(type.value);\n            }\n        }\n\n        computed_schema.delete();\n        columns.delete();\n        types.delete();\n\n        return new_schema;\n    };\n\n    /**\n     * Given a computed function name, return an array of strings containing\n     * the expected input column types for the computed function.\n     *\n     * @private\n     * @async\n     * @param {String} computed_function_name\n     * @returns {Promise<Array<String>>}\n     */\n    table.prototype.get_computation_input_types = function(computed_function_name) {\n        const types = __MODULE__.get_computation_input_types(computed_function_name);\n        const new_types = [];\n\n        for (let i = 0; i < types.size(); i++) {\n            const type = types.get(i);\n            new_types.push(get_column_type(type.value));\n        }\n\n        return new_types;\n    };\n\n    /**\n     * Validates a filter configuration, i.e. that the value to filter by is not\n     * null or undefined.\n     *\n     * @param {Array<string>} [filter] a filter configuration to test.\n     */\n    table.prototype.is_valid_filter = function(filter) {\n        // isNull and isNotNull filter operators are always valid and apply to\n        // all schema types\n        if (filter[1] === perspective.FILTER_OPERATORS.isNull || filter[1] === perspective.FILTER_OPERATORS.isNotNull) {\n            return true;\n        }\n\n        let value = filter[2];\n        if (value === null) {\n            return false;\n        }\n\n        const schema = this.schema();\n        const exists = schema[filter[0]];\n        if (exists && (schema[filter[0]] === \"date\" || schema[filter[0]] === \"datetime\")) {\n            value = new DateParser().parse(value);\n        }\n\n        return typeof value !== \"undefined\" && value !== null;\n    };\n\n    /* eslint-disable max-len */\n\n    /**\n     * Create a new {@link module:perspective~view} from this table with a\n     * specified configuration. For a conceptual understanding of the\n     * configuration options, see the [Conceptual Overview](https://perspective.finos.org/docs/md/installation.html).\n     *\n     * @param {Object} [config] The configuration object for this\n     * {@link module:perspective~view}.\n     * @param {Array<string>} [config.row_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Row_labels Row Pivots}.\n     * @param {Array<string>} [config.column_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Column_labels Column Pivots}.\n     * @param {Array<Object>} [config.columns] An array of column names for the\n     * output columns. If none are provided, all columns are output.\n     * @param {Object} [config.aggregates] An object, the keys of which are\n     * column names, and their respective values are the aggregates calculations\n     * to use when this view has `row_pivots`. A column provided to\n     * `config.columns` without an aggregate in this object, will use the\n     * default aggregate calculation for its type.\n     * @param {Array<Array<string>>} [config.filter] An Array of Filter\n     * configurations to apply. A filter configuration is an array of 3\n     * elements: A column name, a supported filter comparison string (e.g.\n     * '===', '>'), and a value to compare.\n     * @param {Array<string>} [config.sort] An Array of Sort configurations to\n     * apply. A sort configuration is an array of 2 elements: A column name, and\n     * a sort direction, which are: \"none\", \"asc\", \"desc\", \"col asc\", \"col\n     * desc\", \"asc abs\", \"desc abs\", \"col asc abs\", \"col desc abs\".\n     *\n     * @example\n     * var view = table.view({\n     *      row_pivots: [\"region\"],\n     *      columns: [\"region\"],\n     *      aggregates: {\"region\": \"dominant\"},\n     *      filter: [[\"client\", \"contains\", \"fred\"]],\n     *      sort: [[\"value\", \"asc\"]]\n     * });\n     *\n     * @returns {view} A new {@link module:perspective~view} object for the\n     * supplied configuration, bound to this table\n     */\n    table.prototype.view = function(_config = {}) {\n        _call_process(this._Table.get_id());\n        let config = {};\n        for (const key of Object.keys(_config)) {\n            if (defaults.CONFIG_ALIASES[key]) {\n                if (!config[defaults.CONFIG_ALIASES[key]]) {\n                    console.warn(`Deprecated: \"${key}\" config parameter, please use \"${defaults.CONFIG_ALIASES[key]}\" instead`);\n                    config[defaults.CONFIG_ALIASES[key]] = _config[key];\n                } else {\n                    throw new Error(`Duplicate configuration parameter \"${key}\"`);\n                }\n            } else if (key === \"aggregate\") {\n                console.warn(`Deprecated: \"aggregate\" config parameter has been replaced by \"aggregates\" and \"columns\"`);\n                // backwards compatibility: deconstruct `aggregate` into\n                // `aggregates` and `columns`\n                config[\"aggregates\"] = {};\n                config[\"columns\"] = [];\n                for (const agg of _config[\"aggregate\"]) {\n                    config[\"aggregates\"][agg[\"column\"]] = agg[\"op\"];\n                    config[\"columns\"].push(agg[\"column\"]);\n                }\n            } else if (defaults.CONFIG_VALID_KEYS.indexOf(key) > -1) {\n                config[key] = _config[key];\n            } else {\n                throw new Error(`Unrecognized config parameter \"${key}\"`);\n            }\n        }\n\n        config.row_pivots = config.row_pivots || [];\n        config.column_pivots = config.column_pivots || [];\n        config.aggregates = config.aggregates || {};\n        config.filter = config.filter || [];\n        config.sort = config.sort || [];\n        config.computed_columns = config.computed_columns || [];\n\n        if (config.columns === undefined) {\n            // If columns are not provided, use all columns\n            config.columns = this.columns();\n            if (config.computed_columns.length > 0) {\n                for (let col of config.computed_columns) {\n                    config.columns.push(col.column);\n                }\n            }\n        }\n\n        let name = Math.random() + \"\";\n        let sides;\n\n        if (config.row_pivots.length > 0 || config.column_pivots.length > 0) {\n            if (config.column_pivots && config.column_pivots.length > 0) {\n                sides = 2;\n            } else {\n                sides = 1;\n            }\n        } else {\n            sides = 0;\n        }\n\n        let vc = new view_config(config);\n        let v = new view(this, sides, config, vc, name, this.callbacks, this.overridden_types);\n        this.views.push(v);\n        return v;\n    };\n\n    /* eslint-enable max-len */\n\n    let meter;\n\n    function initialize_profile_thread() {\n        if (meter === undefined) {\n            let _msgs = 0;\n            let start = performance.now();\n            setTimeout(function poll() {\n                let now = performance.now();\n                console.log(`${((1000 * _msgs) / (now - start)).toFixed(2)} msgs/sec`);\n                _msgs = 0;\n                start = now;\n                setTimeout(poll, 5000);\n            }, 5000);\n            meter = function update(x) {\n                _msgs += x;\n            };\n            console.log(\"Profiling initialized\");\n        }\n    }\n\n    /**\n     * Updates the rows of a {@link module:perspective~table}. Updated rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Object<string, Array>|Array<Object>|string} data The input data\n     * for this table. {@link module:perspective~table}s are immutable after\n     * creation, so this method cannot be called with a schema.\n     *\n     * Otherwise, the supported input types are the same as the\n     * {@link module:perspective~table} constructor.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.update = function(data) {\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n\n        pdata = accessor;\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else if (typeof data === \"string\") {\n            if (data[0] === \",\") {\n                data = \"_\" + data;\n            }\n            accessor.init(papaparse.parse(data.trim(), {header: true}).data);\n            accessor.names = cols.concat(accessor.names.filter(x => x === \"__INDEX__\"));\n            accessor.types = extract_vector(types).slice(0, accessor.names.length);\n\n            if (meter) {\n                meter(accessor.row_count);\n            }\n        } else {\n            accessor.init(data);\n            accessor.names = cols.concat(accessor.names.filter(x => x === \"__INDEX__\"));\n            accessor.types = extract_vector(types).slice(0, cols.length);\n\n            if (meter) {\n                meter(accessor.row_count);\n            }\n        }\n\n        if (!is_arrow) {\n            if (pdata.row_count === 0) {\n                console.warn(\"table.update called with no data - ignoring\");\n                return;\n            }\n\n            // process implicit index column\n            const has_index = accessor.names.indexOf(\"__INDEX__\");\n            if (has_index != -1) {\n                const explicit_index = !!this.index;\n                if (explicit_index) {\n                    // find the type of the index column\n                    accessor.types.push(accessor.types[accessor.names.indexOf(this.index)]);\n                } else {\n                    // default index is an integer\n                    accessor.types.push(__MODULE__.t_dtype.DTYPE_INT32);\n                }\n            }\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_INSERT;\n            // update the Table in C++, but don't keep the returned Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index || \"\", this.limit, op, true, is_arrow);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Update failed: ${e}`);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * Removes the rows of a {@link module:perspective~table}. Removed rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Array<Object>} data An array of primary keys to remove.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.remove = function(data) {\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n\n        data = data.map(idx => ({[this.index]: idx}));\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else {\n            accessor.init(data);\n            accessor.names = [this.index];\n            accessor.types = [extract_vector(types)[cols.indexOf(this.index)]];\n            pdata = accessor;\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_DELETE;\n            // update the Table in C++, but don't keep the returned Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index || \"\", this.limit, op, false, is_arrow);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Remove failed`, e);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * Return an Object containing computed function metadata. Keys are strings,\n     * and each value is an Object containing the following metadata:\n     *\n     * - computed_function_name: the name of the computed function\n     * - input_type: the type of its input columns (all input columns are of\n     * the same type)\n     * - return_type: the return type of its output column\n     * - group: a category for the function\n     * - num_params: the number of input parameters\n     * - format_function: an anonymous function used for naming new columns\n     */\n    table.prototype.get_computed_functions = function() {\n        const two_params = [\"add\", \"subtract\", \"multiply\", \"divide\", \"percent_a_of_b\", \"concat_space\", \"concat_comma\"];\n        let functions = extract_map(__MODULE__.get_computed_functions());\n        for (const f in functions) {\n            if (functions.hasOwnProperty(f)) {\n                functions[f] = extract_map(functions[f]);\n                functions[f][\"num_params\"] = two_params.includes(f) ? 2 : 1;\n            }\n        }\n        console.log(functions);\n        return functions;\n    };\n\n    /**\n     * The column names of this table.\n     *\n     * @async\n     * @param {boolean} computed Should computed columns be included? (default\n     * false)\n     * @returns {Promise<Array<string>>} An array of column names for this\n     * table.\n     */\n    table.prototype.columns = function() {\n        let schema = this._Table.get_schema();\n        let cols = schema.columns();\n        let names = [];\n        for (let cidx = 0; cidx < cols.size(); cidx++) {\n            let name = cols.get(cidx);\n            if (name !== \"psp_okey\") {\n                names.push(name);\n            }\n        }\n        schema.delete();\n        cols.delete();\n        return names;\n    };\n\n    table.prototype.execute = function(f) {\n        f(this);\n    };\n\n    /***************************************************************************\n     *\n     * Perspective\n     *\n     */\n\n    const perspective = {\n        __module__: __MODULE__,\n\n        Server,\n\n        worker: function() {\n            return this;\n        },\n\n        initialize_profile_thread,\n\n        /**\n         * A factory method for constructing {@link module:perspective~table}s.\n         *\n         * @example\n         * // Creating a table directly from node\n         * var table = perspective.table([{x: 1}, {x: 2}]);\n         *\n         * @example\n         * // Creating a table from a Web Worker (instantiated via the worker()\n         * method).\n         * var table = worker.table([{x: 1}, {x: 2}]);\n         *\n         * @param {Object<string, Array>|Object<string,\n         *     string>|Array<Object>|string} data The input data for this table.\n         *     When supplied an Object with string values, an empty table is\n         *     returned using this Object as a schema. When an Object with\n         *     Array values is supplied, a table is returned using this object's\n         *     key/value pairs as name/columns respectively. When an Array is\n         *     supplied, a table is constructed using this Array's objects as\n         *     rows. When a string is supplied, the parameter as parsed as a\n         *     CSV.\n         * @param {Object} [options] An optional options dictionary.\n         * @param {string} options.index The name of the column in the resulting\n         *     table to treat as an index. When updating this table, rows\n         *     sharing an index of a new row will be overwritten. `index` is\n         *     mutually exclusive to `limit`.\n         * @param {integer} options.limit The maximum number of rows that can be\n         *     added to this table. When exceeded, old rows will be overwritten\n         *     in the order they were inserted. `limit` is mutually exclusive\n         *     to `index`.\n         *\n         * @returns {table} A new {@link module:perspective~table} object.\n         */\n        table: function(data, options) {\n            options = options || {};\n            options.index = options.index || \"\";\n\n            let data_accessor;\n            let is_arrow = false;\n            let overridden_types = {};\n\n            if (data instanceof ArrayBuffer || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\n                data_accessor = new Uint8Array(data);\n                is_arrow = true;\n            } else {\n                if (typeof data === \"string\") {\n                    if (data[0] === \",\") {\n                        data = \"_\" + data;\n                    }\n                    data = papaparse.parse(data.trim(), {dynamicTyping: true, header: true}).data;\n                }\n\n                accessor.clean();\n                overridden_types = accessor.init(data);\n                data_accessor = accessor;\n            }\n\n            if (options.index && options.limit) {\n                throw `Cannot specify both index '${options.index}' and limit '${options.limit}'.`;\n            }\n\n            let _Table;\n\n            try {\n                const op = __MODULE__.t_op.OP_INSERT;\n                _Table = make_table(data_accessor, undefined, options.index, options.limit, op, false, is_arrow);\n                return new table(_Table, options.index, undefined, options.limit, overridden_types);\n            } catch (e) {\n                if (_Table) {\n                    _Table.delete();\n                }\n                console.error(`Table initialization failed: ${e}`);\n                throw e;\n            }\n        }\n    };\n\n    for (let prop of Object.keys(defaults)) {\n        perspective[prop] = defaults[prop];\n    }\n\n    /**\n     * Hosting Perspective\n     *\n     * Create a WebWorker API that loads perspective in `init` and extends\n     * `post` using the worker's `postMessage` method.\n     *\n     * If Perspective is running inside a Web Worker, use the WebSorkerServer as\n     * default.\n     *\n     * @extends Server\n     * @private\n     */\n    class WebWorkerServer extends Server {\n        /**\n         * On initialization, listen for messages posted from the client and\n         * send it to `Server.process()`.\n         *\n         * @param perspective a reference to the Perspective module, allowing\n         * the `Server` to access Perspective methods.\n         */\n        constructor(perspective) {\n            super(perspective);\n            self.addEventListener(\"message\", e => this.process(e.data), false);\n        }\n\n        /**\n         * Implements the `Server`'s `post()` method using the Web Worker\n         * `postMessage()` API.\n         *\n         * @param {Object} msg a message to pass to the client\n         * @param {*} transfer a transferable object to pass to the client, if\n         * needed\n         */\n        post(msg, transfer) {\n            self.postMessage(msg, transfer);\n        }\n\n        /**\n         * When initialized, replace Perspective's internal `__MODULE` variable\n         * with the WASM binary.\n         *\n         * @param {ArrayBuffer} buffer an ArrayBuffer or Buffer containing the\n         * Perspective WASM code\n         */\n        init(msg) {\n            if (typeof WebAssembly === \"undefined\") {\n                throw new Error(\"WebAssembly not supported\");\n            } else {\n                console.log(\"Loading wasm\");\n                __MODULE__ = __MODULE__({\n                    wasmBinary: msg.buffer,\n                    wasmJSMethod: \"native-wasm\"\n                }).then(() => super.init(msg));\n            }\n        }\n    }\n\n    /**\n     * Use WebSorkerServer as default inside a Web Worker, where `window` is\n     * replaced with `self`.\n     */\n    if (typeof self !== \"undefined\" && self.addEventListener) {\n        new WebWorkerServer(perspective);\n    }\n\n    return perspective;\n}\n"],"file":"perspective.js"}