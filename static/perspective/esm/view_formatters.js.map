{"version":3,"sources":["../../src/js/view_formatters.js"],"names":["papaparse","jsonFormatter","initDataValue","initRowValue","initColumnValue","data","row","colName","setColumnValue","value","addColumnValue","unshift","addRow","push","formatData","slice","start","csvFormatter","Object","assign","split","join","config","unparse","jsonTableFormatter","length","new_data","x"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport papaparse from \"papaparse\";\n\nconst jsonFormatter = {\n    initDataValue: () => [],\n    initRowValue: () => ({}),\n    initColumnValue: (data, row, colName) => (row[colName] = []),\n    setColumnValue: (data, row, colName, value) => (row[colName] = value),\n    addColumnValue: (data, row, colName, value) => row[colName].unshift(value),\n    addRow: (data, row) => data.push(row),\n    formatData: data => data,\n    slice: (data, start) => data.slice(start)\n};\n\nconst csvFormatter = Object.assign({}, jsonFormatter, {\n    addColumnValue: (data, row, colName, value) => row[colName.split(\"|\").join(\",\")].unshift(value),\n    setColumnValue: (data, row, colName, value) => (row[colName.split(\"|\").join(\",\")] = value),\n    formatData: (data, config) => papaparse.unparse(data, config)\n});\n\nconst jsonTableFormatter = {\n    initDataValue: () => new Object(),\n    initRowValue: () => {},\n    setColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName].push(value);\n    },\n    addColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName][data[colName].length - 1].unshift(value);\n    },\n    initColumnValue: (data, row, colName) => {\n        data[colName] = data[colName] || [];\n        data[colName].push([]);\n    },\n    addRow: () => {},\n    formatData: data => data,\n    slice: (data, start) => {\n        let new_data = {};\n        for (let x in data) {\n            new_data[x] = data[x].slice(start);\n        }\n        return new_data;\n    }\n};\n\nexport default {\n    jsonFormatter,\n    jsonTableFormatter,\n    csvFormatter\n};\n"],"file":"view_formatters.js"}