{"version":3,"sources":["../../src/js/websocket.js"],"names":["Client","Server","HEARTBEAT_TIMEOUT","CLIENT_ID_GEN","WebSocketClient","constructor","ws","_ws","binaryType","onopen","send","id","cmd","heartbeat","setTimeout","onmessage","msg","data","_pending_arrow","_handle","JSON","parse","is_transferable","stringify","terminate","Promise","resolve","onclose","close","WebSocketManager","args","requests_id_map","Map","requests","websockets","setInterval","Object","entries","forEach","isAlive","add_connection","on","compoundId","set","process","e","console","error","clear_views","post","transferable","req","readyState","Error","get","subscribe","delete","_host","cache","name","input","undefined","on_delete","host_table","table","_tables","host_view","view","_views","eject_table","eject_view"],"mappings":"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","sourcesContent":["import {Client} from \"./api/client.js\";\nimport {Server} from \"./api/server.js\";\n\nconst HEARTBEAT_TIMEOUT = 15000;\nlet CLIENT_ID_GEN = 0;\n\nexport class WebSocketClient extends Client {\n    constructor(ws) {\n        super();\n        this._ws = ws;\n        this._ws.binaryType = \"arraybuffer\";\n        this._ws.onopen = () => {\n            this.send({id: -1, cmd: \"init\"});\n        };\n        const heartbeat = () => {\n            this._ws.send(\"heartbeat\");\n            setTimeout(heartbeat, HEARTBEAT_TIMEOUT);\n        };\n        setTimeout(heartbeat, 15000);\n        this._ws.onmessage = msg => {\n            if (msg.data === \"heartbeat\") {\n                return;\n            }\n            if (this._pending_arrow) {\n                this._handle({data: {id: this._pending_arrow, data: msg.data}});\n                delete this._pending_arrow;\n            } else {\n                msg = JSON.parse(msg.data);\n\n                // If the `is_transferable` flag is set, the worker expects the\n                // next message to be a transferable object. This sets the\n                // `_pending_arrow` flag, which triggers a special handler for\n                // the ArrayBuffer containing arrow data.\n                if (msg.is_transferable) {\n                    this._pending_arrow = msg.id;\n                } else {\n                    this._handle({data: msg});\n                }\n            }\n        };\n    }\n\n    send(msg) {\n        this._ws.send(JSON.stringify(msg));\n    }\n\n    terminate() {\n        return new Promise(resolve => {\n            this._ws.onclose = resolve;\n            this._ws.close();\n        });\n    }\n}\n\n/**\n * A WebSocket Manager instance for a remote perspective\n */\nexport class WebSocketManager extends Server {\n    constructor(...args) {\n        super(...args);\n        this.requests_id_map = new Map();\n        this.requests = {};\n        this.websockets = {};\n\n        // clear invalid connections\n        setInterval(() => {\n            Object.entries(this.websockets).forEach(([id, ws]) => {\n                if (ws.isAlive === false) {\n                    delete this.websockets[id];\n                    return ws.terminate();\n                }\n                ws.isAlive = false;\n            });\n        }, 30000);\n    }\n\n    /**\n     * Add a new websocket connection to the manager\n     *\n     * The WebsocketManager manages the websocket connection and processes every\n     * message received from each connections. When a websocket connection is\n     * `closed`, the websocket manager will clear all subscriptions associated\n     * with the connection\n     *\n     * @param {WebSocket} ws a websocket connection\n     */\n    add_connection(ws) {\n        ws.isAlive = true;\n        ws.id = CLIENT_ID_GEN++;\n\n        // Parse incoming messages\n        ws.on(\"message\", msg => {\n            ws.isAlive = true;\n            if (msg === \"heartbeat\") {\n                ws.send(\"heartbeat\");\n                return;\n            }\n            msg = JSON.parse(msg);\n            try {\n                // Send all messages to the handler defined in\n                // Perspective.Server\n                const compoundId = `${msg.id}/${ws.id}`;\n                this.requests_id_map.set(compoundId, msg.id);\n                msg.id = compoundId;\n                this.requests[msg.id] = {ws, msg};\n                this.process(msg, ws.id);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n        ws.on(\"close\", () => {\n            this.clear_views(ws.id);\n        });\n        ws.on(\"error\", console.error);\n    }\n\n    /**\n     * Send an asynchronous message to the Perspective web worker.\n     *\n     * If the `transferable` param is set, pass two messages: the string\n     * representation of the message and then the ArrayBuffer data that needs to\n     * be transferred. The `is_transferable` flag tells the client to expect the\n     * next message to be a transferable object.\n     *\n     * @param {Object} msg a valid JSON-serializable message to pass to the\n     * client\n     * @param {*} transferable a transferable object to be sent to the client\n     */\n    post(msg, transferable) {\n        const req = this.requests[msg.id];\n        const id = msg.id;\n        if (req.ws.readyState > 1) {\n            delete this.requests[id];\n            throw new Error(\"Connection closed\");\n        }\n        msg.id = this.requests_id_map.get(id);\n        if (transferable) {\n            msg.is_transferable = true;\n            req.ws.send(JSON.stringify(msg));\n            req.ws.send(transferable[0]);\n        } else {\n            req.ws.send(JSON.stringify(msg));\n        }\n        if (!req.msg.subscribe) {\n            this.requests_id_map.delete(id);\n            delete this.requests[id];\n        }\n    }\n\n    _host(cache, name, input) {\n        if (cache[name] !== undefined) {\n            throw new Error(`\"${name}\" already exists`);\n        }\n        input.on_delete(() => {\n            delete cache[name];\n        });\n        cache[name] = input;\n    }\n\n    /**\n     * Expose a Perspective `table` through the WebSocket, allowing\n     * it to be accessed by a unique name from a client.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     * @param {perspective.table} table `table` to host.\n     */\n    host_table(name, table) {\n        this._host(this._tables, name, table);\n    }\n\n    /**\n     * Expose a Perspective `view` through the WebSocket, allowing\n     * it to be accessed by a unique name from a client.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     * @param {perspective.view} view `view` to host.\n     */\n    host_view(name, view) {\n        this._host(this._views, name, view);\n    }\n\n    /**\n     * Cease hosting a `table` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_table(name) {\n        delete this._tables[name];\n    }\n\n    /**\n     * Cease hosting a `view` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_view(name) {\n        delete this._views[name];\n    }\n}\n"],"file":"websocket.js"}