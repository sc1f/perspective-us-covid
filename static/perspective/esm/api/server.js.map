{"version":3,"sources":["../../../src/js/api/server.js"],"names":["override_config","error_to_json","error","obj","Object","getOwnPropertyNames","forEach","key","Server","constructor","perspective","_tables","_views","_callback_cache","Map","init","msg","config","post","Error","clear_views","client_id","keys","delete","e","console","debug","length","process","cmd","initialize_profile_thread","args","name","msgs","table","options","g","eval","tbl","id","data","f","process_method_call","view_name","table_name","view","process_error","process_subscribe","callback","method","slice","ev","result","remove_method","substring","callback_id","set","get","JSON","stringify","process_method_call_response","message","push","subscribe","apply","Promise","then","catch"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {override_config} from \"../config\";\n\nfunction error_to_json(error) {\n    const obj = {};\n    if (typeof error !== \"string\") {\n        Object.getOwnPropertyNames(error).forEach(key => {\n            obj[key] = error[key];\n        }, error);\n    } else {\n        obj[\"message\"] = error;\n    }\n    return obj;\n}\n\n/**\n * The base class for Perspective's async API. It initializes and keeps track of\n * tables, views, and processes messages from the user into Perspective.\n *\n * Child classes must implement the `post()` interface, which defines how the\n * worker sends messages.\n */\nexport class Server {\n    constructor(perspective) {\n        this.perspective = perspective;\n        this._tables = {};\n        this._views = {};\n\n        this._callback_cache = new Map();\n    }\n\n    /**\n     * `Server` must be extended and the `post` method implemented before it can\n     * be initialized.\n     */\n    init(msg) {\n        if (msg.config) {\n            override_config(msg.config);\n        }\n        this.post(msg);\n    }\n\n    post() {\n        throw new Error(\"post() not implemented!\");\n    }\n\n    /**\n     * Garbage collect un-needed views.\n     */\n    clear_views(client_id) {\n        for (let key of Object.keys(this._views)) {\n            if (this._views[key].client_id === client_id) {\n                try {\n                    this._views[key].delete();\n                } catch (e) {\n                    console.error(e);\n                }\n                delete this._views[key];\n            }\n        }\n        console.debug(`GC ${Object.keys(this._views).length} views in memory`);\n    }\n\n    /**\n     * Given a message, execute its instructions. This method is the dispatcher\n     * for all Perspective actions, including table/view creation, deletion, and\n     * all method calls to/from the table and view.\n     *\n     * @param {*} msg an Object containing `cmd` (a String instruction) and\n     * associated data for that instruction\n     * @param {*} client_id\n     */\n    process(msg, client_id) {\n        switch (msg.cmd) {\n            case \"init_profile_thread\":\n                this.perspective.initialize_profile_thread();\n                break;\n            case \"init\":\n                this.init(msg);\n                break;\n            case \"table\":\n                if (typeof msg.args[0] === \"undefined\") {\n                    this._tables[msg.name] = [];\n                } else {\n                    const msgs = this._tables[msg.name];\n                    this._tables[msg.name] = this.perspective.table(msg.args[0], msg.options);\n                    if (msgs) {\n                        for (const msg of msgs) {\n                            this.process(msg);\n                        }\n                    }\n                }\n                break;\n            case \"table_generate\":\n                let g;\n                eval(\"g = \" + msg.args);\n                g(function(tbl) {\n                    this._tables[msg.name] = tbl;\n                    this.post({\n                        id: msg.id,\n                        data: \"created!\"\n                    });\n                });\n                break;\n            case \"table_execute\":\n                let f;\n                eval(\"f = \" + msg.f);\n                f(this._tables[msg.name]);\n                break;\n            case \"table_method\":\n            case \"view_method\":\n                this.process_method_call(msg);\n                break;\n            case \"view\":\n                // create a new view and track it with `client_id`\n                this._views[msg.view_name] = this._tables[msg.table_name].view(msg.config);\n                this._views[msg.view_name].client_id = client_id;\n                break;\n        }\n    }\n\n    /**\n     * Send an error to the client.\n     */\n    process_error(msg, error) {\n        this.post({\n            id: msg.id,\n            error: error_to_json(error)\n        });\n    }\n\n    /**\n     * Execute a subscription to a Perspective event.\n     */\n    process_subscribe(msg, obj) {\n        try {\n            let callback;\n            if (msg.method.slice(0, 2) === \"on\") {\n                callback = ev => {\n                    let result = {\n                        id: msg.id,\n                        data: ev\n                    };\n                    try {\n                        // post transferable data for arrow\n                        if (msg.args && msg.args[0]) {\n                            if (msg.method === \"on_update\" && msg.args[0][\"mode\"] === \"row\") {\n                                this.post(result, [ev]);\n                                return;\n                            }\n                        }\n\n                        this.post(result);\n                    } catch (e) {\n                        console.error(`Removing failed callback to \\`${msg.method}()\\` (presumably due to failed connection)`);\n                        const remove_method = msg.method.substring(3);\n                        obj[`remove_${remove_method}`](callback);\n                    }\n                };\n                if (msg.callback_id) {\n                    this._callback_cache.set(msg.callback_id, callback);\n                }\n            } else if (msg.callback_id) {\n                callback = this._callback_cache.get(msg.callback_id);\n                this._callback_cache.delete(msg.callback_id);\n            }\n            if (callback) {\n                obj[msg.method](callback, ...msg.args);\n            } else {\n                console.error(`Callback not found for remote call \"${JSON.stringify(msg)}\"`);\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n\n    process_method_call_response(msg, result) {\n        if (msg.method === \"delete\") {\n            delete this._views[msg.name];\n        }\n        if (msg.method === \"to_arrow\") {\n            this.post(\n                {\n                    id: msg.id,\n                    data: result\n                },\n                [result]\n            );\n        } else {\n            this.post({\n                id: msg.id,\n                data: result\n            });\n        }\n    }\n\n    /**\n     * Given a call to a table or view method, process it.\n     *\n     * @param {Object} msg\n     */\n    process_method_call(msg) {\n        let obj, result;\n        msg.cmd === \"table_method\" ? (obj = this._tables[msg.name]) : (obj = this._views[msg.name]);\n\n        if (!obj && msg.cmd === \"view_method\") {\n            // cannot have a host without a table, but can have a host without a\n            // view\n            this.process_error(msg, {message: \"View is not initialized\"});\n            return;\n        }\n\n        if (obj && obj.push) {\n            obj.push(msg);\n            return;\n        }\n\n        try {\n            if (msg.subscribe) {\n                this.process_subscribe(msg, obj);\n                return;\n            } else {\n                result = obj[msg.method].apply(obj, msg.args);\n                if (result instanceof Promise) {\n                    result.then(result => this.process_method_call_response(msg, result)).catch(error => this.process_error(msg, error));\n                } else {\n                    this.process_method_call_response(msg, result);\n                }\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n}\n"],"file":"server.js"}