{"version":3,"sources":["../../../src/js/highcharts/color_axis.js"],"names":["gparser","_get_gradient","type","gradient","window","ShadyCSS","getComputedStyleValue","getComputedStyle","getPropertyValue","parsed","parse","colorStops","map","x","i","color","value","join","Number","parseFloat","length","_get_gradients","gradients","restyle","undefined","bind","color_axis","config","colorRange","positive","negative","full","Object","assign","colorAxis","min","max","stops","reversed","startOnTick","endOnTick","legend","floating","enabled"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as gparser from \"gradient-parser\";\n\nfunction _get_gradient(type) {\n    let gradient;\n    if (window.ShadyCSS) {\n        gradient = window.ShadyCSS.getComputedStyleValue(this, `--highcharts-${type}--gradient`);\n    } else {\n        gradient = getComputedStyle(this).getPropertyValue(`--highcharts-${type}--gradient`);\n    }\n\n    const parsed = gparser.parse(gradient)[0].colorStops;\n    return parsed.map((x, i) => {\n        let color;\n        if (x.type === \"rgb\") {\n            color = `rgb(${x.value.join(\",\")})`;\n        } else {\n            color = `#${x.value}`;\n        }\n        return [Number.parseFloat(x.length ? x.length.value / 100 : `${i / (parsed.length - 1)}`), color];\n    });\n}\n\nconst _get_gradients = (() => {\n    let gradients;\n    return function(restyle) {\n        if (restyle || gradients === undefined) {\n            gradients = {};\n            for (let type of [\"positive\", \"negative\", \"full\"]) {\n                gradients[type] = _get_gradient.bind(this)(type);\n            }\n        }\n        return gradients;\n    };\n})();\n\nexport function color_axis(config, colorRange, restyle) {\n    let gradient,\n        {positive, negative, full} = _get_gradients.bind(this)(restyle);\n    if (colorRange[0] >= 0) {\n        gradient = positive;\n    } else if (colorRange[1] <= 0) {\n        gradient = negative;\n    } else {\n        gradient = full;\n    }\n    Object.assign(config, {\n        colorAxis: {\n            min: colorRange[0],\n            max: colorRange[1],\n            stops: gradient,\n            reversed: false,\n            startOnTick: false,\n            endOnTick: false\n        }\n    });\n    config.legend.reversed = true;\n    config.legend.floating = false;\n    config.legend.enabled = true;\n}\n"],"file":"color_axis.js"}