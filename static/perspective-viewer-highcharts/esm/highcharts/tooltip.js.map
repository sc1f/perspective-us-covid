{"version":3,"sources":["../../../src/js/highcharts/tooltip.js"],"names":["get_type_config","format_tooltip","context","type","schema","axis_titles","pivot_titles","row_pivots_titles","row","column_pivot_titles","column","has_row_pivots","length","has_column_pivots","row_pivots_text","column_pivot_text","row_pivots_values","get_pivot_values","key","collate_multiple_values","column_pivot_values","series","userOptions","name","split","axis_title","stack","axis_type","get_axis_type","format_value","y","has_x_values","value_exists","has_y_values","has_z_values","has_w_values","extra_text","x_text","y_text","z_text","w_text","point","x_axis_title","raw_x_value","x","collate_single_value","y_axis_title","raw_y_value","z_axis_title","raw_z_axis_value","colorValue","w_axis_title","raw_w_axis_value","z","tooltip","i","tooltip_text","join","value","id","default_value","title","raw_value","formatted_value","undefined","titles","values","output","push","pivots","parent","unshift","Date","toLocaleString","format","format_number","num","Number","parseFloat","parseInt"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {get_type_config} from \"@finos/perspective/dist/esm/config\";\n\nexport function format_tooltip(context, type, schema, axis_titles, pivot_titles) {\n    const row_pivots_titles = pivot_titles.row,\n        column_pivot_titles = pivot_titles.column;\n\n    const has_row_pivots = row_pivots_titles.length > 0,\n        has_column_pivots = column_pivot_titles.length > 0;\n\n    if (type === \"y\") {\n        // pivots cannot be type-mapped\n        let row_pivots_text = \"\",\n            column_pivot_text = \"\";\n\n        if (has_row_pivots) {\n            let row_pivots_values = get_pivot_values(context.key);\n            row_pivots_text = collate_multiple_values(row_pivots_titles, row_pivots_values);\n        }\n\n        if (has_column_pivots) {\n            let column_pivot_values = context.series.userOptions.name.split(\", \");\n            column_pivot_text = collate_multiple_values(column_pivot_titles, column_pivot_values);\n        }\n\n        const axis_title = context.series.userOptions.stack;\n        const axis_type = get_axis_type(axis_title, schema);\n\n        return `${row_pivots_text}\n                ${column_pivot_text}\n                <span>${axis_title}: </span><b>${format_value(context.y, axis_type)}</b>`;\n    } else if (type === \"xy\") {\n        const has_x_values = value_exists(axis_titles[0]),\n            has_y_values = value_exists(axis_titles[1]),\n            has_z_values = value_exists(axis_titles[2]),\n            has_w_values = value_exists(axis_titles[3]);\n\n        let row_pivots_text = \"\",\n            column_pivot_text = \"\",\n            extra_text = \"\",\n            x_text = \"\",\n            y_text = \"\",\n            z_text = \"\",\n            w_text = \"\";\n\n        // render tooltip based on axis + pivots\n        if (has_row_pivots) {\n            let row_pivots_values = context.key.split(\",\");\n            row_pivots_text = collate_multiple_values(row_pivots_titles, row_pivots_values);\n        }\n\n        if (has_column_pivots) {\n            let column_pivot_values = context.point.series.name.split(\",\");\n            column_pivot_text = collate_multiple_values(column_pivot_titles, column_pivot_values);\n        }\n\n        if (has_x_values) {\n            let x_axis_title = axis_titles[0],\n                raw_x_value = context.x;\n            x_text = collate_single_value(x_axis_title, raw_x_value, schema);\n        }\n\n        if (has_y_values) {\n            let y_axis_title = axis_titles[1],\n                raw_y_value = context.y;\n            y_text = collate_single_value(y_axis_title, raw_y_value, schema);\n        }\n\n        if (has_z_values) {\n            let z_axis_title = axis_titles[2],\n                raw_z_axis_value = context.point.colorValue;\n            z_text = collate_single_value(z_axis_title, raw_z_axis_value, schema);\n        }\n\n        if (has_w_values) {\n            let w_axis_title = axis_titles[3],\n                raw_w_axis_value = context.point.z;\n\n            w_text = collate_single_value(w_axis_title, raw_w_axis_value, schema);\n        }\n\n        if (context.point.tooltip && context.point.tooltip.length > 0) {\n            for (let i = 0; i < context.point.tooltip.length; i++) {\n                extra_text += collate_single_value(axis_titles[4 + i], context.point.tooltip[i], schema);\n            }\n        }\n\n        const tooltip_text = [row_pivots_text, column_pivot_text, x_text, y_text, z_text, w_text, extra_text];\n        return tooltip_text.join(\"\");\n    } else if (type === \"xyz\") {\n        return `<span>${format_value(context.point.value)}</span>`;\n    } else if (type === \"hierarchy\") {\n        return `<span>${context.point.id}: </span><b>${format_value(context.x)}</b>`;\n    }\n\n    let default_value;\n    context.x ? (default_value = context.x) : (default_value = context.y);\n\n    return default_value;\n}\n\nfunction collate_single_value(title, raw_value, schema) {\n    const type = get_axis_type(title, schema);\n    const formatted_value = format_value(raw_value, type);\n\n    /* columns in aggregate AND in sort need to show up, but\n     * columns not in aggregate but NOT in sort need to hide */\n    if (formatted_value === \"NaN\" || formatted_value === null || formatted_value === undefined) return \"\";\n\n    return `<span>${title}: <b>${formatted_value}</b></span><br/>`;\n}\n\nfunction collate_multiple_values(titles, values) {\n    if (values.length <= 0) return \"\";\n\n    let output = [];\n    for (let i = 0; i < titles.length; i++) {\n        output.push(`<span>${titles[i]}: <b>${values[i]}</b></span><br/>`);\n    }\n    return output.join(\"\");\n}\n\nexport function get_pivot_values(pivots) {\n    let values = [],\n        parent = pivots.parent;\n\n    values.unshift(pivots.name);\n\n    while (parent !== undefined) {\n        if (parent.name !== undefined) {\n            values.unshift(parent.name);\n        }\n        parent = parent.parent;\n    }\n\n    return values;\n}\n\nfunction get_axis_type(axis_title, schema) {\n    return schema[axis_title];\n}\n\nfunction value_exists(value) {\n    return value !== null && value !== undefined && value !== \" \";\n}\n\nfunction format_value(value, type) {\n    if (type === \"datetime\") {\n        return new Date(value).toLocaleString(\"en-us\", get_type_config(\"datetime\").format);\n    } else if (type === \"date\") {\n        return new Date(value).toLocaleString(\"en-us\", get_type_config(\"date\").format);\n    } else if (type === \"float\" || type === \"integer\") {\n        return format_number(value, type);\n    } else {\n        return value;\n    }\n}\n\nfunction format_number(num, format) {\n    if (format === \"float\") {\n        return Number.parseFloat(num).toLocaleString(get_type_config(\"float\").format);\n    } else {\n        return Number.parseInt(num).toLocaleString(get_type_config(\"float\").format);\n    }\n}\n"],"file":"tooltip.js"}