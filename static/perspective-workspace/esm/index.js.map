{"version":3,"sources":["../../src/js/index.js"],"names":["style","template","bindTemplate","PerspectiveWorkspace","SIDE","MessageLoop","Widget","injectedStyles","PerspectiveWorkspaceElement","side","value","setAttribute","workspace","getAttribute","save","restore","layout","addTable","name","table","getTable","removeTable","tables","notifyResize","update","_light_dom_changed","viewers","Array","from","childNodes","viewer","Node","TEXT_NODE","document","COMMENT_NODE","indexOf","nodeType","update_widget_for_viewer","remove_unslotted_widgets","_register_light_dom_listener","observer","MutationObserver","bind","config","attributes","childList","subtree","observe","connectedCallback","LEFT","container","shadowRoot","querySelector","_injectStyle","createElement","innerHTML","head","appendChild","sendMessage","Msg","BeforeAttach","insertBefore","node","AfterAttach","window","onresize","disconnectedCallback","removeChild"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport style from \"../less/workspace.less\";\nimport template from \"../html/workspace.html\";\nimport {bindTemplate} from \"@finos/perspective-viewer/dist/esm/utils\";\nimport {PerspectiveWorkspace, SIDE} from \"./workspace\";\nimport {MessageLoop} from \"@lumino/messaging\";\nimport {Widget} from \"@lumino/widgets\";\n\nimport injectedStyles from \"../less/injected.less\";\n\n/**\n * A Custom Element for coordinating a set of `<perspective-viewer>` light DOM\n * children.  `<perspective-workspace>` is built on Lumino.js to allow a more\n * app-like experience than `<perspective-viewer>`, providing\n * these features additionally:\n *\n * - Docking, arranging, tabbing and max/min-ing of `<perspective-viewer>`s.\n * - Trivial `<perspective-viewer>` duplication.\n * - Global Filter sidebar, for using selection state of a pivot table to filter\n *   siblings.\n * - Total persistence/serializable state and child state.\n * - Easy sharing/ownership of `Table()` among different `<perspective-viewer>`.\n * - A cool DOM-reactive API.\n *\n * There are a few ways to use this Custom Element.  In plain HTML, you can\n * express your initial view simply:\n *\n * ```html\n * <perspective-workspace>\n *     <perspective-viewer\n *         name=\"View One\"\n *         table=\"superstore\">\n *     </perspective-viewer>\n *\n *     <perspective-viewer\n *         row-pivots='[\"State\"]'\n *         name=\"View Two\"\n *         table=\"superstore\">\n *     </perspective-viewer>\n *\n * </perspective-workspace>\n * ```\n *\n * You can also use the DOM API in Javascript:\n *\n * ```javascript\n * const workspace = document.createElement(\"perspective-workspace\");\n * const viewer = document.createElement(\"perspective-viewer\");\n * workspace.appendChild(viewer);\n * document.body.appendChild(workspace);\n * ```\n *\n * This will yield a `<perspective-workspace> with the default layout.  To load\n * a `Table()`, add it to `tables` via the `Map()` API where it will be\n * auto-wired into all matching `<perspective-viewer>`s immediately:\n *\n * ```javascript\n * workspace.tables.set(\"superstore\", worker.table(my_data));\n * ```\n *\n *\n */\n@bindTemplate(template, style) // eslint-disable-next-line no-unused-vars\nclass PerspectiveWorkspaceElement extends HTMLElement {\n    /***************************************************************************\n     *\n     * Public\n     *\n     */\n\n    /**\n     * The side the Global Filter sidebar is placed relative to the main panel.\n     *\n     * @param {('left'|'right')} value\n     */\n    set side(value) {\n        this.setAttribute(\"side\", value);\n        if (this.workspace) {\n            this.workspace.side = value;\n        }\n    }\n\n    get side() {\n        return this.getAttribute(\"side\");\n    }\n\n    /**\n     * Persists this `<perspective-workspace>` to a token `Object`.  This object\n     * is JSON serializable and describes the state of the Workspace and it's\n     * child `<perspective-viewer>` elements.  Some important keys:\n     *\n     * - `viewers`: The serialized state of `<perspective-viewer>` children,\n     *   named by `slot`.\n     * - `detail`: The main layout.\n     * - `master`: The contents of the Global Filter sidebar.\n     *\n     * While the `table` attribute is persisted for each `perspective-viewer`,\n     * `Table`s themselves must be added to the `tables` property `Map()`\n     * separately.\n     *\n     * @return {Object} A configuration token, compatible with\n     * `restore(config)`.\n     * @example\n     * // Save this layout to local storage\n     * const workspace = document.querySelector(\"perspective-workspace\");\n     * localStorage.set(\"CONFIG\", JSON.stringify(workspace.save()));\n     */\n    save() {\n        return this.workspace.save();\n    }\n\n    /**\n     * Restore this `<perspective-workspace>` to a previous state captured by\n     * `save()`.  Calling this method will completely rewrite this element's\n     * `innerHTML`, but may reuse `<perspective-viewer>`  children depending\n     * on the `slot` attribute names.  However, it should always be possible\n     * to recreate any given state from within the UI itself, as the attributes\n     * on `<perspective-viewer>` itself create immutable views.\n     *\n     * While the `table` attribute is set for each `perspective-viewer`,\n     * `Table`s themselves must be added to the `tables` property `Map()`\n     * separately.\n     * @param {Object} config A configuration token, as returned by `save()`.\n     * @example\n     * // Restore this layout from local storage\n     * const workspace = document.querySelector(\"perspective-workspace\");\n     * workspace.restore(JSON.parse(localStorage.get(\"CONFIG\"));\n     *\n     * // Add `Table` separately.\n     * workspace.tables.set(\"superstore\", worker.table(data));\n     */\n    restore(layout) {\n        return this.workspace.restore(layout);\n    }\n\n    addTable(name, table) {\n        this.workspace.addTable(name, table);\n    }\n\n    getTable(name) {\n        return this.workspace.getTable(name);\n    }\n\n    removeTable(name) {\n        return this.workspace.removeTable(name);\n    }\n\n    /**\n     * A `Map()` of `perspective.Table()` by name.  The names set here will auto\n     * wire any child `perspective-viewer` elements in this Workspace's subtree,\n     * by looking up their respective `table` attribute.\n     *\n     * Calling methods on this `Map()` may have side-effects, as\n     * `PerspectiveViewerHTMLElement.load()` is called when a new `Table()` is\n     * set with a name matching an existing child `perspective-viewer`.\n     *\n     * @readonly\n     * @memberof PerspectiveWorkspaceElement\n     */\n    get tables() {\n        return this.workspace.tables;\n    }\n\n    /**\n     * Invalidate this component's dimensions and recalculate.\n     */\n    notifyResize() {\n        this.workspace.update();\n    }\n\n    _light_dom_changed() {\n        const viewers = Array.from(this.childNodes);\n        for (const viewer of viewers) {\n            if ([Node.TEXT_NODE, document.COMMENT_NODE].indexOf(viewer.nodeType) > -1) {\n                continue;\n            }\n            this.workspace.update_widget_for_viewer(viewer);\n        }\n        this.workspace.remove_unslotted_widgets(viewers);\n    }\n\n    _register_light_dom_listener() {\n        let observer = new MutationObserver(this._light_dom_changed.bind(this));\n        let config = {attributes: false, childList: true, subtree: true};\n        observer.observe(this, config);\n        this._light_dom_changed();\n    }\n\n    connectedCallback() {\n        this.side = this.side || SIDE.LEFT;\n\n        const container = this.shadowRoot.querySelector(\"#container\");\n        this.workspace = new PerspectiveWorkspace(this, {side: this.side});\n\n        this._register_light_dom_listener();\n\n        // TODO: check we only insert one of these\n        this._injectStyle = document.createElement(\"style\");\n        this._injectStyle.innerHTML = injectedStyles;\n        document.head.appendChild(this._injectStyle);\n\n        MessageLoop.sendMessage(this.workspace, Widget.Msg.BeforeAttach);\n        container.insertBefore(this.workspace.node, null);\n        MessageLoop.sendMessage(this.workspace, Widget.Msg.AfterAttach);\n\n        window.onresize = () => {\n            this.workspace.update();\n        };\n    }\n\n    disconnectedCallback() {\n        document.head.removeChild(this._injectStyle);\n    }\n}\n"],"file":"index.js"}