{"version":3,"sources":["../../src/js/computed_expression_editor.js"],"names":["bindTemplate","throttlePromise","template","style","expression_to_computed_column_config","ComputedExpressionEditor","constructor","_parsed_expression","undefined","expressions","connectedCallback","_register_ids","_register_callbacks","_textarea_observer","MutationObserver","_resize_textarea","bind","_observe_textarea","observe","_expression_input","attributes","attributeFilter","event","CustomEvent","dispatchEvent","disconnect","_capture_drop_data","data","dataTransfer","getData","parsed","JSON","parse","Array","isArray","length","preventDefault","value","e","_validate_expression","expression","_clear_error_messages","_enable_save_button","message","stringify","_disable_save_button","_set_error_message","_error","detail","parsed_expression","_type_check_expression","computed_schema","expected_types","invalid","column","push","col","join","_remove_all_expressions","_save_expression","_clear_expression_input","input","_close_expression_editor","display","_side_panel_actions","target","innerText","_save_button","toggleAttribute","removeAttribute","_disable_remove_button","_remove_button","_enable_remove_button","parentElement","querySelector","_close_button","shadowRoot","addEventListener"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {bindTemplate, throttlePromise} from \"./utils.js\";\n\nimport template from \"../html/computed_expression_editor.html\";\n\nimport style from \"../less/computed_expression_editor.less\";\n\nimport {expression_to_computed_column_config} from \"./computed_expressions/visitor\";\n\n// Eslint complains here because we don't do anything, but actually we globally\n// register this class as a CustomElement\n@bindTemplate(template, style) // eslint-disable-next-line no-unused-vars\nclass ComputedExpressionEditor extends HTMLElement {\n    constructor() {\n        super();\n\n        this._parsed_expression = undefined;\n        this.expressions = [];\n    }\n\n    connectedCallback() {\n        this._register_ids();\n        this._register_callbacks();\n        this._textarea_observer = new MutationObserver(this._resize_textarea.bind(this));\n    }\n\n    /**\n     * Observe the textarea when the editor is opened.\n     */\n    _observe_textarea() {\n        this._textarea_observer.observe(this._expression_input, {\n            attributes: true,\n            attributeFilter: [\"style\"]\n        });\n    }\n\n    /**\n     * Dispatch an event on textarea resize to notify the side panel, and\n     * disconnect the observer.\n     */\n    _resize_textarea() {\n        const event = new CustomEvent(\"perspective-computed-expression-resize\");\n        this.dispatchEvent(event);\n        this._textarea_observer.disconnect();\n    }\n\n    /**\n     * When a column/text is dragged and dropped into the textbox, read it\n     * properly.\n     *\n     * @param {*} event\n     */\n    _capture_drop_data(event) {\n        const data = event.dataTransfer.getData(\"text\");\n        if (data !== \"\") {\n            try {\n                const parsed = JSON.parse(data);\n                if (Array.isArray(parsed) && parsed.length > 4) {\n                    event.preventDefault();\n                    this._expression_input.value += `\"${parsed[0]}\"`;\n                }\n            } catch (e) {\n                // regular text, don't do anything as browser will handle\n            } finally {\n                this._validate_expression();\n            }\n        }\n    }\n\n    // Expression actions\n    @throttlePromise\n    async _validate_expression() {\n        const expression = this._expression_input.value;\n\n        if (expression.length === 0) {\n            this._clear_error_messages();\n            this._enable_save_button();\n            return;\n        }\n\n        // FIXME: make the error UI an overlay like the render warning.\n\n        try {\n            // Use this just for validation. On anything short of a massive\n            // expression, this should have no performance impact as we\n            // share an instance of the parser throughout the viewer.\n            this._parsed_expression = expression_to_computed_column_config(expression);\n        } catch (e) {\n            const message = e.message ? e.message : JSON.stringify(e);\n            this._disable_save_button();\n            this._set_error_message(message, this._error);\n            return;\n        }\n\n        // Take the parsed expression and type check it on the viewer,\n        // which will call `_type_check_expression()` with a computed_schema.\n        const event = new CustomEvent(\"perspective-computed-expression-type-check\", {\n            detail: {\n                parsed_expression: this._parsed_expression\n            }\n        });\n\n        this.dispatchEvent(event);\n        return;\n    }\n\n    @throttlePromise\n    async _type_check_expression(computed_schema, expected_types) {\n        const parsed = this._parsed_expression || [];\n        const invalid = [];\n\n        for (const column of parsed) {\n            if (!computed_schema[column.column]) {\n                invalid.push(column.column);\n            }\n        }\n\n        if (invalid.length > 0) {\n            let message = \"TypeError:\\n\";\n            for (const col of invalid) {\n                message += `- \\`${col}\\` expected input column types ${expected_types[col].join(\"/\")}\\n`;\n            }\n            this._disable_save_button();\n            this._set_error_message(message, this._error);\n        } else {\n            this._clear_error_messages();\n            this._enable_save_button();\n        }\n    }\n\n    /**\n     * DEPRECATED: Clears all expressions from the viewer.\n     */\n    _remove_all_expressions() {\n        const event = new CustomEvent(\"perspective-computed-expression-remove\");\n        this.dispatchEvent(event);\n        this.expressions = [];\n    }\n\n    _save_expression() {\n        const expression = this._expression_input.value;\n        const parsed_expression = this._parsed_expression || [];\n\n        const event = new CustomEvent(\"perspective-computed-expression-save\", {\n            detail: {\n                expression: expression,\n                parsed_expression: parsed_expression\n            }\n        });\n\n        this.dispatchEvent(event);\n\n        this.expressions.push(expression);\n    }\n\n    // UI actions\n    _clear_expression_input() {\n        const input = this._expression_input;\n        input.value = \"\";\n    }\n\n    _close_expression_editor() {\n        this.style.display = \"none\";\n        this._side_panel_actions.style.display = \"flex\";\n        this._clear_error_messages();\n        this._clear_expression_input();\n        // Disconnect the observer.\n        this._textarea_observer.disconnect();\n    }\n\n    // error message handlers\n    _set_error_message(message, target) {\n        if (target) {\n            target.innerText = message;\n            target.style.display = \"block\";\n        }\n    }\n\n    _clear_error_messages() {\n        this._error.innerText = \"\";\n        this._error.style.display = \"none\";\n    }\n\n    // Save button handlers\n    _disable_save_button() {\n        this._save_button.toggleAttribute(\"disabled\", true);\n    }\n\n    _enable_save_button() {\n        this._save_button.removeAttribute(\"disabled\");\n    }\n\n    // Remove button handlers\n    _disable_remove_button() {\n        this._remove_button.toggleAttribute(\"disabled\", true);\n    }\n\n    _enable_remove_button() {\n        this._remove_button.removeAttribute(\"disabled\");\n    }\n\n    /**\n     * Map DOM IDs to class properties.\n     */\n    _register_ids() {\n        this._side_panel_actions = this.parentElement.querySelector(\"#side_panel__actions\");\n        this._close_button = this.shadowRoot.querySelector(\"#psp-expression-close\");\n        this._expression_input = this.shadowRoot.querySelector(\"#psp-expression-input\");\n        this._error = this.shadowRoot.querySelector(\"#psp-expression-error\");\n        this._save_button = this.shadowRoot.querySelector(\"#psp-expression-button-save\");\n        this._remove_button = this.shadowRoot.querySelector(\"#psp-expression-button-remove\");\n    }\n\n    /**\n     * Map callback functions to class properties.\n     */\n    _register_callbacks() {\n        this._close_button.addEventListener(\"click\", this._close_expression_editor.bind(this));\n        this._expression_input.addEventListener(\"keyup\", this._validate_expression.bind(this));\n        this._expression_input.addEventListener(\"drop\", this._capture_drop_data.bind(this));\n        this._save_button.addEventListener(\"click\", this._save_expression.bind(this));\n    }\n}\n"],"file":"computed_expression_editor.js"}