{"version":3,"sources":["../../../src/js/viewer/renderers.js"],"names":["html","render","RENDERERS","renderers","registerPlugin","name","plugin","Error","id","old_plugin","console","warn","getPlugin","getInstance","global","__perspective_plugins__","forEach","template","csv","register_debug_plugin","create","div","_view","to_csv","config","delimiter","timer","_render_time","selectMode","resize","delete"],"mappings":";;AAAA;;;;;;;;AASA,SAAQA,IAAR,EAAcC,MAAd,QAA2B,UAA3B;AAEA,MAAMC,SAAS,GAAG,EAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,IAAK,MAAM;AAChC;;;;;;;;;;;;;;AAcAC,EAAAA,cAAc,CAACC,IAAD,EAAOC,MAAP,EAAe;AACzB,QAAIJ,SAAS,CAACG,IAAD,CAAb,EAAqB;AACjB,YAAM,IAAIE,KAAJ,CAAW,gCAA+BF,IAAK,+BAA/C,CAAN;AACH;;AACD,SAAK,MAAMG,EAAX,IAAiBN,SAAjB,EAA4B;AACxB,YAAMO,UAAU,GAAGP,SAAS,CAACM,EAAD,CAA5B;;AACA,UAAIC,UAAU,IAAIA,UAAU,CAACJ,IAAX,KAAoBC,MAAM,CAACD,IAA7C,EAAmD;AAC/CK,QAAAA,OAAO,CAACC,IAAR,CAAc,4BAA2BL,MAAM,CAACD,IAAK,uBAArD;AACAI,QAAAA,UAAU,CAACJ,IAAX,GAAmB,GAAEI,UAAU,CAACJ,IAAK,KAAIG,EAAG,GAA5C;AACAF,QAAAA,MAAM,CAACD,IAAP,GAAe,GAAEC,MAAM,CAACD,IAAK,KAAIA,IAAK,GAAtC;AACH;AACJ;;AACDH,IAAAA,SAAS,CAACG,IAAD,CAAT,GAAkBC,MAAlB;AACH;;AAEDM,EAAAA,SAAS,CAACP,IAAD,EAAO;AACZ,WAAOH,SAAS,CAACG,IAAD,CAAhB;AACH;;AAEDQ,EAAAA,WAAW,GAAG;AACV,WAAOX,SAAP;AACH;;AApC+B,CAAX,EAAlB;AAuCPY,MAAM,CAACV,cAAP,GAAwBD,SAAS,CAACC,cAAlC;AAEAU,MAAM,CAACF,SAAP,GAAmBT,SAAS,CAACS,SAA7B;;AAEA,IAAIE,MAAM,CAACC,uBAAX,EAAoC;AAChCD,EAAAA,MAAM,CAACC,uBAAP,CAA+BC,OAA/B,CAAuC,CAAC,CAACX,IAAD,EAAOC,MAAP,CAAD,KAAoBQ,MAAM,CAACV,cAAP,CAAsBC,IAAtB,EAA4BC,MAA5B,CAA3D;AACH;;AAED,MAAMW,QAAQ,GAAGC,GAAG,IAChBlB,IAAK;yFACgFkB,GAAI;KAF7F;;AAKA,OAAO,SAASC,qBAAT,GAAiC;AACpCL,EAAAA,MAAM,CAACV,cAAP,CAAsB,OAAtB,EAA+B;AAC3BC,IAAAA,IAAI,EAAE,OADqB;AAE3Be,IAAAA,MAAM,EAAE,gBAAeC,GAAf,EAAoB;AACxB,YAAMH,GAAG,GAAG,MAAM,KAAKI,KAAL,CAAWC,MAAX,CAAkB;AAACC,QAAAA,MAAM,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAAT,OAAlB,CAAlB;;AACA,YAAMC,KAAK,GAAG,KAAKC,YAAL,EAAd;;AACA1B,MAAAA,MAAM,CAACgB,QAAQ,CAACC,GAAD,CAAT,EAAgBG,GAAhB,CAAN;AACAK,MAAAA,KAAK;AACR,KAP0B;AAQ3BE,IAAAA,UAAU,EAAE,QARe;AAS3BC,IAAAA,MAAM,EAAE,YAAW,CAAE,CATM;AAU3BC,IAAAA,MAAM,EAAE,YAAW,CAAE;AAVM,GAA/B;AAYH","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {html, render} from \"lit-html\";\n\nconst RENDERERS = {};\n\nexport const renderers = new (class {\n    /**\n     * Register a plugin with the <perspective-viewer> component.\n     *\n     * @param {string} name The logical unique name of the plugin.  This will be\n     * used to set the component's `view` attribute.\n     * @param {object} plugin An object with this plugin's prototype.\n     *     Valid keys are:\n     * @param {string} plugin.name The display name for this plugin.\n     * @param {string} plugin.create (required) The creation function - may\n     *     return a `Promise`.\n     * @param {string} plugin.delete The deletion function.\n     * @param {string} plugin.mode The selection mode - may be \"toggle\" or\n     *     \"select\".\n     */\n    registerPlugin(name, plugin) {\n        if (RENDERERS[name]) {\n            throw new Error(`A perspective-viewer plugin \"${name}\" has already been registered`);\n        }\n        for (const id in RENDERERS) {\n            const old_plugin = RENDERERS[id];\n            if (old_plugin && old_plugin.name === plugin.name) {\n                console.warn(`Conflicting plugin name \"${plugin.name}\", qualifying with id`);\n                old_plugin.name = `${old_plugin.name} [${id}]`;\n                plugin.name = `${plugin.name} [${name}]`;\n            }\n        }\n        RENDERERS[name] = plugin;\n    }\n\n    getPlugin(name) {\n        return RENDERERS[name];\n    }\n\n    getInstance() {\n        return RENDERERS;\n    }\n})();\n\nglobal.registerPlugin = renderers.registerPlugin;\n\nglobal.getPlugin = renderers.getPlugin;\n\nif (global.__perspective_plugins__) {\n    global.__perspective_plugins__.forEach(([name, plugin]) => global.registerPlugin(name, plugin));\n}\n\nconst template = csv =>\n    html`\n        <pre style=\"margin:0;overflow:scroll;position:absolute;width:100%;height:100%\">${csv}</pre>\n    `;\n\nexport function register_debug_plugin() {\n    global.registerPlugin(\"debug\", {\n        name: \"Debug\",\n        create: async function(div) {\n            const csv = await this._view.to_csv({config: {delimiter: \"|\"}});\n            const timer = this._render_time();\n            render(template(csv), div);\n            timer();\n        },\n        selectMode: \"toggle\",\n        resize: function() {},\n        delete: function() {}\n    });\n}\n"],"file":"renderers.js"}