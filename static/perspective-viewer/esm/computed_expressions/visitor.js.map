{"version":3,"sources":["../../../src/js/computed_expressions/visitor.js"],"names":["lex","ComputedExpressionColumnParser","COMPUTED_FUNCTION_FORMATTERS","parser","base_visitor","getBaseCstVisitorConstructor","ComputedExpressionColumnVisitor","constructor","validateVisitor","SuperExpression","ctx","computed_columns","visit","Expression","OperatorComputedColumn","FunctionComputedColumn","left","length","column","operator","Operator","right","as","column_name","push","computed_function_name","inputs","fn","Function","input_columns","ColumnName","computed","ParentheticalExpression","columnName","payload","TerminalColumnName","add","image","subtract","multiply","divide","pow","percent_of","equals","not_equals","greater_than","less_than","is","sqrt","pow2","abs","invert","log","exp","uppercase","lowercase","concat_comma","concat_space","bin10","bin100","bin1000","bin10th","bin100th","bin1000th","hour_of_day","day_of_week","month_of_year","second_bucket","minute_bucket","hour_bucket","day_bucket","week_bucket","month_bucket","year_bucket","As","children","visitor","expression_to_computed_column_config","expression","lex_result","input","tokens","cst","errors","message","map","e","Error","join"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport {lex} from \"./lexer\";\nimport {ComputedExpressionColumnParser} from \"./parser\";\nimport {COMPUTED_FUNCTION_FORMATTERS} from \"./formatter\";\n\nconst parser = new ComputedExpressionColumnParser([]);\nconst base_visitor = parser.getBaseCstVisitorConstructor();\n\nexport class ComputedExpressionColumnVisitor extends base_visitor {\n    constructor() {\n        super();\n        this.validateVisitor();\n    }\n\n    SuperExpression(ctx) {\n        let computed_columns = [];\n        this.visit(ctx.Expression, computed_columns);\n        return computed_columns;\n    }\n\n    Expression(ctx, computed_columns) {\n        if (ctx.OperatorComputedColumn) {\n            this.visit(ctx.OperatorComputedColumn, computed_columns);\n        } else if (ctx.FunctionComputedColumn) {\n            this.visit(ctx.FunctionComputedColumn, computed_columns);\n        } else {\n            return;\n        }\n    }\n\n    /**\n     * Visit a single computed column in operator notation and generate its\n     * specification.\n     *\n     * @param {*} ctx\n     */\n    OperatorComputedColumn(ctx, computed_columns) {\n        let left = this.visit(ctx.left, computed_columns);\n\n        if (typeof left === \"undefined\") {\n            left = computed_columns[computed_columns.length - 1].column;\n        }\n\n        let operator = this.visit(ctx.Operator);\n\n        if (!operator) {\n            return;\n        }\n\n        let right = this.visit(ctx.right, computed_columns);\n\n        if (typeof right === \"undefined\") {\n            right = computed_columns[computed_columns.length - 1].column;\n        }\n\n        let as = this.visit(ctx.as);\n\n        let column_name = COMPUTED_FUNCTION_FORMATTERS[operator](left, right);\n\n        // Use custom name if provided through `AS/as/As`\n        if (as) {\n            column_name = as;\n        }\n\n        computed_columns.push({\n            column: column_name,\n            computed_function_name: operator,\n            inputs: [left, right]\n        });\n    }\n\n    /**\n     * Visit a single computed column in functional notation and generate its\n     * specification.\n     *\n     * @param {*} ctx\n     * @param {*} computed_columns\n     */\n    FunctionComputedColumn(ctx, computed_columns) {\n        const fn = this.visit(ctx.Function);\n\n        // Functions have 1...n parameters\n        let input_columns = [];\n\n        for (const column_name of ctx.ColumnName) {\n            let column = this.visit(column_name, computed_columns);\n            if (typeof column === \"undefined\") {\n                // Use the column immediately to the left, as that is the\n                // name of the parsed column from the expression\n                input_columns.push(computed_columns[computed_columns.length - 1].column);\n            } else {\n                input_columns.push(column);\n            }\n        }\n\n        const as = this.visit(ctx.as);\n\n        let column_name = COMPUTED_FUNCTION_FORMATTERS[fn](...input_columns);\n\n        // Use custom name if provided through `AS/as/As`\n        if (as) {\n            column_name = as;\n        }\n\n        const computed = {\n            column: column_name,\n            computed_function_name: fn,\n            inputs: input_columns\n        };\n\n        computed_columns.push(computed);\n    }\n\n    /**\n     * Parse and return a column name to be included in the computed config.\n     * @param {*} ctx\n     */\n    ColumnName(ctx, computed_columns) {\n        // `image` contains the raw string, `payload` contains the string\n        // without quotes.\n        if (ctx.ParentheticalExpression) {\n            return this.visit(ctx.ParentheticalExpression, computed_columns);\n        } else {\n            return ctx.columnName[0].payload;\n        }\n    }\n\n    /**\n     * Parse and return a column name to be included in the computed config, and\n     * explicitly not parsed as a parenthetical expression.\n     *\n     * @param {*} ctx\n     */\n    TerminalColumnName(ctx) {\n        return ctx.columnName[0].payload;\n    }\n\n    /**\n     * Parse a single mathematical operator (+, -, *, /, %).\n     * @param {*} ctx\n     */\n    Operator(ctx) {\n        if (ctx.add) {\n            return ctx.add[0].image;\n        } else if (ctx.subtract) {\n            return ctx.subtract[0].image;\n        } else if (ctx.multiply) {\n            return ctx.multiply[0].image;\n        } else if (ctx.divide) {\n            return ctx.divide[0].image;\n        } else if (ctx.pow) {\n            return ctx.pow[0].image;\n        } else if (ctx.percent_of) {\n            return ctx.percent_of[0].image;\n        } else if (ctx.equals) {\n            return ctx.equals[0].image;\n        } else if (ctx.not_equals) {\n            return ctx.not_equals[0].image;\n        } else if (ctx.greater_than) {\n            return ctx.greater_than[0].image;\n        } else if (ctx.less_than) {\n            return ctx.less_than[0].image;\n        } else if (ctx.is) {\n            return ctx.is[0].image;\n        } else {\n            return;\n        }\n    }\n\n    /**\n     * Identify and return a function name used for computation.\n     *\n     * @param {*} ctx\n     */\n    Function(ctx) {\n        if (ctx.sqrt) {\n            return ctx.sqrt[0].image;\n        } else if (ctx.pow2) {\n            return ctx.pow2[0].image;\n        } else if (ctx.abs) {\n            return ctx.abs[0].image;\n        } else if (ctx.invert) {\n            return ctx.invert[0].image;\n        } else if (ctx.log) {\n            return ctx.log[0].image;\n        } else if (ctx.exp) {\n            return ctx.exp[0].image;\n        } else if (ctx.length) {\n            return ctx.length[0].image;\n        } else if (ctx.uppercase) {\n            return ctx.uppercase[0].image;\n        } else if (ctx.lowercase) {\n            return ctx.lowercase[0].image;\n        } else if (ctx.concat_comma) {\n            return ctx.concat_comma[0].image;\n        } else if (ctx.concat_space) {\n            return ctx.concat_space[0].image;\n        } else if (ctx.bin10) {\n            return ctx.bin10[0].image;\n        } else if (ctx.bin100) {\n            return ctx.bin100[0].image;\n        } else if (ctx.bin1000) {\n            return ctx.bin1000[0].image;\n        } else if (ctx.bin10th) {\n            return ctx.bin10th[0].image;\n        } else if (ctx.bin100th) {\n            return ctx.bin100th[0].image;\n        } else if (ctx.bin1000th) {\n            return ctx.bin1000th[0].image;\n        } else if (ctx.hour_of_day) {\n            return ctx.hour_of_day[0].image;\n        } else if (ctx.day_of_week) {\n            return ctx.day_of_week[0].image;\n        } else if (ctx.month_of_year) {\n            return ctx.month_of_year[0].image;\n        } else if (ctx.second_bucket) {\n            return ctx.second_bucket[0].image;\n        } else if (ctx.minute_bucket) {\n            return ctx.minute_bucket[0].image;\n        } else if (ctx.hour_bucket) {\n            return ctx.hour_bucket[0].image;\n        } else if (ctx.day_bucket) {\n            return ctx.day_bucket[0].image;\n        } else if (ctx.week_bucket) {\n            return ctx.week_bucket[0].image;\n        } else if (ctx.month_bucket) {\n            return ctx.month_bucket[0].image;\n        } else if (ctx.year_bucket) {\n            return ctx.year_bucket[0].image;\n        } else {\n            return;\n        }\n    }\n\n    /**\n     * Give a custom name to the created computed column using \"AS\" or \"as\".\n     *\n     * @param {*} ctx\n     */\n    As(ctx) {\n        return ctx.TerminalColumnName[0].children.columnName[0].payload;\n    }\n\n    /**\n     * Parse an expression inside parentheses through recursing back up to\n     * `Expression`.\n     *\n     * @param {*} ctx\n     * @param {*} computed_columns\n     */\n    ParentheticalExpression(ctx, computed_columns) {\n        return this.visit(ctx.Expression, computed_columns);\n    }\n}\n\n// We only need one visitor instance - state is reset using `parser.input`.\nconst visitor = new ComputedExpressionColumnVisitor();\n\n/**\n * Given a string expression of the form '\"column\" +, -, *, / \"column\",\n * parse it and return a computed column configuration object.\n *\n * @param {String} expression\n */\nexport const expression_to_computed_column_config = function(expression) {\n    const lex_result = lex(expression);\n\n    // calling `parser.input` resets state.\n    parser.input = lex_result.tokens;\n\n    const cst = parser.SuperExpression();\n\n    if (parser.errors.length > 0) {\n        let message = parser.errors.map(e => e.message);\n        throw new Error(`${message.join(\"\\n\")}`);\n    }\n\n    return visitor.visit(cst);\n};\n"],"file":"visitor.js"}